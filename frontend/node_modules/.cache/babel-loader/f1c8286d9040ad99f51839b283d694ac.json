{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + 'Bn';\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + 'M';\n  } else {\n    return Math.round(num / 100) / 10 + 'K';\n  }\n};\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 6\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    onMouseEnter: () => {\n      const {\n        NAME,\n        POP_EST\n      } = geo.properties;\n      setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n    },\n    onMouseLeave: () => {\n      setTooltipContent('');\n    },\n    style: {\n      default: {\n        fill: '#D6D6DA',\n        outline: 'none'\n      },\n      hover: {\n        fill: '#F53',\n        outline: 'none'\n      },\n      pressed: {\n        fill: '#E42',\n        outline: 'none'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }))))));\n};\n\nfunction VectorMap() {\n  const [content, setContent] = React.useState('');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","ReactTooltip","geoUrl","rounded","num","Math","round","MapChart","setTooltipContent","scale","geographies","map","geo","rsmKey","NAME","POP_EST","properties","default","fill","outline","hover","pressed","VectorMap","content","setContent","useState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,EAAoDC,SAApD,QAAqE,mBAArE;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,MAAM,GAAG,wGAAf;;AAEA,MAAMC,OAAO,GAAIC,GAAD,IAAS;AACxB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AACrB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,IAA1C;AACA,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,GAAvC;AACA,GAFM,MAEA;AACN,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,GAApC;AACA;AACD,CARD;;AAUA,MAAMG,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AAC3C,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC;AAAEQ,IAAAA;AAAF,GAAD,KACAA,WAAW,CAACC,GAAZ,CAAiBC,GAAD,iBACf,oBAAC,SAAD;AACC,IAAA,GAAG,EAAEA,GAAG,CAACC,MADV;AAEC,IAAA,SAAS,EAAED,GAFZ;AAGC,IAAA,YAAY,EAAE,MAAM;AACnB,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBH,GAAG,CAACI,UAA9B;AACAR,MAAAA,iBAAiB,CAAE,GAAEM,IAAK,MAAKX,OAAO,CAACY,OAAD,CAAU,EAA/B,CAAjB;AACA,KANF;AAOC,IAAA,YAAY,EAAE,MAAM;AACnBP,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACA,KATF;AAUC,IAAA,KAAK,EAAE;AACNS,MAAAA,OAAO,EAAE;AACRC,QAAAA,IAAI,EAAE,SADE;AAERC,QAAAA,OAAO,EAAE;AAFD,OADH;AAKNC,MAAAA,KAAK,EAAE;AACNF,QAAAA,IAAI,EAAE,MADA;AAENC,QAAAA,OAAO,EAAE;AAFH,OALD;AASNE,MAAAA,OAAO,EAAE;AACRH,QAAAA,IAAI,EAAE,MADE;AAERC,QAAAA,OAAO,EAAE;AAFD;AATH,KAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFF,CADD,CADD,CADD,CADD;AAsCA,CAvCD;;AAyCA,SAASG,SAAT,GAAqB;AACpB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0B7B,KAAK,CAAC8B,QAAN,CAAe,EAAf,CAAhC;AACA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,QAAD;AAAU,IAAA,iBAAiB,EAAED,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeD,OAAf,CAFD,CADD;AAMA;;AAED,eAAe3B,IAAI,CAAC0B,SAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tif (num > 1000000000) {\n\t\treturn Math.round(num / 100000000) / 10 + 'Bn';\n\t} else if (num > 1000000) {\n\t\treturn Math.round(num / 100000) / 10 + 'M';\n\t} else {\n\t\treturn Math.round(num / 100) / 10 + 'K';\n\t}\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n\treturn (\n\t\t<div>\n\t\t\t<ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n\t\t\t\t<ZoomableGroup>\n\t\t\t\t\t<Geographies geography={geoUrl}>\n\t\t\t\t\t\t{({ geographies }) =>\n\t\t\t\t\t\t\tgeographies.map((geo) => (\n\t\t\t\t\t\t\t\t<Geography\n\t\t\t\t\t\t\t\t\tkey={geo.rsmKey}\n\t\t\t\t\t\t\t\t\tgeography={geo}\n\t\t\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\t\t\tconst { NAME, POP_EST } = geo.properties;\n\t\t\t\t\t\t\t\t\t\tsetTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\t\t\tsetTooltipContent('');\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\thover: {\n\t\t\t\t\t\t\t\t\t\t\tfill: '#F53',\n\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tpressed: {\n\t\t\t\t\t\t\t\t\t\t\tfill: '#E42',\n\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</Geographies>\n\t\t\t\t</ZoomableGroup>\n\t\t\t</ComposableMap>\n\t\t</div>\n\t);\n};\n\nfunction VectorMap() {\n\tconst [ content, setContent ] = React.useState('');\n\treturn (\n\t\t<div>\n\t\t\t<MapChart setTooltipContent={setContent} />\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n}\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}