{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, useZoomPan, Marker } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + 'Bcn';\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + 'M';\n  } else {\n    return Math.round(num / 100) / 10 + 'K';\n  }\n};\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties; // return NAME !== '';\n\n  return true;\n}\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    onMouseEnter: () => {\n      const {\n        NAME,\n        POP_EST\n      } = geo.properties;\n      setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n    },\n    onMouseLeave: () => {\n      setTooltipContent(\"\");\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#E42\",\n        outline: \"none\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nconst CustomZoomableGroup = ({\n  children,\n  ...restProps\n}) => {\n  const {\n    mapRef,\n    transformString,\n    position\n  } = useZoomPan(restProps);\n  return (\n    /*#__PURE__*/\n    // <div className=\"zoomable-group\">\n    React.createElement(\"g\", {\n      ref: mapRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: \"transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: transformString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 4\n      }\n    }, children(position))) // </div>\n\n  );\n};\n\nfunction VectorMap() {\n  const [content, setContent] = React.useState('');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","useZoomPan","Marker","geoCentroid","ReactTooltip","geoUrl","rounded","num","Math","round","notThisCountry","country","NAME","properties","MapChart","setTooltipContent","scale","geographies","map","geo","rsmKey","POP_EST","default","fill","outline","hover","pressed","CustomZoomableGroup","children","restProps","mapRef","transformString","position","VectorMap","content","setContent","useState"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, useZoomPan, Marker } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tif (num > 1000000000) {\n\t\treturn Math.round(num / 100000000) / 10 + 'Bcn';\n\t} else if (num > 1000000) {\n\t\treturn Math.round(num / 100000) / 10 + 'M';\n\t} else {\n\t\treturn Math.round(num / 100) / 10 + 'K';\n\t}\n};\n\nfunction notThisCountry(country) {\n\tconst { NAME } = country.properties;\n\t// return NAME !== '';\n\treturn true;\n}\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\n\n\nconst CustomZoomableGroup = ({ children, ...restProps }) => {\n\tconst { mapRef, transformString, position } = useZoomPan(restProps);\n\treturn (\n\t\t// <div className=\"zoomable-group\">\n\t\t<g ref={mapRef}>\n\t\t\t<rect fill=\"transparent\" />\n\t\t\t<g transform={transformString}>{children(position)}</g>\n\t\t</g>\n\t\t// </div>\n\t);\n};\n\nfunction VectorMap() {\n\tconst [ content, setContent ] = React.useState('');\n\treturn (\n\t\t<div>\n\t\t\t<MapChart setTooltipContent={setContent} />\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n}\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}