{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx\";\nimport React, { Component, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup, Annotation, Marker, useZoomPan } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\"; // import { useSpring, animated } from \"react-spring\";\n\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport { geoCentroid } from \"d3-geo\";\nimport mapdata from \"../maps/world.txt\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nvar countriesLoaded = false;\nvar countries = {};\nvar socket = null;\nvar troops = 0;\nvar countryStates = {};\nvar playerColours = {};\n\nclass countryState {\n  constructor(Troops, Player) {\n    this.Troops = Troops;\n    this.Player = Player;\n  }\n\n}\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n\n    socket.onmessage = msg => {\n      var action = JSON.parse(msg.data);\n\n      switch (action.Type) {\n        case \"updateTroops\":\n          troops = action.Troops;\n          break;\n\n        case \"updateCountry\":\n          if (typeof countryStates[action.Country] == \"undefined\" || countryStates[action.Country].Player != action.Player) {\n            countryStates[action.Country] = new countryState(action.Troops, action.Player);\n          } else {\n            countryStates[action.Country].Troops += action.Troops;\n          }\n\n          break;\n\n        case \"newPlayer\":\n          console.log(action.Player + \" has entered the chat bois as: \" + action.Country);\n          playerColours[action.Player] = action.Country;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SideBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = ISO_A2 => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"Spy Report On \", name, \":\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Population: \", pop_est), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"GDP (PPP): \", gdp), continent !== \"South America\" && /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 43\n      }\n    }, \"Subregion: \", subrg), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, \"Continent: \", continent));\n  };\n\n  const handleColourFill = country => {\n    if (!countriesLoaded) {\n      loadMap();\n      countriesLoaded = true;\n    }\n\n    const {\n      ISO_A2\n    } = country.properties;\n\n    if (clickedCountry !== \"\" && countries[clickedCountry].includes(ISO_A2)) {\n      return \"#be90d4\";\n    }\n\n    try {\n      var col = playerColours[countryStates[ISO_A2].Player];\n\n      if (typeof col == \"undefined\") {\n        col = \"#B9A37E\";\n      }\n\n      return col;\n    } catch (TypeError) {\n      return \"#B9A37E\";\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-info-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"START THE CONQUEST!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, \"Welcome Commander \", username, \"!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"BASE TROOPS: \", troops)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"), clickedCountry !== \"\" && /*#__PURE__*/React.createElement(\"selectedCountryOptions\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 37\n    }\n  }), display && /*#__PURE__*/React.createElement(CountryDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(MapSettings, {\n    setTooltipContent: setState,\n    setname: setname,\n    setgdp: setgdp,\n    setpop_est: setpop_est,\n    setdisplay: setdisplay,\n    setcontinent: setcontinent,\n    setsubrg: setsubrg,\n    setclickedCountry: handleclickedCountry,\n    handleColourFill: handleColourFill,\n    handleColourStroke: handleColourFill,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, state));\n}\n\nconst getnum = num => {\n  var num = Math.round(num);\n\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n\n  return num;\n}; //Countries to not display\n\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry; //TODO: player team colour for country\n\nfunction countryColors(country) {\n  const {\n    NAME,\n    ISO_A2\n  } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  //TODO: take value from the cookie\n  fetch(\"/maps/world.txt\").then(raw => raw.text()).then(raw => raw.split(\"\\n\")).then(lines => lines.map(s => s.split(\" \"))).then(lines => lines.forEach(line => countries[line[0]] = line.slice(1)));\n} //FIXME: fix read file correctly\n\n\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"/maps/world.txt\";\n  var textByLine = \"\";\n  fetch(fileURL).then(raw => raw.text()).then(raw => raw.split(\"\\n\")).then(raw => raw.map(x => x.split(\" \"))).then(raw => textByLine = raw);\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n\n  console.log(countriesBordering);\n  return countriesBordering;\n}\n/* GAME MAP */\n\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomZoomableGroup, {\n    center: [0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, position => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }, ({\n    geographies\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, geographies.map(geo => {\n    const fillcolour = handleColourFill(geo);\n    const strokecolour = handleColourStroke(geo);\n    return notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: fillcolour,\n      stroke: strokecolour,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST,\n          GDP_MD_EST,\n          SUBREGION,\n          CONTINENT\n        } = geo.properties; // setTooltipContent(\n        //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n        // );\n\n        setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n        setname(NAME);\n        setpop_est(getnum(POP_EST));\n        setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n        setsubrg(SUBREGION);\n        setcontinent(CONTINENT);\n        setdisplay(true);\n      },\n      onMouseLeave: () => {\n        setTooltipContent(\"\");\n        setdisplay(false);\n      },\n      style: {\n        default: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#F53\",\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        }\n      },\n      onClick: () => {\n        const {\n          ISO_A2\n        } = geo.properties;\n        setclickedCountry(ISO_A2);\n      },\n      onDoubleClick: () => {\n        setdoubleClicked();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }) : null;\n  }), geographies.map(geo => {\n    const centroid = geoCentroid(geo);\n    const {\n      NAME\n    } = geo.properties;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      key: geo.rsmKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      coordinates: centroid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      fontSize: 4,\n      alignmentBaseline: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 31\n      }\n    }, NAME)));\n  })))))));\n};\n\nconst CustomZoomableGroup = ({\n  children,\n  ...restProps\n}) => {\n  const {\n    mapRef,\n    transformString,\n    position\n  } = useZoomPan(restProps);\n  return (\n    /*#__PURE__*/\n    // <div className=\"zoomable-group\">\n    React.createElement(\"g\", {\n      ref: mapRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: \"transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: transformString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 7\n      }\n    }, children(position))) // </div>\n\n  );\n};\n\nexport default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","Annotation","Marker","useZoomPan","ReactTooltip","connect","loaddetails","Intro2","username","geoCentroid","mapdata","geoUrl","countriesLoaded","countries","socket","troops","countryStates","playerColours","countryState","constructor","Troops","Player","GameMap","onmessage","msg","action","JSON","parse","data","Type","Country","console","log","render","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","handleclickedCountry","ISO_A2","handledoubleClicked","CountryDetails","handleColourFill","country","loadMap","properties","includes","col","TypeError","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","fetch","then","raw","text","split","lines","map","s","forEach","line","slice","getCountryCodes","countrycode","fileURL","textByLine","x","countriesBordering","j","length","borders","i","push","MapSettings","setTooltipContent","handleColourStroke","setdoubleClicked","position","geographies","geo","fillcolour","strokecolour","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed","centroid","CustomZoomableGroup","children","restProps","mapRef","transformString"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Annotation,\n  Marker,\n  useZoomPan,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport { geoCentroid } from \"d3-geo\";\n\nimport mapdata from \"../maps/world.txt\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nvar countriesLoaded = false;\nvar countries = {};\nvar socket = null;\nvar troops = 0;\nvar countryStates = {};\nvar playerColours = {};\n\nclass countryState {\n  constructor(Troops, Player) {\n    this.Troops = Troops;\n    this.Player = Player;\n  }\n}\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n    socket.onmessage = (msg) => {\n      var action = JSON.parse(msg.data);\n      switch (action.Type) {\n        case \"updateTroops\":\n          troops = action.Troops;\n          break;\n        case \"updateCountry\":\n          if (\n            typeof countryStates[action.Country] == \"undefined\" ||\n            countryStates[action.Country].Player != action.Player\n          ) {\n            countryStates[action.Country] = new countryState(\n              action.Troops,\n              action.Player\n            );\n          } else {\n            countryStates[action.Country].Troops += action.Troops;\n          }\n          break;\n        case \"newPlayer\":\n          console.log(\n            action.Player + \" has entered the chat bois as: \" + action.Country\n          );\n          playerColours[action.Player] = action.Country;\n      }\n    };\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = (ISO_A2) => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    if (!countriesLoaded) {\n      loadMap();\n      countriesLoaded = true;\n    }\n    const { ISO_A2 } = country.properties;\n\n    if (clickedCountry !== \"\" && countries[clickedCountry].includes(ISO_A2)) {\n      return \"#be90d4\";\n    }\n    try {\n      var col = playerColours[countryStates[ISO_A2].Player];\n      if (typeof col == \"undefined\") {\n        col = \"#B9A37E\";\n      }\n      return col;\n    } catch (TypeError) {\n      return \"#B9A37E\";\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n            <h3>BASE TROOPS: {troops}</h3>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          {clickedCountry !== \"\" && <selectedCountryOptions />}\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourFill}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  //TODO: take value from the cookie\n  fetch(\"/maps/world.txt\")\n    .then((raw) => raw.text())\n    .then((raw) => raw.split(\"\\n\"))\n    .then((lines) => lines.map((s) => s.split(\" \")))\n    .then((lines) =>\n      lines.forEach((line) => (countries[line[0]] = line.slice(1)))\n    );\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"/maps/world.txt\";\n  var textByLine = \"\";\n  fetch(fileURL)\n    .then((raw) => raw.text())\n    .then((raw) => raw.split(\"\\n\"))\n    .then((raw) => raw.map((x) => x.split(\" \")))\n    .then((raw) => (textByLine = raw));\n\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n  console.log(countriesBordering);\n  return countriesBordering;\n}\n\n/* GAME MAP */\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap>\n        <CustomZoomableGroup center={[0, 0]}>\n          {(position) => (\n            <>\n              <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                  <>\n                    {geographies.map((geo) => {\n                      const fillcolour = handleColourFill(geo);\n                      const strokecolour = handleColourStroke(geo);\n                      return notThisCountry(geo) ? (\n                        <Geography\n                          key={geo.rsmKey}\n                          geography={geo}\n                          fill={fillcolour}\n                          stroke={strokecolour}\n                          onMouseEnter={() => {\n                            const {\n                              NAME,\n                              POP_EST,\n                              GDP_MD_EST,\n                              SUBREGION,\n                              CONTINENT,\n                            } = geo.properties;\n\n                            // setTooltipContent(\n                            //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                            // );\n\n                            setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                            setname(NAME);\n                            setpop_est(getnum(POP_EST));\n                            setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                            setsubrg(SUBREGION);\n                            setcontinent(CONTINENT);\n                            setdisplay(true);\n                          }}\n                          onMouseLeave={() => {\n                            setTooltipContent(\"\");\n                            setdisplay(false);\n                          }}\n                          style={{\n                            default: {\n                              fill: \"#D6D6DA\",\n                              outline: \"none\",\n                            },\n                            hover: {\n                              fill: \"#F53\",\n                              outline: \"none\",\n                            },\n                            pressed: {\n                              fill: \"#D6D6DA\",\n                              outline: \"none\",\n                            },\n                          }}\n                          onClick={() => {\n                            const { ISO_A2 } = geo.properties;\n                            setclickedCountry(ISO_A2);\n                          }}\n                          onDoubleClick={() => {\n                            setdoubleClicked();\n                          }}\n                        />\n                      ) : null;\n                    })}\n\n                    {geographies.map((geo) => {\n                      const centroid = geoCentroid(geo);\n                      const { NAME } = geo.properties;\n                      return (\n                        <g key={geo.rsmKey}>\n                          {\n                            <Marker coordinates={centroid}>\n                              <text fontSize={4} alignmentBaseline=\"middle\">\n                                {NAME}\n                              </text>\n                            </Marker>\n                          }\n                        </g>\n                      );\n                    })}\n                  </>\n                )}\n              </Geographies>\n            </>\n          )}\n        </CustomZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nconst CustomZoomableGroup = ({ children, ...restProps }) => {\n  const { mapRef, transformString, position } = useZoomPan(restProps);\n  return (\n    // <div className=\"zoomable-group\">\n    <g ref={mapRef}>\n      <rect fill=\"transparent\" />\n      <g transform={transformString}>{children(position)}</g>\n    </g>\n    // </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}