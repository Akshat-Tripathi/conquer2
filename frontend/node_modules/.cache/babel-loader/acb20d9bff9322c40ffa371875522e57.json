{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + 'Billion';\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + 'Million';\n  } else {\n    return Math.round(num / 100) / 10 + 'Thousand';\n  }\n};\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties; // return NAME !== '';\n\n  return true;\n}\n\nconst mapWidth = 1000;\nconst mapHeight = 600;\n\nconst MapChart = ({\n  setTooltipContent,\n  mapWidth,\n  mapHeight\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    width: mapWidth,\n    height: mapHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    translateExtent: [[0, -mapHeight], [mapWidth, mapHeight]],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const centroid = geoCentroid(geo);\n    notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      stroke: \"#FFF\",\n      strokeWidth: 0.3,\n      onMouseEnter: () => {\n        const {\n          NAME\n        } = geo.properties;\n        setTooltipContent(`${NAME}`);\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n      },\n      style: {\n        default: {\n          fill: '#D6D6DA',\n          outline: 'none'\n        },\n        hover: {\n          fill: '#F53',\n          outline: 'none'\n        },\n        pressed: {\n          fill: '#',\n          outline: 'none'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }\n    }) : null;\n  })))));\n};\n\nfunction VectorMap() {\n  const [content, setContent] = React.useState('');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    mapWidth: mapWidth,\n    mapHeight: mapHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","Annotation","geoCentroid","ReactTooltip","geoUrl","rounded","num","Math","round","notThisCountry","country","NAME","properties","mapWidth","mapHeight","MapChart","setTooltipContent","scale","geographies","map","geo","centroid","rsmKey","default","fill","outline","hover","pressed","VectorMap","content","setContent","useState"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tif (num > 1000000000) {\n\t\treturn Math.round(num / 100000000) / 10 + 'Billion';\n\t} else if (num > 1000000) {\n\t\treturn Math.round(num / 100000) / 10 + 'Million';\n\t} else {\n\t\treturn Math.round(num / 100) / 10 + 'Thousand';\n\t}\n};\n\nfunction notThisCountry(country) {\n\tconst { NAME } = country.properties;\n\t// return NAME !== '';\n\treturn true;\n}\n\nconst mapWidth = 1000;\nconst mapHeight = 600;\nconst MapChart = ({ setTooltipContent, mapWidth, mapHeight }) => {\n\treturn (\n\t\t<div>\n\t\t\t<ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }} width={mapWidth} height={mapHeight}>\n\t\t\t\t<ZoomableGroup translateExtent={[ [ 0, -mapHeight ], [ mapWidth, mapHeight ] ]}>\n\t\t\t\t\t<Geographies geography={geoUrl}>\n\t\t\t\t\t\t{({ geographies }) =>\n\t\t\t\t\t\t\tgeographies.map((geo) => {\n\t\t\t\t\t\t\t\tconst centroid = geoCentroid(geo);\n\t\t\t\t\t\t\t\tnotThisCountry(geo) ? (\n\t\t\t\t\t\t\t\t\t<Geography\n\t\t\t\t\t\t\t\t\t\tkey={geo.rsmKey}\n\t\t\t\t\t\t\t\t\t\tgeography={geo}\n\t\t\t\t\t\t\t\t\t\tstroke=\"#FFF\"\n\t\t\t\t\t\t\t\t\t\tstrokeWidth={0.3}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\t\t\t\tconst { NAME } = geo.properties;\n\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent(`${NAME}`);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent('');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\thover: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#F53',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tpressed: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : null;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</Geographies>\n\t\t\t\t</ZoomableGroup>\n\t\t\t</ComposableMap>\n\t\t</div>\n\t);\n};\n\nfunction VectorMap() {\n\tconst [ content, setContent ] = React.useState('');\n\n\treturn (\n\t\t<div>\n\t\t\t<MapChart setTooltipContent={setContent} mapWidth={mapWidth} mapHeight={mapHeight} />\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n}\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}