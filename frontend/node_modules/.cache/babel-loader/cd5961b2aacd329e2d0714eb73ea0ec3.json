{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  var num = Math.round(num);\n\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + ' Trillion';\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + ' Billion';\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + ' Million';\n  }\n\n  return num;\n};\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties; // return NAME !== '';\n\n  return true;\n}\n\nconst MapChart = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  handleColorFill,\n  handleColorStroke\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 6\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const fillcolor = handleColorFill(geo);\n    const strokecolor = handleColorStroke(geo);\n    return notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      stroke: strokecolor,\n      stroke: fillcolor,\n      strokeWidth: 0.3,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST,\n          SUBREGION,\n          CONTINENT,\n          GDP_MD_EST\n        } = geo.properties;\n        setTooltipContent(`${NAME}`);\n        setname(NAME);\n        setpop_est(rounded(POP_EST));\n        setcontinent(CONTINENT);\n        setgdp(rounded(GDP_MD_EST * 1000));\n        setsubrg(SUBREGION);\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n        setname('');\n        setpop_est('');\n        setcontinent('');\n        setgdp();\n        setsubrg('');\n      },\n      style: {\n        default: {\n          fill: '#D6D6DA',\n          outline: 'none'\n        },\n        hover: {\n          fill: '#F53',\n          outline: 'none'\n        },\n        pressed: {\n          fill: '#',\n          outline: 'none'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }\n    }) : null;\n  })))));\n};\n\nconst VectorMap = ({\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  handleColorStroke,\n  handleColorFill\n}) => {\n  const [content, setContent] = React.useState('');\n  const mapWidth = 1000;\n  const mapHeight = 600;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    mapWidth: mapWidth,\n    mapHeight: mapHeight,\n    setname: setname,\n    setpop_est: setpop_est,\n    setsubrg: setsubrg,\n    setcontinent: setcontinent,\n    setgdp: setgdp,\n    handleColorFill: handleColorFill,\n    handleColorStroke: handleColorStroke,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }\n  }, content));\n};\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","Annotation","geoCentroid","ReactTooltip","geoUrl","rounded","num","Math","round","pow","notThisCountry","country","NAME","properties","MapChart","setTooltipContent","setname","setpop_est","setsubrg","setcontinent","setgdp","handleColorFill","handleColorStroke","scale","geographies","map","geo","fillcolor","strokecolor","rsmKey","POP_EST","SUBREGION","CONTINENT","GDP_MD_EST","default","fill","outline","hover","pressed","VectorMap","content","setContent","useState","mapWidth","mapHeight"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tvar num = Math.round(num);\n\tif (num > Math.pow(10, 12)) {\n\t\tnum = num / Math.pow(10, 12) + ' Trillion';\n\t} else if (num > Math.pow(10, 9)) {\n\t\tnum = num / Math.pow(10, 9) + ' Billion';\n\t} else if (num > Math.pow(10, 6)) {\n\t\tnum = num / Math.pow(10, 6) + ' Million';\n\t}\n\treturn num;\n};\n\nfunction notThisCountry(country) {\n\tconst { NAME } = country.properties;\n\t// return NAME !== '';\n\treturn true;\n}\n\nconst MapChart = ({\n\tsetTooltipContent,\n\tsetname,\n\tsetpop_est,\n\tsetsubrg,\n\tsetcontinent,\n\tsetgdp,\n\thandleColorFill,\n\thandleColorStroke\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t{/* <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }} width={mapWidth} height={mapHeight}> */}\n\t\t\t{/* <ZoomableGroup translateExtent={[ [ 0, -mapHeight ], [ mapWidth, mapHeight ] ]}> */}\n\t\t\t<ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n\t\t\t\t<ZoomableGroup>\n\t\t\t\t\t<Geographies geography={geoUrl}>\n\t\t\t\t\t\t{({ geographies }) =>\n\t\t\t\t\t\t\tgeographies.map((geo) => {\n\t\t\t\t\t\t\t\tconst fillcolor = handleColorFill(geo);\n\t\t\t\t\t\t\t\tconst strokecolor = handleColorStroke(geo);\n\t\t\t\t\t\t\t\treturn notThisCountry(geo) ? (\n\t\t\t\t\t\t\t\t\t<Geography\n\t\t\t\t\t\t\t\t\t\tkey={geo.rsmKey}\n\t\t\t\t\t\t\t\t\t\tgeography={geo}\n\t\t\t\t\t\t\t\t\t\tstroke={strokecolor}\n\t\t\t\t\t\t\t\t\t\tstroke={fillcolor}\n\t\t\t\t\t\t\t\t\t\tstrokeWidth={0.3}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\t\t\t\tconst { NAME, POP_EST, SUBREGION, CONTINENT, GDP_MD_EST } = geo.properties;\n\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent(`${NAME}`);\n\t\t\t\t\t\t\t\t\t\t\tsetname(NAME);\n\t\t\t\t\t\t\t\t\t\t\tsetpop_est(rounded(POP_EST));\n\t\t\t\t\t\t\t\t\t\t\tsetcontinent(CONTINENT);\n\t\t\t\t\t\t\t\t\t\t\tsetgdp(rounded(GDP_MD_EST * 1000));\n\t\t\t\t\t\t\t\t\t\t\tsetsubrg(SUBREGION);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent('');\n\t\t\t\t\t\t\t\t\t\t\tsetname('');\n\t\t\t\t\t\t\t\t\t\t\tsetpop_est('');\n\t\t\t\t\t\t\t\t\t\t\tsetcontinent('');\n\t\t\t\t\t\t\t\t\t\t\tsetgdp();\n\t\t\t\t\t\t\t\t\t\t\tsetsubrg('');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\thover: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#F53',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tpressed: {\n\t\t\t\t\t\t\t\t\t\t\t\tfill: '#',\n\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : null;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</Geographies>\n\t\t\t\t</ZoomableGroup>\n\t\t\t</ComposableMap>\n\t\t</div>\n\t);\n};\n\nconst VectorMap = ({ setname, setpop_est, setsubrg, setcontinent, setgdp, handleColorStroke, handleColorFill }) => {\n\tconst [ content, setContent ] = React.useState('');\n\tconst mapWidth = 1000;\n\tconst mapHeight = 600;\n\treturn (\n\t\t<div>\n\t\t\t<MapChart\n\t\t\t\tsetTooltipContent={setContent}\n\t\t\t\tmapWidth={mapWidth}\n\t\t\t\tmapHeight={mapHeight}\n\t\t\t\tsetname={setname}\n\t\t\t\tsetpop_est={setpop_est}\n\t\t\t\tsetsubrg={setsubrg}\n\t\t\t\tsetcontinent={setcontinent}\n\t\t\t\tsetgdp={setgdp}\n\t\t\t\thandleColorFill={handleColorFill}\n\t\t\t\thandleColorStroke={handleColorStroke}\n\t\t\t/>\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n};\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}