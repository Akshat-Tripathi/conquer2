{"ast":null,"code":"import { abs, atan2, cos, epsilon, sign, sin, sqrt } from \"../math.js\";\nimport { conicProjection } from \"./conic.js\";\nimport { equirectangularRaw } from \"./equirectangular.js\";\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y,\n        nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function (x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n}","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/d3-geo/src/projection/conicEquidistant.js"],"names":["abs","atan2","cos","epsilon","sign","sin","sqrt","conicProjection","equirectangularRaw","conicEquidistantRaw","y0","y1","cy0","n","g","project","x","y","gy","nx","invert","scale","center"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,IAA7C,QAAwD,YAAxD;AACA,SAAQC,eAAR,QAA8B,YAA9B;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;AAEA,OAAO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiCC,EAAjC,EAAqC;AAC1C,MAAIC,GAAG,GAAGV,GAAG,CAACQ,EAAD,CAAb;AAAA,MACIG,CAAC,GAAGH,EAAE,KAAKC,EAAP,GAAYN,GAAG,CAACK,EAAD,CAAf,GAAsB,CAACE,GAAG,GAAGV,GAAG,CAACS,EAAD,CAAV,KAAmBA,EAAE,GAAGD,EAAxB,CAD9B;AAAA,MAEII,CAAC,GAAGF,GAAG,GAAGC,CAAN,GAAUH,EAFlB;AAIA,MAAIV,GAAG,CAACa,CAAD,CAAH,GAASV,OAAb,EAAsB,OAAOK,kBAAP;;AAEtB,WAASO,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,QAAIC,EAAE,GAAGJ,CAAC,GAAGG,CAAb;AAAA,QAAgBE,EAAE,GAAGN,CAAC,GAAGG,CAAzB;AACA,WAAO,CAACE,EAAE,GAAGb,GAAG,CAACc,EAAD,CAAT,EAAeL,CAAC,GAAGI,EAAE,GAAGhB,GAAG,CAACiB,EAAD,CAA3B,CAAP;AACD;;AAEDJ,EAAAA,OAAO,CAACK,MAAR,GAAiB,UAASJ,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIC,EAAE,GAAGJ,CAAC,GAAGG,CAAb;AACA,WAAO,CAAChB,KAAK,CAACe,CAAD,EAAIhB,GAAG,CAACkB,EAAD,CAAP,CAAL,GAAoBL,CAApB,GAAwBT,IAAI,CAACc,EAAD,CAA7B,EAAmCJ,CAAC,GAAGV,IAAI,CAACS,CAAD,CAAJ,GAAUP,IAAI,CAACU,CAAC,GAAGA,CAAJ,GAAQE,EAAE,GAAGA,EAAd,CAArD,CAAP;AACD,GAHD;;AAKA,SAAOH,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOR,eAAe,CAACE,mBAAD,CAAf,CACFY,KADE,CACI,OADJ,EAEFC,MAFE,CAEK,CAAC,CAAD,EAAI,OAAJ,CAFL,CAAP;AAGD","sourcesContent":["import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {equirectangularRaw} from \"./equirectangular.js\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n"]},"metadata":{},"sourceType":"module"}