{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx\";\nimport React, { Component, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\"; // import { useSpring, animated } from \"react-spring\";\n\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport mapdata from \"../maps/world.txt\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nvar countries = {};\nvar socket = null;\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n\n    socket.onmessage = msg => {\n      console.log(msg);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SideBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = ISO_A2 => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Spy Report On \", name, \":\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"Population: \", pop_est), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"GDP (PPP): \", gdp), continent !== \"South America\" && /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 43\n      }\n    }, \"Subregion: \", subrg), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, \"Continent: \", continent));\n  };\n\n  const handleColourFill = country => {\n    const {\n      ISO_A2\n    } = country.properties;\n\n    if (clickedCountry !== \"\" && getCountryCodes(clickedCountry).includes(ISO_A2)) {\n      return \"#000000\";\n    }\n\n    return \"#AAA\";\n  };\n\n  const handleColourStroke = country => {\n    const {\n      ISO_A2\n    } = country.properties;\n    return \"#FFF\";\n  };\n\n  const selectedCountryOptions = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, \"OPTIONS:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \" ATTACK \"))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-info-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"START THE CONQUEST!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Welcome Commander \", username, \"!\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"), clickedCountry !== \"\" && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 37\n    }\n  }, \"Selected Country: \", clickedCountry), display && /*#__PURE__*/React.createElement(CountryDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(MapSettings, {\n    setTooltipContent: setState,\n    setname: setname,\n    setgdp: setgdp,\n    setpop_est: setpop_est,\n    setdisplay: setdisplay,\n    setcontinent: setcontinent,\n    setsubrg: setsubrg,\n    setclickedCountry: handleclickedCountry,\n    handleColourFill: handleColourFill,\n    handleColourStroke: handleColourStroke,\n    setdoubleClicked: handledoubleClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, state));\n}\n\nconst getnum = num => {\n  var num = Math.round(num);\n\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n\n  return num;\n}; //Countries to not display\n\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry; //TODO: player team colour for country\n\nfunction countryColors(country) {\n  const {\n    NAME,\n    ISO_A2\n  } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  const situation = document.cookie.split(\"; \").map(s => s.split(\"=\")).filter(arr => arr[0] == \"situation\")[0][1];\n  const fileURL = \"/maps/\" + situation + \".txt\";\n  var countries = {};\n  var raw = \"\";\n  fetch(fileURL).then(line => line.text()).then(line => line.split(\"\\n\")).then(data => raw = data);\n  console.log(raw);\n  var borders = [];\n\n  for (let i = 0; i < raw.length; i++) {\n    borders = [];\n    var line = raw[i].split(\" \");\n    countries[line[0]] = line.slice(1);\n  }\n\n  return countries;\n}\n\nfunction getBorder(countrycode) {\n  return countries[countrycode];\n} //FIXME: fix read file correctly\n\n\nfunction getCountryCodes(countrycode) {\n  const fileURL = \"/maps/world.txt\";\n  const textByLine = fetch(fileURL).then(function (response) {\n    return response.text();\n  }).then(function (data) {\n    const borderdata = data.split(\"\\n\").toString();\n    console.log(data.split(\"\\n\").toString()); //\n\n    var countriesBordering = []; //Processing\n\n    for (let j = 0; j < borderdata.length; j++) {\n      var borders = borderdata[j].split(\" \"); // console.log(borders);\n\n      if (borders[0] == countrycode) {\n        for (let i = 1; i < borders.length; i++) {\n          //Get border codes\n          console.log(borders[i]);\n          countriesBordering.push(borders[i]);\n        }\n      }\n    } // console.log(countriesBordering);\n\n\n    return countriesBordering;\n  });\n  return textByLine;\n}\n/* GAME MAP */\n\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const fillcolour = handleColourFill(geo);\n    const strokecolour = handleColourStroke(geo);\n    return notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: fillcolour,\n      stroke: strokecolour,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST,\n          GDP_MD_EST,\n          SUBREGION,\n          CONTINENT\n        } = geo.properties; // setTooltipContent(\n        //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n        // );\n\n        setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n        setname(NAME);\n        setpop_est(getnum(POP_EST));\n        setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n        setsubrg(SUBREGION);\n        setcontinent(CONTINENT);\n        setdisplay(true);\n      },\n      onMouseLeave: () => {\n        setTooltipContent(\"\");\n        setdisplay(false);\n      },\n      style: {\n        default: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#F53\",\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        }\n      },\n      onClick: () => {\n        const {\n          ISO_A2\n        } = geo.properties;\n        setclickedCountry(ISO_A2);\n      },\n      onDoubleClick: () => {\n        setdoubleClicked();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 19\n      }\n    }) : null;\n  })))));\n};\n\nexport default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","ReactTooltip","connect","loaddetails","Intro2","username","mapdata","geoUrl","countries","socket","GameMap","constructor","onmessage","msg","console","log","render","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","handleclickedCountry","ISO_A2","handledoubleClicked","CountryDetails","handleColourFill","country","properties","getCountryCodes","includes","handleColourStroke","selectedCountryOptions","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","loadMap","situation","document","cookie","split","map","s","filter","arr","fileURL","raw","fetch","then","line","text","data","borders","i","length","slice","getBorder","countrycode","textByLine","response","borderdata","toString","countriesBordering","j","push","MapSettings","setTooltipContent","setdoubleClicked","geographies","geo","fillcolour","strokecolour","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\n\nimport mapdata from \"../maps/world.txt\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nvar countries = {};\nvar socket = null;\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n\n    socket.onmessage = (msg) => {\n      console.log(msg);\n    };\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = (ISO_A2) => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    const { ISO_A2 } = country.properties;\n    if (\n      clickedCountry !== \"\" &&\n      getCountryCodes(clickedCountry).includes(ISO_A2)\n    ) {\n      return \"#000000\";\n    }\n    return \"#AAA\";\n  };\n\n  const handleColourStroke = (country) => {\n    const { ISO_A2 } = country.properties;\n    return \"#FFF\";\n  };\n\n  const selectedCountryOptions = () => {\n    return (\n      <div>\n        <h4>OPTIONS:</h4>\n        <ul>\n          <li>\n            <button type=\"button\"> ATTACK </button>\n          </li>\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          {clickedCountry !== \"\" && <p>Selected Country: {clickedCountry}</p>}\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourStroke}\n        setdoubleClicked={handledoubleClicked}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  const situation = document.cookie\n    .split(\"; \")\n    .map((s) => s.split(\"=\"))\n    .filter((arr) => arr[0] == \"situation\")[0][1];\n  const fileURL = \"/maps/\" + situation + \".txt\";\n\n  var countries = {};\n\n  var raw = \"\";\n  fetch(fileURL)\n    .then((line) => line.text())\n    .then((line) => line.split(\"\\n\"))\n    .then((data) => (raw = data));\n\n  console.log(raw);\n  var borders = [];\n  for (let i = 0; i < raw.length; i++) {\n    borders = [];\n    var line = raw[i].split(\" \");\n    countries[line[0]] = line.slice(1);\n  }\n  return countries;\n}\n\nfunction getBorder(countrycode) {\n  return countries[countrycode];\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  const fileURL = \"/maps/world.txt\";\n  const textByLine = fetch(fileURL)\n    .then(function (response) {\n      return response.text();\n    })\n    .then(function (data) {\n      const borderdata = data.split(\"\\n\").toString();\n      console.log(data.split(\"\\n\").toString());\n      //\n      var countriesBordering = [];\n      //Processing\n      for (let j = 0; j < borderdata.length; j++) {\n        var borders = borderdata[j].split(\" \");\n        // console.log(borders);\n        if (borders[0] == countrycode) {\n          for (let i = 1; i < borders.length; i++) {\n            //Get border codes\n            console.log(borders[i]);\n            countriesBordering.push(borders[i]);\n          }\n        }\n      }\n      // console.log(countriesBordering);\n      return countriesBordering;\n    });\n  return textByLine;\n}\n\n/* GAME MAP */\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap data-tip=\"\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const fillcolour = handleColourFill(geo);\n                const strokecolour = handleColourStroke(geo);\n                return notThisCountry(geo) ? (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={fillcolour}\n                    stroke={strokecolour}\n                    onMouseEnter={() => {\n                      const {\n                        NAME,\n                        POP_EST,\n                        GDP_MD_EST,\n                        SUBREGION,\n                        CONTINENT,\n                      } = geo.properties;\n\n                      // setTooltipContent(\n                      //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                      // );\n\n                      setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                      setname(NAME);\n                      setpop_est(getnum(POP_EST));\n                      setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                      setsubrg(SUBREGION);\n                      setcontinent(CONTINENT);\n                      setdisplay(true);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                      setdisplay(false);\n                    }}\n                    style={{\n                      default: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#F53\",\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                    }}\n                    onClick={() => {\n                      const { ISO_A2 } = geo.properties;\n                      setclickedCountry(ISO_A2);\n                    }}\n                    onDoubleClick={() => {\n                      setdoubleClicked();\n                    }}\n                  />\n                ) : null;\n              })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}