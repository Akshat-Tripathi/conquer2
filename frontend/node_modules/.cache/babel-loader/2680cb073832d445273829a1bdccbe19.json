{"ast":null,"code":"/**\n * SVG World Map JS\n * v0.2.1\n *\n * Description: A Javascript library to easily integrate one or more SVG world map(s) with all nations (countries) and political subdivisions (countries, provinces, states).\n * Original author: Raphael Lepuschitz <raphael.lepuschitz@gmail.com>\n * URL: https://github.com/raphaellepuschitz/SVG-World-Map\n * Copyleft: GNU General Public License version 3\n **/\nvar svgWorldMap = function () {\n  // Global variables\n  var svg;\n  var baseNode;\n  var infoBox;\n  var isMobile = false;\n  var smallScreen = false;\n  var svgMap = {};\n  var countries = {};\n  var countryData = {};\n  var countryGroups = {};\n  var countryLabels = {};\n  var tableData = {};\n  var selectedCountry; //var dragMap = false; // TODO: Check, doesn't work smooth\n  // Default options\n\n  var options = {\n    // Basic options\n    bigMap: true,\n    // Set to 'false' to load small map without provinces\n    showOcean: true,\n    // Show or hide ocean layer\n    showAntarctica: true,\n    // Show or hide antarctic layer\n    showLabels: true,\n    // Show country labels\n    showMicroLabels: false,\n    // Show microstate labels\n    showMicroStates: true,\n    // Show microstates on map\n    showInfoBox: false,\n    // Show info box\n    // Color options\n    oceanColor: \"#D8EBFF\",\n    worldColor: \"#FFFFFF\",\n    labelFill: {\n      out: \"#666666\",\n      over: \"#CCCCCC\",\n      click: \"#000000\"\n    },\n    //countryFill: { out: '#B9B9B9',  over: '#CCCCCC',  click: '#666666' }, // TODO: Currently this makes no sense for main country groups, until all country borders are existing in the SVG (a lot are missing, e.g. Japan, Greenland, Antarctica)\n    countryStroke: {\n      out: \"#FFFFFF\",\n      over: \"#FFFFFF\",\n      click: \"#333333\"\n    },\n    countryStrokeWidth: {\n      out: \"0.5\",\n      over: \"1\",\n      click: \"1\"\n    },\n    provinceFill: {\n      out: \"#B9B9B9\",\n      over: \"#FFFFFF\",\n      click: \"#666666\"\n    },\n    provinceStroke: {\n      out: \"#FFFFFF\",\n      over: \"#FFFFFF\",\n      click: \"#666666\"\n    },\n    provinceStrokeWidth: {\n      out: \"0.1\",\n      over: \"0.5\",\n      click: \"0.5\"\n    },\n    // Group options\n    groupCountries: true,\n    // Enable or disable country grouping\n    groupBy: [\"region\"],\n    // Sort countryData by this value(s) and return to countryGroups\n    // Callback functions from the map to the outside, can have custom names\n    mapOut: \"mapOut\",\n    mapOver: \"mapOver\",\n    mapClick: \"mapClick\",\n    mapTable: \"mapTable\",\n    // (Custom) callback function for HTML data parsing\n    mapDate: \"mapDate\",\n    // (Custom) callback function for time control date return\n    // Time control addon module\n    timeControls: false,\n    // Set to 'true' for time controls\n    timePause: true,\n    // Set to 'false' for time animation autostart\n    timeLoop: false //  Set to 'true' for time animation loop\n\n  }; // Main function: SVG map init call, options handling, return the map object\n\n  async function svgWorldMap(initOptions, initCountryData, initTimeData) {\n    let promise1 = new Promise(resolve1 => {\n      // Check size, viewport and mobile\n      checkSize();\n      checkMobile(); // Overwrite default options with initOptions\n\n      for (var option in initOptions) {\n        if (initOptions.hasOwnProperty(option)) {\n          options[option] = initOptions[option];\n        }\n      } // Overwrite countryData with initCountryData\n\n\n      if (initCountryData != undefined && initCountryData != false) {\n        countryData = initCountryData;\n      } // Asynchronous SVG map load\n      // Inject HTML with SVG map\n\n\n      initMap(); // Wait for asynchronous svg load\n\n      svg.addEventListener(\"load\", async () => {\n        let promise2 = new Promise(resolve2 => {\n          // Set SVG base node\n          baseNode = svg.getSVGDocument().children[0]; // Startup SVG path traversing, then country sorting, followed by click handlers, etc.\n\n          initMapCountries(); // Return svgMap object after everything is ready and bind calling home functions\n\n          svgMap = {\n            worldMap: svg,\n            countries: countries,\n            countryData: countryData,\n            countryGroups: countryGroups,\n            countryLabels: countryLabels,\n            // Calling home functions from outside into the map\n            // TODO: maybe use 'this[\"countryXYZ\"]' insted of 'window[\"countryXYZ\"]' for several maps? -> Leads to too much recursion...\n            out: function (id) {\n              window[\"countryOut\"].call(null, id);\n            },\n            over: function (id) {\n              window[\"countryOver\"].call(null, id);\n            },\n            click: function (id) {\n              window[\"countryClick\"].call(null, id);\n            },\n            update: function (data) {\n              window[\"updateMapData\"].call(null, data);\n            },\n            reset: function (data) {\n              window[\"resetMap\"].call(null, data);\n            },\n            labels: function (data) {\n              window[\"toggleMapLabels\"].call(null, data);\n            },\n            download: function (data) {\n              window[\"downloadMap\"].call(null, data);\n            },\n            table: function (data) {\n              window[\"parseHTMLTable\"].call(null, data);\n            },\n            date: function (data) {\n              window[\"timeControlsDate\"].call(null, data);\n            }\n          }; // Asynchronous load library addon module, if it's set in options.timeControls\n\n          if (options.timeControls == true) {\n            import(\"../src/svg-world-map-time-controls.mjs\").then(module => {\n              module.svgWorldMapTimeControls(svgMap, options.timePause, options.timeLoop, initTimeData);\n            });\n          } // Add info box\n\n\n          if (options.showInfoBox == true) {\n            initInfoBox();\n          }\n\n          resolve2(svgMap);\n        });\n        let result2 = await promise2;\n        resolve1(result2);\n      }, false);\n    }); // Wait for loaded map\n\n    let result1 = await promise1;\n    svgMap = result1; // Return SVG World Map object\n\n    return svgMap;\n  } // Init SVG map\n\n\n  function initMap() {\n    // Avoid double loading\n    if (document.getElementById(\"svg-world-map-container\") == null) {\n      // Add SVG container HTML\n      var container = document.createElement(\"div\");\n      container.setAttribute(\"id\", \"svg-world-map-container\");\n      document.body.prepend(container); // Add SVG HTML, 'svg' is global\n\n      svg = document.createElement(\"object\");\n      svg.setAttribute(\"id\", \"svg-world-map\");\n      svg.setAttribute(\"type\", \"image/svg+xml\"); // Load small map with states only\n\n      if (smallScreen != false || options.bigMap == false) {\n        // isMobile == true\n        svg.setAttribute(\"data\", \"../src/world-states.svg\"); // Load big map with provinces\n      } else {\n        svg.setAttribute(\"data\", \"../src/world-states-provinces.svg\");\n      }\n\n      container.appendChild(svg); // Add container and SVG CSS\n      // TODO: Make optional? Not needed for SVG World Map, but for SVG pan zoom etc.\n\n      var style = document.createElement(\"style\");\n      style.innerHTML = `#svg-world-map-container, #svg-world-map { width: 100%; height: 100%; }`;\n      document.head.appendChild(style);\n    }\n  } // Init countries on SVG map\n\n\n  function initMapCountries() {\n    // Iterate through child nodes and add them to countries object\n    baseNode.childNodes.forEach(function (node) {\n      // Skip unclear disputed territories and also metadata, defs etc. - we want a clean node list\n      if (node.id != undefined && node.id.substr(0, 1) != \"_\" && (node.tagName == \"g\" || node.tagName == \"path\" || node.tagName == \"rect\")) {\n        countries[node.id] = node;\n      }\n    }); // World & ocean settings\n\n    countries[\"World\"].style.fill = options.worldColor;\n    countries[\"Ocean\"].style.fill = options.oceanColor;\n\n    if (options.showOcean == false) {\n      countries[\"Ocean\"].style.fill = \"none\";\n      countries[\"Ocean\"].style.stroke = \"none\";\n    } // Get microstates from labels and remove from countries\n\n\n    sortLabels(); //delete countries['Ocean']; // (Delete ocean from countries object) Keep it currently\n    // Delete Antarctica from countries and labels, if set in options\n\n    if (options.showAntarctica == false) {\n      baseNode.removeChild(baseNode.getElementById(\"AQ\"));\n      delete countries[\"AQ\"];\n      baseNode.getElementById(\"labels\").removeChild(baseNode.getElementById(\"AQ-label\"));\n      delete countryLabels[\"AQ\"];\n    } // Show labels on start, if it is set\n\n\n    if (options.showLabels == true) {\n      toggleMapLabels(\"all\");\n    }\n\n    delete countries[\"labels\"]; // Delete labels from countries object, not from map\n    // Pre-sort provinces\n\n    sortProvinces(); // Sort countries alphabetically\n\n    countries = sortObject(countries); // Init country groups\n\n    if (options.groupCountries == true) {\n      buildCountryGroups();\n    }\n  } // Pre-sort provinces and subprovinces in countries for faster access and node cleanup\n  // TODO: Cleanup, optimize?\n\n\n  function sortProvinces() {\n    for (var country in countries) {\n      // Add all details from countryData to country\n      if (countryData[countries[country].id] != undefined) {\n        var currentCountryData = countryData[countries[country].id];\n\n        for (var key in currentCountryData) {\n          countries[country][key] = currentCountryData[key];\n        }\n      }\n\n      countries[country].country = countries[country]; // Reference to self for hierarchy compatibility - it's a little crazy, i know ;-)\n\n      var provinces = []; // Empty array for all provinces\n      // Ungrouped provinces are 1 level deep\n\n      countries[country].childNodes.forEach(function (child) {\n        // Add parent country and province for hierarchy compatibility\n        child.country = countries[country];\n        child.province = child; // Reference to self for hierarchy compatibility\n        // 'id.toLowerCase()' is the nation (border) element, so this is the main country (nation)\n\n        if (child.id == countries[country].id.toLowerCase()) {\n          countries[country].border = child; // Add border to nation\n\n          if (child.tagName != \"g\") {\n            // Groups are colored below\n            pathSetAttributes(child, \"out\"); // Set border attributes\n            //provinces.push(child); // Don't push the nation (border) element, it's not needed in provinces\n          } else {\n            child.childNodes.forEach(function (grandchild) {\n              if (grandchild.nodeType != Node.TEXT_NODE) {\n                // Add country and parent province for hierarchy compatibility\n                grandchild.country = countries[country];\n                grandchild.province = child;\n                pathSetAttributes(grandchild, \"out\");\n              }\n            });\n          } // Skip elements like circles (microstates)\n\n        } else if (child.tagName == \"path\" && child.tagName != \"circle\" && child.id != countries[country].id.toLowerCase()) {\n          pathSetAttributes(child, \"out\");\n          provinces.push(child); // Grouped provinces are 2 levels deep (We have to go deeper!)\n        } else if (child.tagName == \"g\") {\n          var subprovinces = []; // Empty array for all sub-provinces\n\n          child.childNodes.forEach(function (grandchild) {\n            // Add country and parent province for hierarchy compatibility\n            grandchild.country = countries[country];\n            grandchild.province = child;\n\n            if (grandchild.tagName == \"path\") {\n              if (grandchild.getAttribute(\"fill\") != \"none\") {\n                // Don't push border grandchilds\n                //provinces.push(grandchild);\n                subprovinces.push(grandchild);\n                /*} else {\n                                console.log(grandchild); // Only path15677, TODO: Cleanup SVG */\n              }\n\n              pathSetAttributes(grandchild, \"out\");\n              /* } else if (grandchild.nodeType != Node.TEXT_NODE) {\n                            console.log(grandchild);  // Only <circle id=\"tf.\"> and <circle id=\"hk_\">, TODO: Cleanup SVG  */\n            }\n          });\n          child.provinces = subprovinces; // Add subprovinces to province\n\n          provinces.push(child);\n        }\n      });\n      countries[country].provinces = provinces; // Add provinces to country\n    }\n\n    initMapControls(); //countCountries();\n  } // Get microstates from labels\n\n\n  function sortLabels() {\n    countries[\"labels\"].childNodes.forEach(function (label) {\n      // Skip non-<text> text\n      if (label.tagName == \"text\") {\n        var countryId = label.id.substr(0, 2);\n        countryLabels[countryId] = label; // Add to countryLabels\n        // Set custom country name\n\n        if (label.textContent != countryData[countryId].name) {\n          label.textContent = countryData[countryId].name;\n        } // Set fill and get microstates by font size in SVG\n\n\n        label.setAttribute(\"fill\", options.labelFill.out);\n\n        if (label.getAttribute(\"font-size\") == 2) {\n          // TODO: Make country sizes var?\n          label.microstate = true;\n        } else {\n          label.microstate = false;\n        } // Add event listeners\n\n\n        label.addEventListener(\"mouseover\", function () {\n          countryOver(this.id.substr(0, 2));\n          updateInfoBox(\"over\", countries[this.id.substr(0, 2)]);\n        });\n        label.addEventListener(\"mouseout\", function () {\n          countryOut(this.id.substr(0, 2));\n          updateInfoBox(\"out\", countries[this.id.substr(0, 2)]);\n        });\n        label.addEventListener(\"mouseup\", function () {\n          countryClick(this.id.substr(0, 2));\n        });\n      }\n    });\n\n    for (var label in countryLabels) {\n      if (countryLabels[label].microstate == true) {\n        var microid = countryLabels[label].id.substr(0, 2); // Set microstate labels\n\n        if (options.showMicroLabels == false) {\n          countryLabels[label].setAttribute(\"display\", \"none\");\n        } // Set microstates\n\n\n        if (options.showMicroStates == false) {\n          countries[microid].setAttribute(\"display\", \"none\");\n        }\n      }\n    }\n  } // Set country label color\n\n\n  function setLabelFill(id, event) {\n    if (countryLabels != undefined && countryLabels[id] != undefined) {\n      countryLabels[id].setAttribute(\"fill\", options.labelFill[event]);\n    }\n  } // Set all attributes for a path\n  // TODO: Check over, out and selectedCountry logic\n\n\n  function pathSetAttributes(path, event) {\n    if (path != undefined && path.id != \"World\" && path.id != \"Ocean\") {\n      // Hover and click colors and stroke width are defined in options, don't hover selected country\n      if (event == \"click\" || (event == \"out\" || event == \"over\") && path != selectedCountry && path.country != selectedCountry) {\n        // Country border (nation overlay, get's no fill)\n        if (path == path.country.border || path.parentNode == path.country.border) {\n          path.setAttribute(\"stroke\", options.countryStroke[event]);\n          path.setAttribute(\"stroke-width\", options.countryStrokeWidth[event]); // Other provinces\n        } else {\n          // Keep updated color\n          if (path.updateColor != undefined) {\n            path.setAttribute(\"fill\", path.updateColor);\n          } else {\n            path.setAttribute(\"fill\", options.provinceFill[event]);\n          }\n\n          path.setAttribute(\"stroke\", options.provinceStroke[event]);\n          path.setAttribute(\"stroke-width\", options.provinceStrokeWidth[event]);\n        } // Set color to path directly, also to selected country\n\n      } else if (event.substr(0, 1) == \"#\" || event.substr(0, 3) == \"rgb\") {\n        // && path != selectedCountry && path.country != selectedCountry\n        path.setAttribute(\"fill\", event); //path.setAttribute('stroke', event);\n      }\n    }\n  } // Init info box\n\n\n  function initInfoBox() {\n    // Add info box HTML to SVG map container\n    infoBox = document.createElement(\"div\");\n    infoBox.setAttribute(\"id\", \"map-infobox\");\n    document.getElementById(\"svg-world-map-container\").appendChild(infoBox); // Add info box CSS\n\n    var style = document.createElement(\"style\");\n    style.innerHTML = `\n            #map-infobox { position: absolute; top: 0; left: 0; padding: 3px 6px; max-width: 270px; overflow: hidden; font-family: 'Trebuchet MS', Verdana, Arial, sans-serif; font-size: 13px; color: #444444; background-color: rgba(255, 255, 255, .75); border: 1px solid #CDCDCD; border-radius: 5px; }\n            #map-infobox .data { margin-top: 5px; }\n        `;\n    document.head.appendChild(style); // Add event listener and set display to none at start\n\n    infoBox.style.display = \"none\";\n    baseNode.addEventListener(\"mousemove\", function (event) {\n      if (infoBox.style.display != \"none\") {\n        infoBox.style.left = event.clientX - infoBox.offsetWidth / 2 + \"px\";\n\n        if (event.clientY < infoBox.offsetHeight + 25) {\n          infoBox.style.top = event.clientY + 25 + \"px\";\n        } else {\n          infoBox.style.top = event.clientY - infoBox.offsetHeight - 15 + \"px\";\n        }\n      }\n    }, false);\n  } // Update info box\n\n\n  function updateInfoBox(event, path) {\n    // Info box is set in options.showInfoBox, otherwise undefined\n    if (infoBox != undefined) {\n      if (event == \"over\" && path.id != \"World\" && path.id != \"Ocean\") {\n        var infoText = \"<b>\" + path.country.name + \"</b>\"; // Add province info, but not for unnamed paths and borders\n\n        if (path.id.substr(0, 4) != \"path\" && path.id.substr(0, 2) != path.country.id.toLowerCase() && path.id.length != 2) {\n          infoText += \"<br>\" + path.id;\n        } // Add table data info for country or province\n\n\n        if (tableData[path.country.id] != undefined || tableData[path.id] != undefined) {\n          infoText += '<div class=\"data\">';\n\n          if (tableData[path.country.id] != undefined) {\n            var tableInfo = tableData[path.country.id];\n          } else {\n            var tableInfo = tableData[path.id];\n          }\n\n          for (var details in tableInfo) {\n            infoText += \"<b>\" + details + \"</b>: \" + tableInfo[details] + \"<br>\";\n          }\n\n          infoText += \"</div>\";\n        } // Basic implementation of time data info for corona map, TODO: refactor\n        // Add info for dayData, if it exists\n\n\n        if (typeof dayData !== \"undefined\" && dayData[path.country.id] != undefined) {\n          infoText += '<div class=\"data\">';\n          infoText += \"Date: \" + dayData[path.country.id].dates[day] + \"<br>\";\n          infoText += 'Conf. : <span class=\"red\">' + dayData[path.country.id].confirmed[day] + \"</span><br>\";\n          infoText += 'Active: <span class=\"orange\">' + dayData[path.country.id].activecases[day] + \"</span><br>\";\n          infoText += 'Rec. : <span class=\"green\">' + dayData[path.country.id].recovered[day] + \"</span><br>\";\n          infoText += 'Deaths: <span class=\"black\">' + dayData[path.country.id].deaths[day] + \"</span><br>\"; //infoText += 'New Cases: <span class=\"black\">' + dayData[path.country.id].confirmednew[day] + '</span>';\n\n          infoText += \"</div>\";\n        }\n\n        infoBox.innerHTML = infoText;\n        infoBox.style.display = \"block\";\n      } else {\n        infoBox.style.display = \"none\";\n      }\n    }\n  } // Map controls\n\n\n  function initMapControls() {\n    for (var country in countries) {\n      countries[country].addEventListener(\"mouseover\", function () {\n        provinceOverOut(\"over\");\n      });\n      countries[country].addEventListener(\"mouseout\", function () {\n        provinceOverOut(\"out\");\n      });\n      countries[country].addEventListener(\"mouseup\", function () {\n        provinceClick();\n      });\n    }\n  } // Map country hover handling\n\n\n  function provinceOverOut(overout) {\n    var province = event.srcElement; // Get (sub-)country / province / state\n\n    var country = province.country; // Check if (parent) country for path exists\n\n    if (country != undefined) {\n      // Check if country is not selected\n      if (province != selectedCountry) {\n        pathSetAttributes(province, overout); // Remove highlight from circles for microstates on out\n\n        if (province.tagName == \"circle\" && overout == \"out\") {\n          province.removeAttribute(\"fill\");\n          province.removeAttribute(\"stroke\");\n        }\n      }\n    } else {} //console.log('Country not found for ' + province.id);\n    // Update info box and make callback\n\n\n    updateInfoBox(overout, province);\n    callBack(overout, province);\n  } // Map click handling and internal callback routing\n\n\n  function provinceClick() {\n    //if (dragMap == false) { // TODO: Check, doesn't work smooth\n    var province = event.srcElement; // Get (sub-)country / province / state\n\n    var selectedOld = selectedCountry; // Set new or unset current selectedCountry\n\n    if (selectedCountry == province) {\n      selectedCountry = undefined;\n      pathSetAttributes(province, \"out\");\n    } else {\n      var selectedOld = selectedCountry;\n      selectedCountry = province;\n      pathSetAttributes(selectedCountry, \"click\");\n    }\n\n    resetOldSelected(selectedOld); // Reset selectedOld\n\n    callBack(\"click\", selectedCountry);\n    /*} else {\n            console.log('drag...');\n        }*/\n  } // Hover over function for calling home from the outside, defined in 'svgMap.over'\n  // TODO: Optimize / refactor with window.countryOut\n\n\n  window.countryOver = function (id) {\n    var country = countries[id];\n\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"over\");\n\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"over\");\n          });\n        }\n      });\n      setLabelFill(id, \"over\");\n    } else {\n      province = findProvinceById(id);\n\n      if (province != undefined) {\n        pathSetAttributes(province, \"over\");\n\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"over\");\n          });\n        }\n      }\n    }\n  }; // Hover out function for calling home from the outside, defined in 'svgMap.out'\n\n\n  window.countryOut = function (id) {\n    var country = countries[id];\n\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"out\");\n\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"out\");\n          });\n        }\n      });\n      setLabelFill(id, \"out\");\n    } else {\n      province = findProvinceById(id);\n\n      if (province != undefined) {\n        pathSetAttributes(province, \"out\");\n\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"out\");\n          });\n        }\n      }\n    }\n  }; // Click function for calling home from the outside, defined in 'svgMap.click'\n\n\n  window.countryClick = function (id) {\n    var country = countries[id];\n    var selectedOld = selectedCountry; // Set new selected\n\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"click\");\n\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"click\");\n          });\n        }\n      });\n      setLabelFill(id, \"click\");\n    } else {\n      country = findProvinceById(id);\n      pathSetAttributes(country, \"click\");\n    }\n\n    selectedCountry = country; // New selected\n\n    resetOldSelected(selectedOld); // Reset selectedOld\n\n    callBack(\"click\", country);\n  }; // Reset all colors and fills, function defined in 'svgMap.resetMap'\n\n\n  window.resetMap = function () {\n    for (var country in countries) {\n      if (countries[country].provinces != undefined) {\n        countries[country].provinces.forEach(function (province) {\n          if (province.updateColor != undefined) {\n            delete province.updateColor;\n            pathSetAttributes(province, \"out\");\n          }\n\n          if (province.provinces != undefined) {\n            province.provinces.forEach(function (subprovince) {\n              if (subprovince.updateColor != undefined) {\n                delete subprovince.updateColor;\n                pathSetAttributes(subprovince, \"out\");\n              }\n            });\n          }\n        });\n      }\n    }\n  }; // Update function for calling home from the outside, defined in 'svgMap.update'\n\n\n  window.updateMapData = function (updateData) {\n    for (var id in updateData) {\n      if (countries[id] != undefined) {\n        var country = countries[id];\n      } else {\n        var country = findProvinceById(id);\n      }\n\n      if (country != undefined) {\n        if (country.provinces == undefined) {\n          // Is mostly a province and no country. TODO: Rename variables?\n          country.updateColor = updateData[id];\n          pathSetAttributes(country, updateData[id]);\n        } else {\n          country.provinces.forEach(function (province) {\n            province.updateColor = updateData[id];\n            pathSetAttributes(province, updateData[id]);\n\n            if (province.provinces != undefined) {\n              province.provinces.forEach(function (subprovince) {\n                subprovince.updateColor = updateData[id];\n                pathSetAttributes(subprovince, updateData[id]);\n              });\n            }\n          });\n        }\n      }\n    }\n  }; // Update function for calling home from the outside, defined in 'svgMap.labels'\n\n\n  window.toggleMapLabels = function (updateLabels) {\n    if (updateLabels == \"all\") {\n      var labelGroup = baseNode.getElementById(\"labels\");\n\n      if (labelGroup.getAttribute(\"display\") == null || labelGroup.getAttribute(\"display\") == \"block\") {\n        labelGroup.setAttribute(\"display\", \"none\");\n      } else {\n        labelGroup.setAttribute(\"display\", \"block\");\n      }\n    } else if (updateLabels == \"micro\") {\n      for (var label in countryLabels) {\n        if (countryLabels[label].microstate == true) {\n          if (countryLabels[label].getAttribute(\"display\") == null || countryLabels[label].getAttribute(\"display\") == \"block\") {\n            countryLabels[label].setAttribute(\"display\", \"none\");\n          } else {\n            countryLabels[label].setAttribute(\"display\", \"block\");\n          }\n        }\n      }\n    }\n  }; // Export Map as SVG or PNG, defined in 'svgMap.download'\n  // TODO: Refactor + cleanup\n\n\n  window.downloadMap = function (type) {\n    var serializer = new XMLSerializer();\n    var svgXML = serializer.serializeToString(svg.contentDocument);\n    var blob = new Blob([svgXML], {\n      type: \"image/svg+xml;charset=utf-8\"\n    });\n    var url = URL.createObjectURL(blob);\n\n    if (type == \"svg\") {\n      var downloadLink = document.createElement(\"a\");\n      downloadLink.href = url;\n      downloadLink.download = \"world-map.\" + type;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    } else if (type == \"png\") {\n      var canvas = document.createElement(\"canvas\");\n      var context = canvas.getContext(\"2d\");\n      var svgSize = baseNode.viewBox.baseVal;\n      canvas.width = svgSize.width * 2;\n      canvas.height = svgSize.height * 2;\n      var data = new XMLSerializer().serializeToString(svg.contentDocument);\n      var win = window.URL || window.webkitURL || window;\n      var blob = new Blob([data], {\n        type: \"image/svg+xml\"\n      });\n      var url = win.createObjectURL(blob);\n      var img = new Image();\n\n      img.onload = function () {\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n        win.revokeObjectURL(url);\n        var uri = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"octet/stream\");\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        a.href = uri;\n        a.download = \"world-map.\" + type;\n        a.click();\n        window.URL.revokeObjectURL(uri);\n        document.body.removeChild(a);\n      };\n\n      img.src = url;\n    }\n  }; // Caller for time controls to callback out, defined in 'svgMap.date'\n\n\n  window.timeControlsDate = function (date) {\n    callBack(\"date\", date);\n  }; // Parse HTML for <table> data, defined in 'svgMap.table'\n\n\n  window.parseHTMLTable = function (html) {\n    tableData = {};\n    var tableKeys = [\"iso\", \"name\", \"country\", \"countries\", \"state\", \"states\", \"nation\", \"nations\", \"member state\", \"member states\"];\n    var dom = new DOMParser().parseFromString(html, \"text/html\");\n    var tables = dom.getElementsByTagName(\"table\"); // Search for table to use\n\n    loop_table: for (t = 0; t < tables.length; t++) {\n      var headers = tables[t].getElementsByTagName(\"th\");\n\n      for (h = 0; h < headers.length; h++) {\n        var headerText = stripHTML(headers[h].innerHTML); // Table key found\n\n        if (tableKeys.indexOf(headerText.toLowerCase()) != -1) {\n          var tableNumber = t;\n          var tableKey = tableKeys[tableKeys.indexOf(headerText.toLowerCase())];\n          break loop_table;\n        }\n      }\n    } // Scrape table if found\n\n\n    if (tableNumber != undefined) {\n      var table = dom.getElementsByTagName(\"table\")[tableNumber];\n      var headers = table.getElementsByTagName(\"th\");\n      var rows = table.getElementsByTagName(\"tr\");\n      var searchKey = new RegExp(\"(\" + tableKey + \")\", \"gi\");\n      var headerKey = \"\";\n      var columnKeys = [];\n      var timeTable = false; // Get header data\n\n      for (h = 0; h < headers.length; h++) {\n        var headerText = stripHTML(headers[h].innerHTML); // Check if <th> has search key first\n\n        if (headerText.search(searchKey) != -1) {\n          headerKey = headerText;\n        } // Add <th> value to column keys\n\n\n        if (headerText != \"\") {\n          columnKeys.push(headerText);\n        }\n      } // Check if table has time data = following numbers in a row\n\n\n      if (!isNaN(columnKeys[1]) && !isNaN(columnKeys[2]) && !isNaN(columnKeys[3]) && ( // 3 numbers in a row\n      parseInt(columnKeys[1]) + 1 == parseInt(columnKeys[2]) && parseInt(columnKeys[2]) + 1 == parseInt(columnKeys[3]) || parseInt(columnKeys[1]) - 1 == parseInt(columnKeys[2]) && parseInt(columnKeys[2]) - 1 == parseInt(columnKeys[3]))) {\n        timeTable = true;\n        /*if (isNaN(columnKeys[0])) {\n                        columnKeys.splice(0, 1);\n                    }*/\n      } // Get rows data\n\n\n      for (r = 0; r < rows.length; r++) {\n        var rowData = {};\n        var columns = rows[r].getElementsByTagName(\"td\");\n\n        if (timeTable == true) {\n          var startColumn = 0;\n        } else {\n          var startColumn = 0;\n        }\n\n        for (c = startColumn; c < columns.length; c++) {\n          var columnText = stripHTML(columns[c].innerHTML);\n\n          if (columnText != \"\") {\n            // Check if text is a number and convert it\n            if (/^[0-9,.]*$/.test(columnText) == true) {\n              columnText = Number(columnText.replace(/,/g, \"\"));\n            } // Check if <td> has background color and add and value and color\n\n\n            if (columns[c].style.backgroundColor != undefined && columns[c].style.backgroundColor != \"\") {\n              // Add data for time animation\n              if (timeTable == true && parseHTMLTable.caller == null) {\n                // Attention: function.caller in NOT supported in strict JavaScript!\n                var countryKey = findIdByName(stripHTML(columns[0].innerHTML));\n\n                if (tableData[columnKeys[c]] == undefined) {\n                  tableData[columnKeys[c]] = {};\n                } // Push country color to tableData directly if time animation is true\n\n\n                if (countryKey != undefined) {\n                  tableData[columnKeys[c]][countryKey] = columns[c].style.backgroundColor;\n                }\n\n                rowData[countryKey] = columns[c].style.backgroundColor; // Or push other color for none animated but colored\n              } else {\n                rowData[columnKeys[c]] = {\n                  data: columnText,\n                  color: columns[c].style.backgroundColor\n                };\n              } // Or just add <td> value to row data\n\n            } else if (parseHTMLTable.caller != null) {\n              // Attention: function.caller in NOT supported in strict JavaScript!\n              rowData[columnKeys[c]] = columnText;\n            }\n          }\n        } // Add row data to table data\n\n\n        if (rowData[headerKey] != undefined) {\n          // Check if country has full name instead of ISO code and replace\n          if (rowData[headerKey].length > 2 && tableKey != \"iso\") {\n            var countryKey = findIdByName(rowData[headerKey]);\n          } else {\n            var countryKey = rowData[headerKey];\n          }\n\n          tableData[countryKey] = rowData;\n        }\n      }\n    } // No table found or data not valid\n\n\n    if (tableNumber == undefined || Object.keys(tableData)[0] == \"undefined\") {\n      tableData = {\n        error: \"No valid data found in \" + tables.length + \" tables\"\n      }; // Sort countries alphabetically\n    } else {\n      tableData = sortObject(tableData);\n    } // Return data\n\n\n    callBack(\"table\", tableData);\n  }; // Fire the (custom) callback functions, defined in 'options.mapOver', 'options.mapOut', 'options.mapClick' and 'options.mapDate'\n\n\n  function callBack(event, data) {\n    // 'data' is a path except for time controls date\n    if (event == \"over\" && window[options.mapOver] && typeof window[options.mapOver] === \"function\") {\n      window[options.mapOver].apply(window, [data]);\n    } else if (event == \"out\" && window[options.mapOut] && typeof window[options.mapOut] === \"function\") {\n      window[options.mapOut].apply(window, [data]);\n    } else if (event == \"click\" && window[options.mapClick] && typeof window[options.mapClick] === \"function\") {\n      if (data == undefined) {\n        data = \"\";\n      } // If path is undefined (because of selectedCountry), return empty string\n\n\n      window[options.mapClick].apply(window, [data]);\n    } else if (event == \"table\" && window[options.mapTable] && typeof window[options.mapTable] === \"function\") {\n      window[options.mapTable].apply(window, [data]);\n    } else if (event == \"date\" && window[options.mapDate] && typeof window[options.mapDate] === \"function\") {\n      window[options.mapDate].apply(window, [data]);\n    }\n  } // Build groups of countries with countryData (or passed JSON countryData)\n\n\n  function buildCountryGroups() {\n    for (var country in countries) {\n      // Check if country exists in countryData\n      if (countryData[countries[country].id] != undefined) {\n        // Add new mainGroups and subGroups\n        for (var i = 0; i < options.groupBy.length; i++) {\n          var mainGroup = options.groupBy[i]; // E.g. \"region\"\n\n          var subGroup = countryData[countries[country].id][mainGroup]; // E.g. \"EU\"\n          // Add new mainGroup, if it doesn't exist\n\n          if (countryGroups[mainGroup] == undefined) {\n            countryGroups[mainGroup] = {}; // New object for each mainGroup\n          }\n\n          if (subGroup != \"\") {\n            // Add new subGroup, if it doesn't exist\n            if (countryGroups[mainGroup][subGroup] == undefined) {\n              countryGroups[mainGroup][subGroup] = {}; // New object for each subGroup\n            } // Push country to subGroup\n\n\n            countryGroups[mainGroup][subGroup][countries[country].id] = countries[country];\n          }\n        }\n      } else {//console.log('Country data missing: ' + countries[country].id);\n      }\n    } // Sort groups alphabetically\n\n\n    for (var group in countryGroups) {\n      countryGroups[group] = sortObject(countryGroups[group]);\n    }\n  } // Helper function to get text without HTML\n\n\n  function stripHTML(input) {\n    return input.replace(/(<br>)/gi, \" \").replace(/(&nbsp;)/gi, \" \").replace(/(<\\/li><li>)/gi, \" \").replace(/(\\n)/gi, \"\").replace(/(\\[.*\\])/gi, \"\").replace(/(<([^>]+)>)/gi, \"\").trim();\n  } // Helper function for object alphabetical sort\n\n\n  function sortObject(input) {\n    return Object.keys(input).sort().reduce(function (object, key) {\n      object[key] = input[key];\n      return object;\n    }, {});\n  } // Reset the old selectedCountry\n\n\n  function resetOldSelected(selectedOld) {\n    if (selectedOld != undefined) {\n      pathSetAttributes(selectedOld, \"out\");\n\n      if (selectedOld.provinces != undefined) {\n        selectedOld.provinces.forEach(function (province) {\n          pathSetAttributes(province, \"out\");\n\n          if (province.provinces != undefined) {\n            province.provinces.forEach(function (subprovince) {\n              pathSetAttributes(subprovince, \"out\");\n            });\n          }\n        });\n      }\n\n      setLabelFill(selectedOld.id, \"out\"); // Reset selectedOld label\n    }\n  } // Find path in countries\n\n\n  function findProvinceById(id) {\n    for (var country in countries) {\n      var provinces = countries[country].provinces;\n\n      for (var province in provinces) {\n        if (id == provinces[province].id) {\n          return provinces[province]; // No break needed if returned\n        }\n      }\n    }\n  } // Find id by country name\n\n\n  function findIdByName(name) {\n    // Remove \"The \", e.g. from \"The Bahamas\"\n    if (name.substr(0, 4).toLowerCase() == \"the \") {\n      name = name.substr(4);\n    } // Remove \", The\", e.g. from \"Bahamas, The\"\n\n\n    if (name.substr(-5).toLowerCase() == \", the\") {\n      name = name.substr(0, name.length - 5);\n    } // Remove last single characters, e.g. \" b\" from \"Syrian Arab Republic  b\"\n\n\n    if (name.substr(-2, 1) == \" \") {\n      name = name.substr(0, name.length - 2);\n    } // Remove everything in brackets, e.g. \"(France)\" from \"French Guiana (France)\" and trim()\n\n\n    name = name.replace(/(\\(.*\\))/gi, \"\").trim(); // Search countries for name\n\n    for (var country in countryData) {\n      if (countryData[country].name == name) {\n        return country; // No break needed if returned\n      } else if (countryData[country].altnames != undefined && countryData[country].altnames.split(\",\").indexOf(name) != -1) {\n        return country;\n      }\n    }\n  } // Mobile device detection\n\n\n  function checkMobile() {\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\n      isMobile = true;\n    }\n  } // Check screen size\n\n\n  function checkSize() {\n    if (screen.width < 999) {\n      if (screen.width < screen.height) {\n        smallScreen = \"portrait\";\n      } else {\n        smallScreen = \"landscape\";\n      }\n    }\n  } // Debug helper function for all countries and provinces\n\n\n  function countCountries() {\n    var countCountries = 0;\n    var countProvinces = 0;\n\n    for (var country in countries) {\n      var countSub = 0;\n      countCountries++;\n\n      for (var province in countries[country].provinces) {\n        countSub++;\n        countProvinces++;\n      }\n\n      console.log(country + \": \" + countSub);\n    }\n\n    console.log(\"Total countries: \" + countCountries);\n    console.log(\"Total provinces: \" + countProvinces);\n  } // Fallback for countryData if no other is passed\n\n\n  var countryData = {\n    AD: {\n      name: \"Andorra\",\n      region: \"EU\"\n    },\n    AE: {\n      name: \"United Arab Emirates\",\n      region: \"AS\"\n    },\n    AF: {\n      name: \"Afghanistan\",\n      region: \"AS\"\n    },\n    AG: {\n      name: \"Antigua and Barbuda\",\n      region: \"NA\"\n    },\n    AI: {\n      name: \"Anguilla\",\n      region: \"NA\"\n    },\n    AL: {\n      name: \"Albania\",\n      region: \"EU\"\n    },\n    AM: {\n      name: \"Armenia\",\n      region: \"AS\"\n    },\n    AO: {\n      name: \"Angola\",\n      region: \"AF\"\n    },\n    AQ: {\n      name: \"Antarctica\",\n      region: \"AN\"\n    },\n    AR: {\n      name: \"Argentina\",\n      region: \"SA\"\n    },\n    AS: {\n      name: \"American Samoa\",\n      region: \"OC\"\n    },\n    AT: {\n      name: \"Austria\",\n      region: \"EU\"\n    },\n    AU: {\n      name: \"Australia\",\n      region: \"OC\"\n    },\n    AW: {\n      name: \"Aruba\",\n      region: \"SA\"\n    },\n    AX: {\n      name: \"Åland Islands\",\n      region: \"EU\"\n    },\n    AZ: {\n      name: \"Azerbaijan\",\n      region: \"AS\"\n    },\n    BA: {\n      name: \"Bosnia and Herzegovina\",\n      region: \"EU\"\n    },\n    BB: {\n      name: \"Barbados\",\n      region: \"SA\"\n    },\n    BD: {\n      name: \"Bangladesh\",\n      region: \"AS\"\n    },\n    BE: {\n      name: \"Belgium\",\n      region: \"EU\"\n    },\n    BF: {\n      name: \"Burkina Faso\",\n      region: \"AF\"\n    },\n    BG: {\n      name: \"Bulgaria\",\n      region: \"EU\"\n    },\n    BH: {\n      name: \"Bahrain\",\n      region: \"AS\"\n    },\n    BI: {\n      name: \"Burundi\",\n      region: \"AF\"\n    },\n    BJ: {\n      name: \"Benin\",\n      region: \"AF\"\n    },\n    BL: {\n      name: \"Saint Barthélemy\",\n      region: \"NA\"\n    },\n    BM: {\n      name: \"Bermuda\",\n      region: \"NA\"\n    },\n    BN: {\n      name: \"Brunei\",\n      region: \"AS\"\n    },\n    BO: {\n      name: \"Bolivia\",\n      region: \"SA\"\n    },\n    BQ: {\n      name: \"Bonaire, Sint Eustatius and Saba\",\n      region: \"SA\"\n    },\n    BR: {\n      name: \"Brazil\",\n      region: \"SA\"\n    },\n    BS: {\n      name: \"Bahamas\",\n      region: \"NA\"\n    },\n    BT: {\n      name: \"Bhutan\",\n      region: \"AS\"\n    },\n    BV: {\n      name: \"Bouvet Island\",\n      region: \"AN\"\n    },\n    BW: {\n      name: \"Botswana\",\n      region: \"AF\"\n    },\n    BY: {\n      name: \"Belarus\",\n      region: \"EU\"\n    },\n    BZ: {\n      name: \"Belize\",\n      region: \"NA\"\n    },\n    CA: {\n      name: \"Canada\",\n      region: \"NA\"\n    },\n    CC: {\n      name: \"Cocos (Keeling) Islands\",\n      region: \"AS\"\n    },\n    CD: {\n      name: \"Congo (Dem. Rep.)\",\n      altnames: \"Democratic Republic of the Congo,DR Congo\",\n      region: \"AF\"\n    },\n    CF: {\n      name: \"Central African Republic\",\n      region: \"AF\"\n    },\n    CG: {\n      name: \"Congo\",\n      altnames: \"Republic of the Congo\",\n      region: \"AF\"\n    },\n    CH: {\n      name: \"Switzerland\",\n      region: \"EU\"\n    },\n    CI: {\n      name: \"Côte d'Ivoire\",\n      altnames: \"Ivory Coast\",\n      region: \"AF\"\n    },\n    CK: {\n      name: \"Cook Islands\",\n      region: \"OC\"\n    },\n    CL: {\n      name: \"Chile\",\n      region: \"SA\"\n    },\n    CM: {\n      name: \"Cameroon\",\n      region: \"AF\"\n    },\n    CN: {\n      name: \"China\",\n      region: \"AS\"\n    },\n    CO: {\n      name: \"Colombia\",\n      region: \"SA\"\n    },\n    CR: {\n      name: \"Costa Rica\",\n      region: \"NA\"\n    },\n    CU: {\n      name: \"Cuba\",\n      region: \"NA\"\n    },\n    CV: {\n      name: \"Cabo Verde\",\n      altnames: \"Cape Verde\",\n      region: \"AF\"\n    },\n    CW: {\n      name: \"Curaçao\",\n      region: \"SA\"\n    },\n    CX: {\n      name: \"Christmas Island\",\n      region: \"AS\"\n    },\n    CY: {\n      name: \"Cyprus\",\n      region: \"EU\"\n    },\n    CZ: {\n      name: \"Czechia\",\n      altnames: \"Czech Republic\",\n      region: \"EU\"\n    },\n    DE: {\n      name: \"Germany\",\n      region: \"EU\"\n    },\n    DJ: {\n      name: \"Djibouti\",\n      region: \"AF\"\n    },\n    DK: {\n      name: \"Denmark\",\n      region: \"EU\"\n    },\n    DM: {\n      name: \"Dominica\",\n      region: \"NA\"\n    },\n    DO: {\n      name: \"Dominican Republic\",\n      region: \"NA\"\n    },\n    DZ: {\n      name: \"Algeria\",\n      region: \"AF\"\n    },\n    EC: {\n      name: \"Ecuador\",\n      region: \"SA\"\n    },\n    EE: {\n      name: \"Estonia\",\n      region: \"EU\"\n    },\n    EG: {\n      name: \"Egypt\",\n      region: \"AF\"\n    },\n    EH: {\n      name: \"Western Sahara\",\n      altnames: \"Sahrawi Arab Democratic Republic\",\n      region: \"AF\"\n    },\n    ER: {\n      name: \"Eritrea\",\n      region: \"AF\"\n    },\n    ES: {\n      name: \"Spain\",\n      region: \"EU\"\n    },\n    ET: {\n      name: \"Ethiopia\",\n      region: \"AF\"\n    },\n    FI: {\n      name: \"Finland\",\n      region: \"EU\"\n    },\n    FJ: {\n      name: \"Fiji\",\n      region: \"OC\"\n    },\n    FK: {\n      name: \"Falkland Islands\",\n      region: \"SA\"\n    },\n    FM: {\n      name: \"Micronesia\",\n      region: \"OC\"\n    },\n    FO: {\n      name: \"Faroe Islands\",\n      region: \"EU\"\n    },\n    FR: {\n      name: \"France\",\n      region: \"EU\"\n    },\n    GA: {\n      name: \"Gabon\",\n      region: \"AF\"\n    },\n    GB: {\n      name: \"United Kingdom\",\n      region: \"EU\"\n    },\n    GD: {\n      name: \"Grenada\",\n      region: \"NA\"\n    },\n    GE: {\n      name: \"Georgia\",\n      region: \"AS\"\n    },\n    GF: {\n      name: \"French Guiana\",\n      region: \"SA\"\n    },\n    GG: {\n      name: \"Guernsey\",\n      region: \"EU\"\n    },\n    GH: {\n      name: \"Ghana\",\n      region: \"AF\"\n    },\n    GI: {\n      name: \"Gibraltar\",\n      region: \"EU\"\n    },\n    GL: {\n      name: \"Greenland\",\n      region: \"NA\"\n    },\n    GM: {\n      name: \"Gambia\",\n      region: \"AF\"\n    },\n    GN: {\n      name: \"Guinea\",\n      region: \"AF\"\n    },\n    GP: {\n      name: \"Guadeloupe\",\n      region: \"NA\"\n    },\n    GQ: {\n      name: \"Equatorial Guinea\",\n      region: \"AF\"\n    },\n    GR: {\n      name: \"Greece\",\n      region: \"EU\"\n    },\n    GS: {\n      name: \"South Georgia and the South Sandwich Islands\",\n      region: \"AN\"\n    },\n    GT: {\n      name: \"Guatemala\",\n      region: \"NA\"\n    },\n    GU: {\n      name: \"Guam\",\n      region: \"OC\"\n    },\n    GW: {\n      name: \"Guinea-Bissau\",\n      region: \"AF\"\n    },\n    GY: {\n      name: \"Guyana\",\n      region: \"SA\"\n    },\n    HK: {\n      name: \"Hong Kong\",\n      region: \"AS\"\n    },\n    HM: {\n      name: \"Heard Island and McDonald Islands\",\n      region: \"AN\"\n    },\n    HN: {\n      name: \"Honduras\",\n      region: \"NA\"\n    },\n    HR: {\n      name: \"Croatia\",\n      region: \"EU\"\n    },\n    HT: {\n      name: \"Haiti\",\n      region: \"NA\"\n    },\n    HU: {\n      name: \"Hungary\",\n      region: \"EU\"\n    },\n    ID: {\n      name: \"Indonesia\",\n      region: \"AS\"\n    },\n    IE: {\n      name: \"Ireland\",\n      region: \"EU\"\n    },\n    IL: {\n      name: \"Israel\",\n      region: \"AS\"\n    },\n    IM: {\n      name: \"Isle of Man\",\n      region: \"EU\"\n    },\n    IN: {\n      name: \"India\",\n      region: \"AS\"\n    },\n    IO: {\n      name: \"British Indian Ocean Territory\",\n      region: \"AS\"\n    },\n    IQ: {\n      name: \"Iraq\",\n      region: \"AS\"\n    },\n    IR: {\n      name: \"Iran\",\n      region: \"AS\"\n    },\n    IS: {\n      name: \"Iceland\",\n      region: \"EU\"\n    },\n    IT: {\n      name: \"Italy\",\n      region: \"EU\"\n    },\n    JE: {\n      name: \"Jersey\",\n      region: \"EU\"\n    },\n    JM: {\n      name: \"Jamaica\",\n      region: \"NA\"\n    },\n    JO: {\n      name: \"Jordan\",\n      region: \"AS\"\n    },\n    JP: {\n      name: \"Japan\",\n      region: \"AS\"\n    },\n    KE: {\n      name: \"Kenya\",\n      region: \"AF\"\n    },\n    KG: {\n      name: \"Kyrgyzstan\",\n      region: \"AS\"\n    },\n    KH: {\n      name: \"Cambodia\",\n      region: \"AS\"\n    },\n    KI: {\n      name: \"Kiribati\",\n      region: \"OC\"\n    },\n    KM: {\n      name: \"Comoros\",\n      region: \"AF\"\n    },\n    KN: {\n      name: \"Saint Kitts and Nevis\",\n      region: \"NA\"\n    },\n    KP: {\n      name: \"North Korea\",\n      region: \"AS\"\n    },\n    KR: {\n      name: \"South Korea\",\n      region: \"AS\"\n    },\n    KW: {\n      name: \"Kuwait\",\n      region: \"AS\"\n    },\n    KY: {\n      name: \"Cayman Islands\",\n      region: \"NA\"\n    },\n    KZ: {\n      name: \"Kazakhstan\",\n      region: \"AS\"\n    },\n    LA: {\n      name: \"Laos\",\n      region: \"AS\"\n    },\n    LB: {\n      name: \"Lebanon\",\n      region: \"AS\"\n    },\n    LC: {\n      name: \"Saint Lucia\",\n      region: \"NA\"\n    },\n    LI: {\n      name: \"Liechtenstein\",\n      region: \"EU\"\n    },\n    LK: {\n      name: \"Sri Lanka\",\n      region: \"AS\"\n    },\n    LR: {\n      name: \"Liberia\",\n      region: \"AF\"\n    },\n    LS: {\n      name: \"Lesotho\",\n      region: \"AF\"\n    },\n    LT: {\n      name: \"Lithuania\",\n      region: \"EU\"\n    },\n    LU: {\n      name: \"Luxembourg\",\n      region: \"EU\"\n    },\n    LV: {\n      name: \"Latvia\",\n      region: \"EU\"\n    },\n    LY: {\n      name: \"Libya\",\n      region: \"AF\"\n    },\n    MA: {\n      name: \"Morocco\",\n      region: \"AF\"\n    },\n    MC: {\n      name: \"Monaco\",\n      region: \"EU\"\n    },\n    MD: {\n      name: \"Moldova\",\n      region: \"EU\"\n    },\n    ME: {\n      name: \"Montenegro\",\n      region: \"EU\"\n    },\n    MF: {\n      name: \"Saint Martin (French part)\",\n      region: \"NA\"\n    },\n    MG: {\n      name: \"Madagascar\",\n      region: \"AF\"\n    },\n    MH: {\n      name: \"Marshall Islands\",\n      region: \"OC\"\n    },\n    MK: {\n      name: \"North Macedonia\",\n      region: \"EU\"\n    },\n    ML: {\n      name: \"Mali\",\n      region: \"AF\"\n    },\n    MM: {\n      name: \"Myanmar\",\n      region: \"AS\"\n    },\n    MN: {\n      name: \"Mongolia\",\n      region: \"AS\"\n    },\n    MO: {\n      name: \"Macao\",\n      region: \"AS\"\n    },\n    MP: {\n      name: \"Northern Mariana Islands\",\n      region: \"AS\"\n    },\n    MQ: {\n      name: \"Martinique\",\n      region: \"NA\"\n    },\n    MR: {\n      name: \"Mauritania\",\n      region: \"AF\"\n    },\n    MS: {\n      name: \"Montserrat\",\n      region: \"NA\"\n    },\n    MT: {\n      name: \"Malta\",\n      region: \"EU\"\n    },\n    MU: {\n      name: \"Mauritius\",\n      region: \"AF\"\n    },\n    MV: {\n      name: \"Maldives\",\n      region: \"AS\"\n    },\n    MW: {\n      name: \"Malawi\",\n      region: \"AF\"\n    },\n    MX: {\n      name: \"Mexico\",\n      region: \"NA\"\n    },\n    MY: {\n      name: \"Malaysia\",\n      region: \"AS\"\n    },\n    MZ: {\n      name: \"Mozambique\",\n      region: \"AF\"\n    },\n    NA: {\n      name: \"Namibia\",\n      region: \"AF\"\n    },\n    NC: {\n      name: \"New Caledonia\",\n      region: \"OC\"\n    },\n    NE: {\n      name: \"Niger\",\n      region: \"AF\"\n    },\n    NF: {\n      name: \"Norfolk Island\",\n      region: \"OC\"\n    },\n    NG: {\n      name: \"Nigeria\",\n      region: \"AF\"\n    },\n    NI: {\n      name: \"Nicaragua\",\n      region: \"NA\"\n    },\n    NL: {\n      name: \"Netherlands\",\n      region: \"EU\"\n    },\n    NO: {\n      name: \"Norway\",\n      region: \"EU\"\n    },\n    NP: {\n      name: \"Nepal\",\n      region: \"AS\"\n    },\n    NR: {\n      name: \"Nauru\",\n      region: \"OC\"\n    },\n    NU: {\n      name: \"Niue\",\n      region: \"OC\"\n    },\n    NZ: {\n      name: \"New Zealand\",\n      region: \"OC\"\n    },\n    OM: {\n      name: \"Oman\",\n      region: \"AS\"\n    },\n    PA: {\n      name: \"Panama\",\n      region: \"NA\"\n    },\n    PE: {\n      name: \"Peru\",\n      region: \"SA\"\n    },\n    PF: {\n      name: \"French Polynesia\",\n      region: \"OC\"\n    },\n    PG: {\n      name: \"Papua New Guinea\",\n      region: \"OC\"\n    },\n    PH: {\n      name: \"Philippines\",\n      region: \"AS\"\n    },\n    PK: {\n      name: \"Pakistan\",\n      region: \"AS\"\n    },\n    PL: {\n      name: \"Poland\",\n      region: \"EU\"\n    },\n    PM: {\n      name: \"Saint Pierre and Miquelon\",\n      region: \"NA\"\n    },\n    PN: {\n      name: \"Pitcairn\",\n      region: \"OC\"\n    },\n    PR: {\n      name: \"Puerto Rico\",\n      region: \"NA\"\n    },\n    PS: {\n      name: \"Palestine\",\n      altnames: \"State of Palestine\",\n      region: \"AS\"\n    },\n    PT: {\n      name: \"Portugal\",\n      region: \"EU\"\n    },\n    PW: {\n      name: \"Palau\",\n      region: \"OC\"\n    },\n    PY: {\n      name: \"Paraguay\",\n      region: \"SA\"\n    },\n    QA: {\n      name: \"Qatar\",\n      region: \"AS\"\n    },\n    RE: {\n      name: \"Réunion\",\n      region: \"AF\"\n    },\n    RO: {\n      name: \"Romania\",\n      region: \"EU\"\n    },\n    RS: {\n      name: \"Serbia\",\n      region: \"EU\"\n    },\n    RU: {\n      name: \"Russia\",\n      region: \"EU\"\n    },\n    RW: {\n      name: \"Rwanda\",\n      region: \"AF\"\n    },\n    SA: {\n      name: \"Saudi Arabia\",\n      region: \"AS\"\n    },\n    SB: {\n      name: \"Solomon Islands\",\n      region: \"OC\"\n    },\n    SC: {\n      name: \"Seychelles\",\n      region: \"AF\"\n    },\n    SD: {\n      name: \"Sudan\",\n      region: \"AF\"\n    },\n    SE: {\n      name: \"Sweden\",\n      region: \"EU\"\n    },\n    SG: {\n      name: \"Singapore\",\n      region: \"AS\"\n    },\n    SH: {\n      name: \"Saint Helena, Ascension and Tristan da Cunha\",\n      region: \"AF\"\n    },\n    SI: {\n      name: \"Slovenia\",\n      region: \"EU\"\n    },\n    SJ: {\n      name: \"Svalbard and Jan Mayen\",\n      region: \"EU\"\n    },\n    SK: {\n      name: \"Slovakia\",\n      region: \"EU\"\n    },\n    SL: {\n      name: \"Sierra Leone\",\n      region: \"AF\"\n    },\n    SM: {\n      name: \"San Marino\",\n      region: \"EU\"\n    },\n    SN: {\n      name: \"Senegal\",\n      region: \"AF\"\n    },\n    SO: {\n      name: \"Somalia\",\n      region: \"AF\"\n    },\n    SR: {\n      name: \"Suriname\",\n      region: \"SA\"\n    },\n    SS: {\n      name: \"South Sudan\",\n      region: \"AF\"\n    },\n    ST: {\n      name: \"Sao Tome and Principe\",\n      altnames: \"São Tomé and Príncipe\",\n      region: \"AF\"\n    },\n    SV: {\n      name: \"El Salvador\",\n      region: \"NA\"\n    },\n    SX: {\n      name: \"Sint Maarten (Dutch part)\",\n      region: \"NA\"\n    },\n    SY: {\n      name: \"Syria\",\n      altnames: \"Syrian Arab Republic\",\n      region: \"AS\"\n    },\n    SZ: {\n      name: \"Eswatini\",\n      altnames: \"Swaziland\",\n      region: \"AF\"\n    },\n    TC: {\n      name: \"Turks and Caicos Islands\",\n      region: \"NA\"\n    },\n    TD: {\n      name: \"Chad\",\n      region: \"AF\"\n    },\n    TF: {\n      name: \"French Southern Territories\",\n      region: \"AF\"\n    },\n    TG: {\n      name: \"Togo\",\n      region: \"AF\"\n    },\n    TH: {\n      name: \"Thailand\",\n      region: \"AS\"\n    },\n    TJ: {\n      name: \"Tajikistan\",\n      region: \"AS\"\n    },\n    TK: {\n      name: \"Tokelau\",\n      region: \"OC\"\n    },\n    TL: {\n      name: \"Timor-Leste (East Timor)\",\n      region: \"AS\"\n    },\n    TM: {\n      name: \"Turkmenistan\",\n      region: \"AS\"\n    },\n    TN: {\n      name: \"Tunisia\",\n      region: \"AF\"\n    },\n    TO: {\n      name: \"Tonga\",\n      region: \"AF\"\n    },\n    TR: {\n      name: \"Turkey\",\n      region: \"AS\"\n    },\n    TT: {\n      name: \"Trinidad and Tobago\",\n      region: \"NA\"\n    },\n    TV: {\n      name: \"Tuvalu\",\n      region: \"OC\"\n    },\n    TW: {\n      name: \"Taiwan\",\n      region: \"AS\"\n    },\n    TZ: {\n      name: \"Tanzania\",\n      region: \"AF\"\n    },\n    UA: {\n      name: \"Ukraine\",\n      region: \"EU\"\n    },\n    UG: {\n      name: \"Uganda\",\n      region: \"AF\"\n    },\n    UM: {\n      name: \"United States Minor Outlying Islands\",\n      region: \"OC\"\n    },\n    US: {\n      name: \"United States\",\n      region: \"NA\"\n    },\n    UY: {\n      name: \"Uruguay\",\n      region: \"SA\"\n    },\n    UZ: {\n      name: \"Uzbekistan\",\n      region: \"AS\"\n    },\n    VA: {\n      name: \"Holy See\",\n      region: \"EU\"\n    },\n    VC: {\n      name: \"Saint Vincent and the Grenadines\",\n      region: \"NA\"\n    },\n    VE: {\n      name: \"Venezuela\",\n      region: \"SA\"\n    },\n    VG: {\n      name: \"Virgin Islands (British)\",\n      region: \"NA\"\n    },\n    VI: {\n      name: \"Virgin Islands (U.S.)\",\n      region: \"NA\"\n    },\n    VN: {\n      name: \"Viet Nam\",\n      altnames: \"Vietnam\",\n      region: \"AS\"\n    },\n    VU: {\n      name: \"Vanuatu\",\n      region: \"OC\"\n    },\n    WF: {\n      name: \"Wallis and Futuna\",\n      region: \"OC\"\n    },\n    WS: {\n      name: \"Samoa\",\n      region: \"OC\"\n    },\n    XK: {\n      name: \"Kosovo\",\n      region: \"EU\"\n    },\n    YE: {\n      name: \"Yemen\",\n      region: \"AS\"\n    },\n    YT: {\n      name: \"Mayotte\",\n      region: \"AF\"\n    },\n    ZA: {\n      name: \"South Africa\",\n      region: \"AF\"\n    },\n    ZM: {\n      name: \"Zambia\",\n      region: \"AF\"\n    },\n    ZW: {\n      name: \"Zimbabwe\",\n      region: \"AF\"\n    }\n  }; // Return the main function\n\n  return svgWorldMap;\n}();","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Projects/conquer2/V0.2/conquer2/frontend/src/pages/SVG-World-Map/src/svg-world-map.js"],"names":["svgWorldMap","svg","baseNode","infoBox","isMobile","smallScreen","svgMap","countries","countryData","countryGroups","countryLabels","tableData","selectedCountry","options","bigMap","showOcean","showAntarctica","showLabels","showMicroLabels","showMicroStates","showInfoBox","oceanColor","worldColor","labelFill","out","over","click","countryStroke","countryStrokeWidth","provinceFill","provinceStroke","provinceStrokeWidth","groupCountries","groupBy","mapOut","mapOver","mapClick","mapTable","mapDate","timeControls","timePause","timeLoop","initOptions","initCountryData","initTimeData","promise1","Promise","resolve1","checkSize","checkMobile","option","hasOwnProperty","undefined","initMap","addEventListener","promise2","resolve2","getSVGDocument","children","initMapCountries","worldMap","id","window","call","update","data","reset","labels","download","table","date","then","module","svgWorldMapTimeControls","initInfoBox","result2","result1","document","getElementById","container","createElement","setAttribute","body","prepend","appendChild","style","innerHTML","head","childNodes","forEach","node","substr","tagName","fill","stroke","sortLabels","removeChild","toggleMapLabels","sortProvinces","sortObject","buildCountryGroups","country","currentCountryData","key","provinces","child","province","toLowerCase","border","pathSetAttributes","grandchild","nodeType","Node","TEXT_NODE","push","subprovinces","getAttribute","initMapControls","label","countryId","textContent","name","microstate","countryOver","updateInfoBox","countryOut","countryClick","microid","setLabelFill","event","path","parentNode","updateColor","display","left","clientX","offsetWidth","clientY","offsetHeight","top","infoText","length","tableInfo","details","dayData","dates","day","confirmed","activecases","recovered","deaths","provinceOverOut","provinceClick","overout","srcElement","removeAttribute","callBack","selectedOld","resetOldSelected","subprovince","findProvinceById","resetMap","updateMapData","updateData","updateLabels","labelGroup","downloadMap","type","serializer","XMLSerializer","svgXML","serializeToString","contentDocument","blob","Blob","url","URL","createObjectURL","downloadLink","href","canvas","context","getContext","svgSize","viewBox","baseVal","width","height","win","webkitURL","img","Image","onload","drawImage","revokeObjectURL","uri","toDataURL","replace","a","src","timeControlsDate","parseHTMLTable","html","tableKeys","dom","DOMParser","parseFromString","tables","getElementsByTagName","loop_table","t","headers","h","headerText","stripHTML","indexOf","tableNumber","tableKey","rows","searchKey","RegExp","headerKey","columnKeys","timeTable","search","isNaN","parseInt","r","rowData","columns","startColumn","c","columnText","test","Number","backgroundColor","caller","countryKey","findIdByName","color","Object","keys","error","apply","i","mainGroup","subGroup","group","input","trim","sort","reduce","object","altnames","split","navigator","userAgent","screen","countCountries","countProvinces","countSub","console","log","AD","region","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"],"mappings":"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","sourcesContent":["/**\n * SVG World Map JS\n * v0.2.1\n *\n * Description: A Javascript library to easily integrate one or more SVG world map(s) with all nations (countries) and political subdivisions (countries, provinces, states).\n * Original author: Raphael Lepuschitz <raphael.lepuschitz@gmail.com>\n * URL: https://github.com/raphaellepuschitz/SVG-World-Map\n * Copyleft: GNU General Public License version 3\n **/\n\nvar svgWorldMap = (function () {\n  // Global variables\n  var svg;\n  var baseNode;\n  var infoBox;\n  var isMobile = false;\n  var smallScreen = false;\n  var svgMap = {};\n  var countries = {};\n  var countryData = {};\n  var countryGroups = {};\n  var countryLabels = {};\n  var tableData = {};\n  var selectedCountry;\n  //var dragMap = false; // TODO: Check, doesn't work smooth\n\n  // Default options\n  var options = {\n    // Basic options\n    bigMap: true, // Set to 'false' to load small map without provinces\n    showOcean: true, // Show or hide ocean layer\n    showAntarctica: true, // Show or hide antarctic layer\n    showLabels: true, // Show country labels\n    showMicroLabels: false, // Show microstate labels\n    showMicroStates: true, // Show microstates on map\n    showInfoBox: false, // Show info box\n    // Color options\n    oceanColor: \"#D8EBFF\",\n    worldColor: \"#FFFFFF\",\n    labelFill: { out: \"#666666\", over: \"#CCCCCC\", click: \"#000000\" },\n    //countryFill: { out: '#B9B9B9',  over: '#CCCCCC',  click: '#666666' }, // TODO: Currently this makes no sense for main country groups, until all country borders are existing in the SVG (a lot are missing, e.g. Japan, Greenland, Antarctica)\n    countryStroke: { out: \"#FFFFFF\", over: \"#FFFFFF\", click: \"#333333\" },\n    countryStrokeWidth: { out: \"0.5\", over: \"1\", click: \"1\" },\n    provinceFill: { out: \"#B9B9B9\", over: \"#FFFFFF\", click: \"#666666\" },\n    provinceStroke: { out: \"#FFFFFF\", over: \"#FFFFFF\", click: \"#666666\" },\n    provinceStrokeWidth: { out: \"0.1\", over: \"0.5\", click: \"0.5\" },\n    // Group options\n    groupCountries: true, // Enable or disable country grouping\n    groupBy: [\"region\"], // Sort countryData by this value(s) and return to countryGroups\n    // Callback functions from the map to the outside, can have custom names\n    mapOut: \"mapOut\",\n    mapOver: \"mapOver\",\n    mapClick: \"mapClick\",\n    mapTable: \"mapTable\", // (Custom) callback function for HTML data parsing\n    mapDate: \"mapDate\", // (Custom) callback function for time control date return\n    // Time control addon module\n    timeControls: false, // Set to 'true' for time controls\n    timePause: true, // Set to 'false' for time animation autostart\n    timeLoop: false, //  Set to 'true' for time animation loop\n  };\n\n  // Main function: SVG map init call, options handling, return the map object\n  async function svgWorldMap(initOptions, initCountryData, initTimeData) {\n    let promise1 = new Promise((resolve1) => {\n      // Check size, viewport and mobile\n      checkSize();\n      checkMobile();\n      // Overwrite default options with initOptions\n      for (var option in initOptions) {\n        if (initOptions.hasOwnProperty(option)) {\n          options[option] = initOptions[option];\n        }\n      }\n      // Overwrite countryData with initCountryData\n      if (initCountryData != undefined && initCountryData != false) {\n        countryData = initCountryData;\n      }\n      // Asynchronous SVG map load\n      // Inject HTML with SVG map\n      initMap();\n      // Wait for asynchronous svg load\n      svg.addEventListener(\n        \"load\",\n        async () => {\n          let promise2 = new Promise((resolve2) => {\n            // Set SVG base node\n            baseNode = svg.getSVGDocument().children[0];\n            // Startup SVG path traversing, then country sorting, followed by click handlers, etc.\n            initMapCountries();\n            // Return svgMap object after everything is ready and bind calling home functions\n            svgMap = {\n              worldMap: svg,\n              countries: countries,\n              countryData: countryData,\n              countryGroups: countryGroups,\n              countryLabels: countryLabels,\n              // Calling home functions from outside into the map\n              // TODO: maybe use 'this[\"countryXYZ\"]' insted of 'window[\"countryXYZ\"]' for several maps? -> Leads to too much recursion...\n              out: function (id) {\n                window[\"countryOut\"].call(null, id);\n              },\n              over: function (id) {\n                window[\"countryOver\"].call(null, id);\n              },\n              click: function (id) {\n                window[\"countryClick\"].call(null, id);\n              },\n              update: function (data) {\n                window[\"updateMapData\"].call(null, data);\n              },\n              reset: function (data) {\n                window[\"resetMap\"].call(null, data);\n              },\n              labels: function (data) {\n                window[\"toggleMapLabels\"].call(null, data);\n              },\n              download: function (data) {\n                window[\"downloadMap\"].call(null, data);\n              },\n              table: function (data) {\n                window[\"parseHTMLTable\"].call(null, data);\n              },\n              date: function (data) {\n                window[\"timeControlsDate\"].call(null, data);\n              },\n            };\n            // Asynchronous load library addon module, if it's set in options.timeControls\n            if (options.timeControls == true) {\n              import(\"../src/svg-world-map-time-controls.mjs\").then(\n                (module) => {\n                  module.svgWorldMapTimeControls(\n                    svgMap,\n                    options.timePause,\n                    options.timeLoop,\n                    initTimeData\n                  );\n                }\n              );\n            }\n            // Add info box\n            if (options.showInfoBox == true) {\n              initInfoBox();\n            }\n            resolve2(svgMap);\n          });\n          let result2 = await promise2;\n          resolve1(result2);\n        },\n        false\n      );\n    });\n    // Wait for loaded map\n    let result1 = await promise1;\n    svgMap = result1;\n    // Return SVG World Map object\n    return svgMap;\n  }\n\n  // Init SVG map\n  function initMap() {\n    // Avoid double loading\n    if (document.getElementById(\"svg-world-map-container\") == null) {\n      // Add SVG container HTML\n      var container = document.createElement(\"div\");\n      container.setAttribute(\"id\", \"svg-world-map-container\");\n      document.body.prepend(container);\n      // Add SVG HTML, 'svg' is global\n      svg = document.createElement(\"object\");\n      svg.setAttribute(\"id\", \"svg-world-map\");\n      svg.setAttribute(\"type\", \"image/svg+xml\");\n      // Load small map with states only\n      if (smallScreen != false || options.bigMap == false) {\n        // isMobile == true\n        svg.setAttribute(\"data\", \"../src/world-states.svg\");\n        // Load big map with provinces\n      } else {\n        svg.setAttribute(\"data\", \"../src/world-states-provinces.svg\");\n      }\n      container.appendChild(svg);\n      // Add container and SVG CSS\n      // TODO: Make optional? Not needed for SVG World Map, but for SVG pan zoom etc.\n      var style = document.createElement(\"style\");\n      style.innerHTML = `#svg-world-map-container, #svg-world-map { width: 100%; height: 100%; }`;\n      document.head.appendChild(style);\n    }\n  }\n\n  // Init countries on SVG map\n  function initMapCountries() {\n    // Iterate through child nodes and add them to countries object\n    baseNode.childNodes.forEach(function (node) {\n      // Skip unclear disputed territories and also metadata, defs etc. - we want a clean node list\n      if (\n        node.id != undefined &&\n        node.id.substr(0, 1) != \"_\" &&\n        (node.tagName == \"g\" ||\n          node.tagName == \"path\" ||\n          node.tagName == \"rect\")\n      ) {\n        countries[node.id] = node;\n      }\n    });\n    // World & ocean settings\n    countries[\"World\"].style.fill = options.worldColor;\n    countries[\"Ocean\"].style.fill = options.oceanColor;\n    if (options.showOcean == false) {\n      countries[\"Ocean\"].style.fill = \"none\";\n      countries[\"Ocean\"].style.stroke = \"none\";\n    }\n    // Get microstates from labels and remove from countries\n    sortLabels();\n    //delete countries['Ocean']; // (Delete ocean from countries object) Keep it currently\n    // Delete Antarctica from countries and labels, if set in options\n    if (options.showAntarctica == false) {\n      baseNode.removeChild(baseNode.getElementById(\"AQ\"));\n      delete countries[\"AQ\"];\n      baseNode\n        .getElementById(\"labels\")\n        .removeChild(baseNode.getElementById(\"AQ-label\"));\n      delete countryLabels[\"AQ\"];\n    }\n    // Show labels on start, if it is set\n    if (options.showLabels == true) {\n      toggleMapLabels(\"all\");\n    }\n    delete countries[\"labels\"]; // Delete labels from countries object, not from map\n    // Pre-sort provinces\n    sortProvinces();\n    // Sort countries alphabetically\n    countries = sortObject(countries);\n    // Init country groups\n    if (options.groupCountries == true) {\n      buildCountryGroups();\n    }\n  }\n\n  // Pre-sort provinces and subprovinces in countries for faster access and node cleanup\n  // TODO: Cleanup, optimize?\n  function sortProvinces() {\n    for (var country in countries) {\n      // Add all details from countryData to country\n      if (countryData[countries[country].id] != undefined) {\n        var currentCountryData = countryData[countries[country].id];\n        for (var key in currentCountryData) {\n          countries[country][key] = currentCountryData[key];\n        }\n      }\n      countries[country].country = countries[country]; // Reference to self for hierarchy compatibility - it's a little crazy, i know ;-)\n      var provinces = []; // Empty array for all provinces\n      // Ungrouped provinces are 1 level deep\n      countries[country].childNodes.forEach(function (child) {\n        // Add parent country and province for hierarchy compatibility\n        child.country = countries[country];\n        child.province = child; // Reference to self for hierarchy compatibility\n        // 'id.toLowerCase()' is the nation (border) element, so this is the main country (nation)\n        if (child.id == countries[country].id.toLowerCase()) {\n          countries[country].border = child; // Add border to nation\n          if (child.tagName != \"g\") {\n            // Groups are colored below\n            pathSetAttributes(child, \"out\"); // Set border attributes\n            //provinces.push(child); // Don't push the nation (border) element, it's not needed in provinces\n          } else {\n            child.childNodes.forEach(function (grandchild) {\n              if (grandchild.nodeType != Node.TEXT_NODE) {\n                // Add country and parent province for hierarchy compatibility\n                grandchild.country = countries[country];\n                grandchild.province = child;\n                pathSetAttributes(grandchild, \"out\");\n              }\n            });\n          }\n          // Skip elements like circles (microstates)\n        } else if (\n          child.tagName == \"path\" &&\n          child.tagName != \"circle\" &&\n          child.id != countries[country].id.toLowerCase()\n        ) {\n          pathSetAttributes(child, \"out\");\n          provinces.push(child);\n          // Grouped provinces are 2 levels deep (We have to go deeper!)\n        } else if (child.tagName == \"g\") {\n          var subprovinces = []; // Empty array for all sub-provinces\n          child.childNodes.forEach(function (grandchild) {\n            // Add country and parent province for hierarchy compatibility\n            grandchild.country = countries[country];\n            grandchild.province = child;\n            if (grandchild.tagName == \"path\") {\n              if (grandchild.getAttribute(\"fill\") != \"none\") {\n                // Don't push border grandchilds\n                //provinces.push(grandchild);\n                subprovinces.push(grandchild);\n                /*} else {\n                                console.log(grandchild); // Only path15677, TODO: Cleanup SVG */\n              }\n              pathSetAttributes(grandchild, \"out\");\n              /* } else if (grandchild.nodeType != Node.TEXT_NODE) {\n                            console.log(grandchild);  // Only <circle id=\"tf.\"> and <circle id=\"hk_\">, TODO: Cleanup SVG  */\n            }\n          });\n          child.provinces = subprovinces; // Add subprovinces to province\n          provinces.push(child);\n        }\n      });\n      countries[country].provinces = provinces; // Add provinces to country\n    }\n    initMapControls();\n    //countCountries();\n  }\n\n  // Get microstates from labels\n  function sortLabels() {\n    countries[\"labels\"].childNodes.forEach(function (label) {\n      // Skip non-<text> text\n      if (label.tagName == \"text\") {\n        var countryId = label.id.substr(0, 2);\n        countryLabels[countryId] = label; // Add to countryLabels\n        // Set custom country name\n        if (label.textContent != countryData[countryId].name) {\n          label.textContent = countryData[countryId].name;\n        }\n        // Set fill and get microstates by font size in SVG\n        label.setAttribute(\"fill\", options.labelFill.out);\n        if (label.getAttribute(\"font-size\") == 2) {\n          // TODO: Make country sizes var?\n          label.microstate = true;\n        } else {\n          label.microstate = false;\n        }\n        // Add event listeners\n        label.addEventListener(\"mouseover\", function () {\n          countryOver(this.id.substr(0, 2));\n          updateInfoBox(\"over\", countries[this.id.substr(0, 2)]);\n        });\n        label.addEventListener(\"mouseout\", function () {\n          countryOut(this.id.substr(0, 2));\n          updateInfoBox(\"out\", countries[this.id.substr(0, 2)]);\n        });\n        label.addEventListener(\"mouseup\", function () {\n          countryClick(this.id.substr(0, 2));\n        });\n      }\n    });\n    for (var label in countryLabels) {\n      if (countryLabels[label].microstate == true) {\n        var microid = countryLabels[label].id.substr(0, 2);\n        // Set microstate labels\n        if (options.showMicroLabels == false) {\n          countryLabels[label].setAttribute(\"display\", \"none\");\n        }\n        // Set microstates\n        if (options.showMicroStates == false) {\n          countries[microid].setAttribute(\"display\", \"none\");\n        }\n      }\n    }\n  }\n\n  // Set country label color\n  function setLabelFill(id, event) {\n    if (countryLabels != undefined && countryLabels[id] != undefined) {\n      countryLabels[id].setAttribute(\"fill\", options.labelFill[event]);\n    }\n  }\n\n  // Set all attributes for a path\n  // TODO: Check over, out and selectedCountry logic\n  function pathSetAttributes(path, event) {\n    if (path != undefined && path.id != \"World\" && path.id != \"Ocean\") {\n      // Hover and click colors and stroke width are defined in options, don't hover selected country\n      if (\n        event == \"click\" ||\n        ((event == \"out\" || event == \"over\") &&\n          path != selectedCountry &&\n          path.country != selectedCountry)\n      ) {\n        // Country border (nation overlay, get's no fill)\n        if (\n          path == path.country.border ||\n          path.parentNode == path.country.border\n        ) {\n          path.setAttribute(\"stroke\", options.countryStroke[event]);\n          path.setAttribute(\"stroke-width\", options.countryStrokeWidth[event]);\n          // Other provinces\n        } else {\n          // Keep updated color\n          if (path.updateColor != undefined) {\n            path.setAttribute(\"fill\", path.updateColor);\n          } else {\n            path.setAttribute(\"fill\", options.provinceFill[event]);\n          }\n          path.setAttribute(\"stroke\", options.provinceStroke[event]);\n          path.setAttribute(\"stroke-width\", options.provinceStrokeWidth[event]);\n        }\n        // Set color to path directly, also to selected country\n      } else if (event.substr(0, 1) == \"#\" || event.substr(0, 3) == \"rgb\") {\n        // && path != selectedCountry && path.country != selectedCountry\n        path.setAttribute(\"fill\", event);\n        //path.setAttribute('stroke', event);\n      }\n    }\n  }\n\n  // Init info box\n  function initInfoBox() {\n    // Add info box HTML to SVG map container\n    infoBox = document.createElement(\"div\");\n    infoBox.setAttribute(\"id\", \"map-infobox\");\n    document.getElementById(\"svg-world-map-container\").appendChild(infoBox);\n    // Add info box CSS\n    var style = document.createElement(\"style\");\n    style.innerHTML = `\n            #map-infobox { position: absolute; top: 0; left: 0; padding: 3px 6px; max-width: 270px; overflow: hidden; font-family: 'Trebuchet MS', Verdana, Arial, sans-serif; font-size: 13px; color: #444444; background-color: rgba(255, 255, 255, .75); border: 1px solid #CDCDCD; border-radius: 5px; }\n            #map-infobox .data { margin-top: 5px; }\n        `;\n    document.head.appendChild(style);\n    // Add event listener and set display to none at start\n    infoBox.style.display = \"none\";\n    baseNode.addEventListener(\n      \"mousemove\",\n      function (event) {\n        if (infoBox.style.display != \"none\") {\n          infoBox.style.left = event.clientX - infoBox.offsetWidth / 2 + \"px\";\n          if (event.clientY < infoBox.offsetHeight + 25) {\n            infoBox.style.top = event.clientY + 25 + \"px\";\n          } else {\n            infoBox.style.top =\n              event.clientY - infoBox.offsetHeight - 15 + \"px\";\n          }\n        }\n      },\n      false\n    );\n  }\n\n  // Update info box\n  function updateInfoBox(event, path) {\n    // Info box is set in options.showInfoBox, otherwise undefined\n    if (infoBox != undefined) {\n      if (event == \"over\" && path.id != \"World\" && path.id != \"Ocean\") {\n        var infoText = \"<b>\" + path.country.name + \"</b>\";\n        // Add province info, but not for unnamed paths and borders\n        if (\n          path.id.substr(0, 4) != \"path\" &&\n          path.id.substr(0, 2) != path.country.id.toLowerCase() &&\n          path.id.length != 2\n        ) {\n          infoText += \"<br>\" + path.id;\n        }\n        // Add table data info for country or province\n        if (\n          tableData[path.country.id] != undefined ||\n          tableData[path.id] != undefined\n        ) {\n          infoText += '<div class=\"data\">';\n          if (tableData[path.country.id] != undefined) {\n            var tableInfo = tableData[path.country.id];\n          } else {\n            var tableInfo = tableData[path.id];\n          }\n          for (var details in tableInfo) {\n            infoText +=\n              \"<b>\" + details + \"</b>: \" + tableInfo[details] + \"<br>\";\n          }\n          infoText += \"</div>\";\n        }\n        // Basic implementation of time data info for corona map, TODO: refactor\n        // Add info for dayData, if it exists\n        if (\n          typeof dayData !== \"undefined\" &&\n          dayData[path.country.id] != undefined\n        ) {\n          infoText += '<div class=\"data\">';\n          infoText += \"Date: \" + dayData[path.country.id].dates[day] + \"<br>\";\n          infoText +=\n            'Conf. : <span class=\"red\">' +\n            dayData[path.country.id].confirmed[day] +\n            \"</span><br>\";\n          infoText +=\n            'Active: <span class=\"orange\">' +\n            dayData[path.country.id].activecases[day] +\n            \"</span><br>\";\n          infoText +=\n            'Rec. : <span class=\"green\">' +\n            dayData[path.country.id].recovered[day] +\n            \"</span><br>\";\n          infoText +=\n            'Deaths: <span class=\"black\">' +\n            dayData[path.country.id].deaths[day] +\n            \"</span><br>\";\n          //infoText += 'New Cases: <span class=\"black\">' + dayData[path.country.id].confirmednew[day] + '</span>';\n          infoText += \"</div>\";\n        }\n        infoBox.innerHTML = infoText;\n        infoBox.style.display = \"block\";\n      } else {\n        infoBox.style.display = \"none\";\n      }\n    }\n  }\n\n  // Map controls\n  function initMapControls() {\n    for (var country in countries) {\n      countries[country].addEventListener(\"mouseover\", function () {\n        provinceOverOut(\"over\");\n      });\n      countries[country].addEventListener(\"mouseout\", function () {\n        provinceOverOut(\"out\");\n      });\n      countries[country].addEventListener(\"mouseup\", function () {\n        provinceClick();\n      });\n    }\n  }\n\n  // Map country hover handling\n  function provinceOverOut(overout) {\n    var province = event.srcElement; // Get (sub-)country / province / state\n    var country = province.country;\n    // Check if (parent) country for path exists\n    if (country != undefined) {\n      // Check if country is not selected\n      if (province != selectedCountry) {\n        pathSetAttributes(province, overout);\n        // Remove highlight from circles for microstates on out\n        if (province.tagName == \"circle\" && overout == \"out\") {\n          province.removeAttribute(\"fill\");\n          province.removeAttribute(\"stroke\");\n        }\n      }\n    } else {\n      //console.log('Country not found for ' + province.id);\n    }\n    // Update info box and make callback\n    updateInfoBox(overout, province);\n    callBack(overout, province);\n  }\n\n  // Map click handling and internal callback routing\n  function provinceClick() {\n    //if (dragMap == false) { // TODO: Check, doesn't work smooth\n    var province = event.srcElement; // Get (sub-)country / province / state\n    var selectedOld = selectedCountry;\n    // Set new or unset current selectedCountry\n    if (selectedCountry == province) {\n      selectedCountry = undefined;\n      pathSetAttributes(province, \"out\");\n    } else {\n      var selectedOld = selectedCountry;\n      selectedCountry = province;\n      pathSetAttributes(selectedCountry, \"click\");\n    }\n    resetOldSelected(selectedOld); // Reset selectedOld\n    callBack(\"click\", selectedCountry);\n    /*} else {\n            console.log('drag...');\n        }*/\n  }\n\n  // Hover over function for calling home from the outside, defined in 'svgMap.over'\n  // TODO: Optimize / refactor with window.countryOut\n  window.countryOver = function (id) {\n    var country = countries[id];\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"over\");\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"over\");\n          });\n        }\n      });\n      setLabelFill(id, \"over\");\n    } else {\n      province = findProvinceById(id);\n      if (province != undefined) {\n        pathSetAttributes(province, \"over\");\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"over\");\n          });\n        }\n      }\n    }\n  };\n\n  // Hover out function for calling home from the outside, defined in 'svgMap.out'\n  window.countryOut = function (id) {\n    var country = countries[id];\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"out\");\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"out\");\n          });\n        }\n      });\n      setLabelFill(id, \"out\");\n    } else {\n      province = findProvinceById(id);\n      if (province != undefined) {\n        pathSetAttributes(province, \"out\");\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"out\");\n          });\n        }\n      }\n    }\n  };\n\n  // Click function for calling home from the outside, defined in 'svgMap.click'\n  window.countryClick = function (id) {\n    var country = countries[id];\n    var selectedOld = selectedCountry;\n    // Set new selected\n    if (country != undefined && country != selectedCountry) {\n      country.provinces.forEach(function (province) {\n        pathSetAttributes(province, \"click\");\n        if (province.provinces != undefined) {\n          province.provinces.forEach(function (subprovince) {\n            pathSetAttributes(subprovince, \"click\");\n          });\n        }\n      });\n      setLabelFill(id, \"click\");\n    } else {\n      country = findProvinceById(id);\n      pathSetAttributes(country, \"click\");\n    }\n    selectedCountry = country; // New selected\n    resetOldSelected(selectedOld); // Reset selectedOld\n    callBack(\"click\", country);\n  };\n\n  // Reset all colors and fills, function defined in 'svgMap.resetMap'\n  window.resetMap = function () {\n    for (var country in countries) {\n      if (countries[country].provinces != undefined) {\n        countries[country].provinces.forEach(function (province) {\n          if (province.updateColor != undefined) {\n            delete province.updateColor;\n            pathSetAttributes(province, \"out\");\n          }\n          if (province.provinces != undefined) {\n            province.provinces.forEach(function (subprovince) {\n              if (subprovince.updateColor != undefined) {\n                delete subprovince.updateColor;\n                pathSetAttributes(subprovince, \"out\");\n              }\n            });\n          }\n        });\n      }\n    }\n  };\n\n  // Update function for calling home from the outside, defined in 'svgMap.update'\n  window.updateMapData = function (updateData) {\n    for (var id in updateData) {\n      if (countries[id] != undefined) {\n        var country = countries[id];\n      } else {\n        var country = findProvinceById(id);\n      }\n      if (country != undefined) {\n        if (country.provinces == undefined) {\n          // Is mostly a province and no country. TODO: Rename variables?\n          country.updateColor = updateData[id];\n          pathSetAttributes(country, updateData[id]);\n        } else {\n          country.provinces.forEach(function (province) {\n            province.updateColor = updateData[id];\n            pathSetAttributes(province, updateData[id]);\n            if (province.provinces != undefined) {\n              province.provinces.forEach(function (subprovince) {\n                subprovince.updateColor = updateData[id];\n                pathSetAttributes(subprovince, updateData[id]);\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  // Update function for calling home from the outside, defined in 'svgMap.labels'\n  window.toggleMapLabels = function (updateLabels) {\n    if (updateLabels == \"all\") {\n      var labelGroup = baseNode.getElementById(\"labels\");\n      if (\n        labelGroup.getAttribute(\"display\") == null ||\n        labelGroup.getAttribute(\"display\") == \"block\"\n      ) {\n        labelGroup.setAttribute(\"display\", \"none\");\n      } else {\n        labelGroup.setAttribute(\"display\", \"block\");\n      }\n    } else if (updateLabels == \"micro\") {\n      for (var label in countryLabels) {\n        if (countryLabels[label].microstate == true) {\n          if (\n            countryLabels[label].getAttribute(\"display\") == null ||\n            countryLabels[label].getAttribute(\"display\") == \"block\"\n          ) {\n            countryLabels[label].setAttribute(\"display\", \"none\");\n          } else {\n            countryLabels[label].setAttribute(\"display\", \"block\");\n          }\n        }\n      }\n    }\n  };\n\n  // Export Map as SVG or PNG, defined in 'svgMap.download'\n  // TODO: Refactor + cleanup\n  window.downloadMap = function (type) {\n    var serializer = new XMLSerializer();\n    var svgXML = serializer.serializeToString(svg.contentDocument);\n    var blob = new Blob([svgXML], { type: \"image/svg+xml;charset=utf-8\" });\n    var url = URL.createObjectURL(blob);\n    if (type == \"svg\") {\n      var downloadLink = document.createElement(\"a\");\n      downloadLink.href = url;\n      downloadLink.download = \"world-map.\" + type;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    } else if (type == \"png\") {\n      var canvas = document.createElement(\"canvas\");\n      var context = canvas.getContext(\"2d\");\n      var svgSize = baseNode.viewBox.baseVal;\n      canvas.width = svgSize.width * 2;\n      canvas.height = svgSize.height * 2;\n      var data = new XMLSerializer().serializeToString(svg.contentDocument);\n      var win = window.URL || window.webkitURL || window;\n      var blob = new Blob([data], { type: \"image/svg+xml\" });\n      var url = win.createObjectURL(blob);\n      var img = new Image();\n      img.onload = function () {\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n        win.revokeObjectURL(url);\n        var uri = canvas\n          .toDataURL(\"image/png\")\n          .replace(\"image/png\", \"octet/stream\");\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        a.href = uri;\n        a.download = \"world-map.\" + type;\n        a.click();\n        window.URL.revokeObjectURL(uri);\n        document.body.removeChild(a);\n      };\n      img.src = url;\n    }\n  };\n\n  // Caller for time controls to callback out, defined in 'svgMap.date'\n  window.timeControlsDate = function (date) {\n    callBack(\"date\", date);\n  };\n\n  // Parse HTML for <table> data, defined in 'svgMap.table'\n  window.parseHTMLTable = function (html) {\n    tableData = {};\n    var tableKeys = [\n      \"iso\",\n      \"name\",\n      \"country\",\n      \"countries\",\n      \"state\",\n      \"states\",\n      \"nation\",\n      \"nations\",\n      \"member state\",\n      \"member states\",\n    ];\n    var dom = new DOMParser().parseFromString(html, \"text/html\");\n    var tables = dom.getElementsByTagName(\"table\");\n    // Search for table to use\n    loop_table: for (t = 0; t < tables.length; t++) {\n      var headers = tables[t].getElementsByTagName(\"th\");\n      for (h = 0; h < headers.length; h++) {\n        var headerText = stripHTML(headers[h].innerHTML);\n        // Table key found\n        if (tableKeys.indexOf(headerText.toLowerCase()) != -1) {\n          var tableNumber = t;\n          var tableKey = tableKeys[tableKeys.indexOf(headerText.toLowerCase())];\n          break loop_table;\n        }\n      }\n    }\n    // Scrape table if found\n    if (tableNumber != undefined) {\n      var table = dom.getElementsByTagName(\"table\")[tableNumber];\n      var headers = table.getElementsByTagName(\"th\");\n      var rows = table.getElementsByTagName(\"tr\");\n      var searchKey = new RegExp(\"(\" + tableKey + \")\", \"gi\");\n      var headerKey = \"\";\n      var columnKeys = [];\n      var timeTable = false;\n      // Get header data\n      for (h = 0; h < headers.length; h++) {\n        var headerText = stripHTML(headers[h].innerHTML);\n        // Check if <th> has search key first\n        if (headerText.search(searchKey) != -1) {\n          headerKey = headerText;\n        }\n        // Add <th> value to column keys\n        if (headerText != \"\") {\n          columnKeys.push(headerText);\n        }\n      }\n      // Check if table has time data = following numbers in a row\n      if (\n        !isNaN(columnKeys[1]) &&\n        !isNaN(columnKeys[2]) &&\n        !isNaN(columnKeys[3]) && // 3 numbers in a row\n        ((parseInt(columnKeys[1]) + 1 == parseInt(columnKeys[2]) &&\n          parseInt(columnKeys[2]) + 1 == parseInt(columnKeys[3])) ||\n          (parseInt(columnKeys[1]) - 1 == parseInt(columnKeys[2]) &&\n            parseInt(columnKeys[2]) - 1 == parseInt(columnKeys[3])))\n      ) {\n        timeTable = true;\n        /*if (isNaN(columnKeys[0])) {\n                        columnKeys.splice(0, 1);\n                    }*/\n      }\n      // Get rows data\n      for (r = 0; r < rows.length; r++) {\n        var rowData = {};\n        var columns = rows[r].getElementsByTagName(\"td\");\n        if (timeTable == true) {\n          var startColumn = 0;\n        } else {\n          var startColumn = 0;\n        }\n        for (c = startColumn; c < columns.length; c++) {\n          var columnText = stripHTML(columns[c].innerHTML);\n          if (columnText != \"\") {\n            // Check if text is a number and convert it\n            if (/^[0-9,.]*$/.test(columnText) == true) {\n              columnText = Number(columnText.replace(/,/g, \"\"));\n            }\n            // Check if <td> has background color and add and value and color\n            if (\n              columns[c].style.backgroundColor != undefined &&\n              columns[c].style.backgroundColor != \"\"\n            ) {\n              // Add data for time animation\n              if (timeTable == true && parseHTMLTable.caller == null) {\n                // Attention: function.caller in NOT supported in strict JavaScript!\n                var countryKey = findIdByName(stripHTML(columns[0].innerHTML));\n                if (tableData[columnKeys[c]] == undefined) {\n                  tableData[columnKeys[c]] = {};\n                }\n                // Push country color to tableData directly if time animation is true\n                if (countryKey != undefined) {\n                  tableData[columnKeys[c]][countryKey] =\n                    columns[c].style.backgroundColor;\n                }\n                rowData[countryKey] = columns[c].style.backgroundColor;\n                // Or push other color for none animated but colored\n              } else {\n                rowData[columnKeys[c]] = {\n                  data: columnText,\n                  color: columns[c].style.backgroundColor,\n                };\n              }\n              // Or just add <td> value to row data\n            } else if (parseHTMLTable.caller != null) {\n              // Attention: function.caller in NOT supported in strict JavaScript!\n              rowData[columnKeys[c]] = columnText;\n            }\n          }\n        }\n        // Add row data to table data\n        if (rowData[headerKey] != undefined) {\n          // Check if country has full name instead of ISO code and replace\n          if (rowData[headerKey].length > 2 && tableKey != \"iso\") {\n            var countryKey = findIdByName(rowData[headerKey]);\n          } else {\n            var countryKey = rowData[headerKey];\n          }\n          tableData[countryKey] = rowData;\n        }\n      }\n    }\n    // No table found or data not valid\n    if (tableNumber == undefined || Object.keys(tableData)[0] == \"undefined\") {\n      tableData = {\n        error: \"No valid data found in \" + tables.length + \" tables\",\n      };\n      // Sort countries alphabetically\n    } else {\n      tableData = sortObject(tableData);\n    }\n    // Return data\n    callBack(\"table\", tableData);\n  };\n\n  // Fire the (custom) callback functions, defined in 'options.mapOver', 'options.mapOut', 'options.mapClick' and 'options.mapDate'\n  function callBack(event, data) {\n    // 'data' is a path except for time controls date\n    if (\n      event == \"over\" &&\n      window[options.mapOver] &&\n      typeof window[options.mapOver] === \"function\"\n    ) {\n      window[options.mapOver].apply(window, [data]);\n    } else if (\n      event == \"out\" &&\n      window[options.mapOut] &&\n      typeof window[options.mapOut] === \"function\"\n    ) {\n      window[options.mapOut].apply(window, [data]);\n    } else if (\n      event == \"click\" &&\n      window[options.mapClick] &&\n      typeof window[options.mapClick] === \"function\"\n    ) {\n      if (data == undefined) {\n        data = \"\";\n      } // If path is undefined (because of selectedCountry), return empty string\n      window[options.mapClick].apply(window, [data]);\n    } else if (\n      event == \"table\" &&\n      window[options.mapTable] &&\n      typeof window[options.mapTable] === \"function\"\n    ) {\n      window[options.mapTable].apply(window, [data]);\n    } else if (\n      event == \"date\" &&\n      window[options.mapDate] &&\n      typeof window[options.mapDate] === \"function\"\n    ) {\n      window[options.mapDate].apply(window, [data]);\n    }\n  }\n\n  // Build groups of countries with countryData (or passed JSON countryData)\n  function buildCountryGroups() {\n    for (var country in countries) {\n      // Check if country exists in countryData\n      if (countryData[countries[country].id] != undefined) {\n        // Add new mainGroups and subGroups\n        for (var i = 0; i < options.groupBy.length; i++) {\n          var mainGroup = options.groupBy[i]; // E.g. \"region\"\n          var subGroup = countryData[countries[country].id][mainGroup]; // E.g. \"EU\"\n          // Add new mainGroup, if it doesn't exist\n          if (countryGroups[mainGroup] == undefined) {\n            countryGroups[mainGroup] = {}; // New object for each mainGroup\n          }\n          if (subGroup != \"\") {\n            // Add new subGroup, if it doesn't exist\n            if (countryGroups[mainGroup][subGroup] == undefined) {\n              countryGroups[mainGroup][subGroup] = {}; // New object for each subGroup\n            }\n            // Push country to subGroup\n            countryGroups[mainGroup][subGroup][countries[country].id] =\n              countries[country];\n          }\n        }\n      } else {\n        //console.log('Country data missing: ' + countries[country].id);\n      }\n    }\n    // Sort groups alphabetically\n    for (var group in countryGroups) {\n      countryGroups[group] = sortObject(countryGroups[group]);\n    }\n  }\n\n  // Helper function to get text without HTML\n  function stripHTML(input) {\n    return input\n      .replace(/(<br>)/gi, \" \")\n      .replace(/(&nbsp;)/gi, \" \")\n      .replace(/(<\\/li><li>)/gi, \" \")\n      .replace(/(\\n)/gi, \"\")\n      .replace(/(\\[.*\\])/gi, \"\")\n      .replace(/(<([^>]+)>)/gi, \"\")\n      .trim();\n  }\n\n  // Helper function for object alphabetical sort\n  function sortObject(input) {\n    return Object.keys(input)\n      .sort()\n      .reduce(function (object, key) {\n        object[key] = input[key];\n        return object;\n      }, {});\n  }\n\n  // Reset the old selectedCountry\n  function resetOldSelected(selectedOld) {\n    if (selectedOld != undefined) {\n      pathSetAttributes(selectedOld, \"out\");\n      if (selectedOld.provinces != undefined) {\n        selectedOld.provinces.forEach(function (province) {\n          pathSetAttributes(province, \"out\");\n          if (province.provinces != undefined) {\n            province.provinces.forEach(function (subprovince) {\n              pathSetAttributes(subprovince, \"out\");\n            });\n          }\n        });\n      }\n      setLabelFill(selectedOld.id, \"out\"); // Reset selectedOld label\n    }\n  }\n\n  // Find path in countries\n  function findProvinceById(id) {\n    for (var country in countries) {\n      var provinces = countries[country].provinces;\n      for (var province in provinces) {\n        if (id == provinces[province].id) {\n          return provinces[province]; // No break needed if returned\n        }\n      }\n    }\n  }\n\n  // Find id by country name\n  function findIdByName(name) {\n    // Remove \"The \", e.g. from \"The Bahamas\"\n    if (name.substr(0, 4).toLowerCase() == \"the \") {\n      name = name.substr(4);\n    }\n    // Remove \", The\", e.g. from \"Bahamas, The\"\n    if (name.substr(-5).toLowerCase() == \", the\") {\n      name = name.substr(0, name.length - 5);\n    }\n    // Remove last single characters, e.g. \" b\" from \"Syrian Arab Republic  b\"\n    if (name.substr(-2, 1) == \" \") {\n      name = name.substr(0, name.length - 2);\n    }\n    // Remove everything in brackets, e.g. \"(France)\" from \"French Guiana (France)\" and trim()\n    name = name.replace(/(\\(.*\\))/gi, \"\").trim();\n    // Search countries for name\n    for (var country in countryData) {\n      if (countryData[country].name == name) {\n        return country; // No break needed if returned\n      } else if (\n        countryData[country].altnames != undefined &&\n        countryData[country].altnames.split(\",\").indexOf(name) != -1\n      ) {\n        return country;\n      }\n    }\n  }\n\n  // Mobile device detection\n  function checkMobile() {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\n        navigator.userAgent\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        navigator.userAgent.substr(0, 4)\n      )\n    ) {\n      isMobile = true;\n    }\n  }\n\n  // Check screen size\n  function checkSize() {\n    if (screen.width < 999) {\n      if (screen.width < screen.height) {\n        smallScreen = \"portrait\";\n      } else {\n        smallScreen = \"landscape\";\n      }\n    }\n  }\n\n  // Debug helper function for all countries and provinces\n  function countCountries() {\n    var countCountries = 0;\n    var countProvinces = 0;\n    for (var country in countries) {\n      var countSub = 0;\n      countCountries++;\n      for (var province in countries[country].provinces) {\n        countSub++;\n        countProvinces++;\n      }\n      console.log(country + \": \" + countSub);\n    }\n    console.log(\"Total countries: \" + countCountries);\n    console.log(\"Total provinces: \" + countProvinces);\n  }\n\n  // Fallback for countryData if no other is passed\n  var countryData = {\n    AD: { name: \"Andorra\", region: \"EU\" },\n    AE: { name: \"United Arab Emirates\", region: \"AS\" },\n    AF: { name: \"Afghanistan\", region: \"AS\" },\n    AG: { name: \"Antigua and Barbuda\", region: \"NA\" },\n    AI: { name: \"Anguilla\", region: \"NA\" },\n    AL: { name: \"Albania\", region: \"EU\" },\n    AM: { name: \"Armenia\", region: \"AS\" },\n    AO: { name: \"Angola\", region: \"AF\" },\n    AQ: { name: \"Antarctica\", region: \"AN\" },\n    AR: { name: \"Argentina\", region: \"SA\" },\n    AS: { name: \"American Samoa\", region: \"OC\" },\n    AT: { name: \"Austria\", region: \"EU\" },\n    AU: { name: \"Australia\", region: \"OC\" },\n    AW: { name: \"Aruba\", region: \"SA\" },\n    AX: { name: \"Åland Islands\", region: \"EU\" },\n    AZ: { name: \"Azerbaijan\", region: \"AS\" },\n    BA: { name: \"Bosnia and Herzegovina\", region: \"EU\" },\n    BB: { name: \"Barbados\", region: \"SA\" },\n    BD: { name: \"Bangladesh\", region: \"AS\" },\n    BE: { name: \"Belgium\", region: \"EU\" },\n    BF: { name: \"Burkina Faso\", region: \"AF\" },\n    BG: { name: \"Bulgaria\", region: \"EU\" },\n    BH: { name: \"Bahrain\", region: \"AS\" },\n    BI: { name: \"Burundi\", region: \"AF\" },\n    BJ: { name: \"Benin\", region: \"AF\" },\n    BL: { name: \"Saint Barthélemy\", region: \"NA\" },\n    BM: { name: \"Bermuda\", region: \"NA\" },\n    BN: { name: \"Brunei\", region: \"AS\" },\n    BO: { name: \"Bolivia\", region: \"SA\" },\n    BQ: { name: \"Bonaire, Sint Eustatius and Saba\", region: \"SA\" },\n    BR: { name: \"Brazil\", region: \"SA\" },\n    BS: { name: \"Bahamas\", region: \"NA\" },\n    BT: { name: \"Bhutan\", region: \"AS\" },\n    BV: { name: \"Bouvet Island\", region: \"AN\" },\n    BW: { name: \"Botswana\", region: \"AF\" },\n    BY: { name: \"Belarus\", region: \"EU\" },\n    BZ: { name: \"Belize\", region: \"NA\" },\n    CA: { name: \"Canada\", region: \"NA\" },\n    CC: { name: \"Cocos (Keeling) Islands\", region: \"AS\" },\n    CD: {\n      name: \"Congo (Dem. Rep.)\",\n      altnames: \"Democratic Republic of the Congo,DR Congo\",\n      region: \"AF\",\n    },\n    CF: { name: \"Central African Republic\", region: \"AF\" },\n    CG: { name: \"Congo\", altnames: \"Republic of the Congo\", region: \"AF\" },\n    CH: { name: \"Switzerland\", region: \"EU\" },\n    CI: { name: \"Côte d'Ivoire\", altnames: \"Ivory Coast\", region: \"AF\" },\n    CK: { name: \"Cook Islands\", region: \"OC\" },\n    CL: { name: \"Chile\", region: \"SA\" },\n    CM: { name: \"Cameroon\", region: \"AF\" },\n    CN: { name: \"China\", region: \"AS\" },\n    CO: { name: \"Colombia\", region: \"SA\" },\n    CR: { name: \"Costa Rica\", region: \"NA\" },\n    CU: { name: \"Cuba\", region: \"NA\" },\n    CV: { name: \"Cabo Verde\", altnames: \"Cape Verde\", region: \"AF\" },\n    CW: { name: \"Curaçao\", region: \"SA\" },\n    CX: { name: \"Christmas Island\", region: \"AS\" },\n    CY: { name: \"Cyprus\", region: \"EU\" },\n    CZ: { name: \"Czechia\", altnames: \"Czech Republic\", region: \"EU\" },\n    DE: { name: \"Germany\", region: \"EU\" },\n    DJ: { name: \"Djibouti\", region: \"AF\" },\n    DK: { name: \"Denmark\", region: \"EU\" },\n    DM: { name: \"Dominica\", region: \"NA\" },\n    DO: { name: \"Dominican Republic\", region: \"NA\" },\n    DZ: { name: \"Algeria\", region: \"AF\" },\n    EC: { name: \"Ecuador\", region: \"SA\" },\n    EE: { name: \"Estonia\", region: \"EU\" },\n    EG: { name: \"Egypt\", region: \"AF\" },\n    EH: {\n      name: \"Western Sahara\",\n      altnames: \"Sahrawi Arab Democratic Republic\",\n      region: \"AF\",\n    },\n    ER: { name: \"Eritrea\", region: \"AF\" },\n    ES: { name: \"Spain\", region: \"EU\" },\n    ET: { name: \"Ethiopia\", region: \"AF\" },\n    FI: { name: \"Finland\", region: \"EU\" },\n    FJ: { name: \"Fiji\", region: \"OC\" },\n    FK: { name: \"Falkland Islands\", region: \"SA\" },\n    FM: { name: \"Micronesia\", region: \"OC\" },\n    FO: { name: \"Faroe Islands\", region: \"EU\" },\n    FR: { name: \"France\", region: \"EU\" },\n    GA: { name: \"Gabon\", region: \"AF\" },\n    GB: { name: \"United Kingdom\", region: \"EU\" },\n    GD: { name: \"Grenada\", region: \"NA\" },\n    GE: { name: \"Georgia\", region: \"AS\" },\n    GF: { name: \"French Guiana\", region: \"SA\" },\n    GG: { name: \"Guernsey\", region: \"EU\" },\n    GH: { name: \"Ghana\", region: \"AF\" },\n    GI: { name: \"Gibraltar\", region: \"EU\" },\n    GL: { name: \"Greenland\", region: \"NA\" },\n    GM: { name: \"Gambia\", region: \"AF\" },\n    GN: { name: \"Guinea\", region: \"AF\" },\n    GP: { name: \"Guadeloupe\", region: \"NA\" },\n    GQ: { name: \"Equatorial Guinea\", region: \"AF\" },\n    GR: { name: \"Greece\", region: \"EU\" },\n    GS: { name: \"South Georgia and the South Sandwich Islands\", region: \"AN\" },\n    GT: { name: \"Guatemala\", region: \"NA\" },\n    GU: { name: \"Guam\", region: \"OC\" },\n    GW: { name: \"Guinea-Bissau\", region: \"AF\" },\n    GY: { name: \"Guyana\", region: \"SA\" },\n    HK: { name: \"Hong Kong\", region: \"AS\" },\n    HM: { name: \"Heard Island and McDonald Islands\", region: \"AN\" },\n    HN: { name: \"Honduras\", region: \"NA\" },\n    HR: { name: \"Croatia\", region: \"EU\" },\n    HT: { name: \"Haiti\", region: \"NA\" },\n    HU: { name: \"Hungary\", region: \"EU\" },\n    ID: { name: \"Indonesia\", region: \"AS\" },\n    IE: { name: \"Ireland\", region: \"EU\" },\n    IL: { name: \"Israel\", region: \"AS\" },\n    IM: { name: \"Isle of Man\", region: \"EU\" },\n    IN: { name: \"India\", region: \"AS\" },\n    IO: { name: \"British Indian Ocean Territory\", region: \"AS\" },\n    IQ: { name: \"Iraq\", region: \"AS\" },\n    IR: { name: \"Iran\", region: \"AS\" },\n    IS: { name: \"Iceland\", region: \"EU\" },\n    IT: { name: \"Italy\", region: \"EU\" },\n    JE: { name: \"Jersey\", region: \"EU\" },\n    JM: { name: \"Jamaica\", region: \"NA\" },\n    JO: { name: \"Jordan\", region: \"AS\" },\n    JP: { name: \"Japan\", region: \"AS\" },\n    KE: { name: \"Kenya\", region: \"AF\" },\n    KG: { name: \"Kyrgyzstan\", region: \"AS\" },\n    KH: { name: \"Cambodia\", region: \"AS\" },\n    KI: { name: \"Kiribati\", region: \"OC\" },\n    KM: { name: \"Comoros\", region: \"AF\" },\n    KN: { name: \"Saint Kitts and Nevis\", region: \"NA\" },\n    KP: { name: \"North Korea\", region: \"AS\" },\n    KR: { name: \"South Korea\", region: \"AS\" },\n    KW: { name: \"Kuwait\", region: \"AS\" },\n    KY: { name: \"Cayman Islands\", region: \"NA\" },\n    KZ: { name: \"Kazakhstan\", region: \"AS\" },\n    LA: { name: \"Laos\", region: \"AS\" },\n    LB: { name: \"Lebanon\", region: \"AS\" },\n    LC: { name: \"Saint Lucia\", region: \"NA\" },\n    LI: { name: \"Liechtenstein\", region: \"EU\" },\n    LK: { name: \"Sri Lanka\", region: \"AS\" },\n    LR: { name: \"Liberia\", region: \"AF\" },\n    LS: { name: \"Lesotho\", region: \"AF\" },\n    LT: { name: \"Lithuania\", region: \"EU\" },\n    LU: { name: \"Luxembourg\", region: \"EU\" },\n    LV: { name: \"Latvia\", region: \"EU\" },\n    LY: { name: \"Libya\", region: \"AF\" },\n    MA: { name: \"Morocco\", region: \"AF\" },\n    MC: { name: \"Monaco\", region: \"EU\" },\n    MD: { name: \"Moldova\", region: \"EU\" },\n    ME: { name: \"Montenegro\", region: \"EU\" },\n    MF: { name: \"Saint Martin (French part)\", region: \"NA\" },\n    MG: { name: \"Madagascar\", region: \"AF\" },\n    MH: { name: \"Marshall Islands\", region: \"OC\" },\n    MK: { name: \"North Macedonia\", region: \"EU\" },\n    ML: { name: \"Mali\", region: \"AF\" },\n    MM: { name: \"Myanmar\", region: \"AS\" },\n    MN: { name: \"Mongolia\", region: \"AS\" },\n    MO: { name: \"Macao\", region: \"AS\" },\n    MP: { name: \"Northern Mariana Islands\", region: \"AS\" },\n    MQ: { name: \"Martinique\", region: \"NA\" },\n    MR: { name: \"Mauritania\", region: \"AF\" },\n    MS: { name: \"Montserrat\", region: \"NA\" },\n    MT: { name: \"Malta\", region: \"EU\" },\n    MU: { name: \"Mauritius\", region: \"AF\" },\n    MV: { name: \"Maldives\", region: \"AS\" },\n    MW: { name: \"Malawi\", region: \"AF\" },\n    MX: { name: \"Mexico\", region: \"NA\" },\n    MY: { name: \"Malaysia\", region: \"AS\" },\n    MZ: { name: \"Mozambique\", region: \"AF\" },\n    NA: { name: \"Namibia\", region: \"AF\" },\n    NC: { name: \"New Caledonia\", region: \"OC\" },\n    NE: { name: \"Niger\", region: \"AF\" },\n    NF: { name: \"Norfolk Island\", region: \"OC\" },\n    NG: { name: \"Nigeria\", region: \"AF\" },\n    NI: { name: \"Nicaragua\", region: \"NA\" },\n    NL: { name: \"Netherlands\", region: \"EU\" },\n    NO: { name: \"Norway\", region: \"EU\" },\n    NP: { name: \"Nepal\", region: \"AS\" },\n    NR: { name: \"Nauru\", region: \"OC\" },\n    NU: { name: \"Niue\", region: \"OC\" },\n    NZ: { name: \"New Zealand\", region: \"OC\" },\n    OM: { name: \"Oman\", region: \"AS\" },\n    PA: { name: \"Panama\", region: \"NA\" },\n    PE: { name: \"Peru\", region: \"SA\" },\n    PF: { name: \"French Polynesia\", region: \"OC\" },\n    PG: { name: \"Papua New Guinea\", region: \"OC\" },\n    PH: { name: \"Philippines\", region: \"AS\" },\n    PK: { name: \"Pakistan\", region: \"AS\" },\n    PL: { name: \"Poland\", region: \"EU\" },\n    PM: { name: \"Saint Pierre and Miquelon\", region: \"NA\" },\n    PN: { name: \"Pitcairn\", region: \"OC\" },\n    PR: { name: \"Puerto Rico\", region: \"NA\" },\n    PS: { name: \"Palestine\", altnames: \"State of Palestine\", region: \"AS\" },\n    PT: { name: \"Portugal\", region: \"EU\" },\n    PW: { name: \"Palau\", region: \"OC\" },\n    PY: { name: \"Paraguay\", region: \"SA\" },\n    QA: { name: \"Qatar\", region: \"AS\" },\n    RE: { name: \"Réunion\", region: \"AF\" },\n    RO: { name: \"Romania\", region: \"EU\" },\n    RS: { name: \"Serbia\", region: \"EU\" },\n    RU: { name: \"Russia\", region: \"EU\" },\n    RW: { name: \"Rwanda\", region: \"AF\" },\n    SA: { name: \"Saudi Arabia\", region: \"AS\" },\n    SB: { name: \"Solomon Islands\", region: \"OC\" },\n    SC: { name: \"Seychelles\", region: \"AF\" },\n    SD: { name: \"Sudan\", region: \"AF\" },\n    SE: { name: \"Sweden\", region: \"EU\" },\n    SG: { name: \"Singapore\", region: \"AS\" },\n    SH: { name: \"Saint Helena, Ascension and Tristan da Cunha\", region: \"AF\" },\n    SI: { name: \"Slovenia\", region: \"EU\" },\n    SJ: { name: \"Svalbard and Jan Mayen\", region: \"EU\" },\n    SK: { name: \"Slovakia\", region: \"EU\" },\n    SL: { name: \"Sierra Leone\", region: \"AF\" },\n    SM: { name: \"San Marino\", region: \"EU\" },\n    SN: { name: \"Senegal\", region: \"AF\" },\n    SO: { name: \"Somalia\", region: \"AF\" },\n    SR: { name: \"Suriname\", region: \"SA\" },\n    SS: { name: \"South Sudan\", region: \"AF\" },\n    ST: {\n      name: \"Sao Tome and Principe\",\n      altnames: \"São Tomé and Príncipe\",\n      region: \"AF\",\n    },\n    SV: { name: \"El Salvador\", region: \"NA\" },\n    SX: { name: \"Sint Maarten (Dutch part)\", region: \"NA\" },\n    SY: { name: \"Syria\", altnames: \"Syrian Arab Republic\", region: \"AS\" },\n    SZ: { name: \"Eswatini\", altnames: \"Swaziland\", region: \"AF\" },\n    TC: { name: \"Turks and Caicos Islands\", region: \"NA\" },\n    TD: { name: \"Chad\", region: \"AF\" },\n    TF: { name: \"French Southern Territories\", region: \"AF\" },\n    TG: { name: \"Togo\", region: \"AF\" },\n    TH: { name: \"Thailand\", region: \"AS\" },\n    TJ: { name: \"Tajikistan\", region: \"AS\" },\n    TK: { name: \"Tokelau\", region: \"OC\" },\n    TL: { name: \"Timor-Leste (East Timor)\", region: \"AS\" },\n    TM: { name: \"Turkmenistan\", region: \"AS\" },\n    TN: { name: \"Tunisia\", region: \"AF\" },\n    TO: { name: \"Tonga\", region: \"AF\" },\n    TR: { name: \"Turkey\", region: \"AS\" },\n    TT: { name: \"Trinidad and Tobago\", region: \"NA\" },\n    TV: { name: \"Tuvalu\", region: \"OC\" },\n    TW: { name: \"Taiwan\", region: \"AS\" },\n    TZ: { name: \"Tanzania\", region: \"AF\" },\n    UA: { name: \"Ukraine\", region: \"EU\" },\n    UG: { name: \"Uganda\", region: \"AF\" },\n    UM: { name: \"United States Minor Outlying Islands\", region: \"OC\" },\n    US: { name: \"United States\", region: \"NA\" },\n    UY: { name: \"Uruguay\", region: \"SA\" },\n    UZ: { name: \"Uzbekistan\", region: \"AS\" },\n    VA: { name: \"Holy See\", region: \"EU\" },\n    VC: { name: \"Saint Vincent and the Grenadines\", region: \"NA\" },\n    VE: { name: \"Venezuela\", region: \"SA\" },\n    VG: { name: \"Virgin Islands (British)\", region: \"NA\" },\n    VI: { name: \"Virgin Islands (U.S.)\", region: \"NA\" },\n    VN: { name: \"Viet Nam\", altnames: \"Vietnam\", region: \"AS\" },\n    VU: { name: \"Vanuatu\", region: \"OC\" },\n    WF: { name: \"Wallis and Futuna\", region: \"OC\" },\n    WS: { name: \"Samoa\", region: \"OC\" },\n    XK: { name: \"Kosovo\", region: \"EU\" },\n    YE: { name: \"Yemen\", region: \"AS\" },\n    YT: { name: \"Mayotte\", region: \"AF\" },\n    ZA: { name: \"South Africa\", region: \"AF\" },\n    ZM: { name: \"Zambia\", region: \"AF\" },\n    ZW: { name: \"Zimbabwe\", region: \"AF\" },\n  };\n\n  // Return the main function\n  return svgWorldMap;\n})();\n"]},"metadata":{},"sourceType":"module"}