{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx\";\nimport React, { Component, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup, Annotation, Marker } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\"; // import { useSpring, animated } from \"react-spring\";\n\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport { geoCentroid } from \"d3-geo\";\nimport mapdata from \"../maps/world.txt\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nvar countries = {};\nvar socket = null;\nvar troops = 0;\nvar countryStates = {};\nvar playerColours = {};\n\nclass countryState {\n  constructor(Troops, Player) {\n    this.Troops = Troops;\n    this.Player = Player;\n  }\n\n}\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n\n    socket.onmessage = msg => {\n      var action = JSON.parse(msg.data);\n\n      switch (action.Type) {\n        case \"updateTroops\":\n          troops = action.Troops;\n          break;\n\n        case \"updateCountry\":\n          if (typeof countryStates[action.Country] == \"undefined\" || countryStates[action.Country].Player != action.Player) {\n            countryStates[action.Country] = new countryState(action.Troops, action.Player);\n          } else {\n            countryStates[action.Country].Troops += action.Troops;\n          }\n\n          break;\n\n        case \"newPlayer\":\n          console.log(action.Player + \" has entered the chat bois as: \" + action.Country);\n          playerColours[action.Player] = action.Country;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SideBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = ISO_A2 => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"Spy Report On \", name, \":\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"Population: \", pop_est), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"GDP (PPP): \", gdp), continent !== \"South America\" && /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 43\n      }\n    }, \"Subregion: \", subrg), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Continent: \", continent));\n  };\n\n  const handleColourFill = country => {\n    const {\n      ISO_A2\n    } = country.properties; // if (\n    //   clickedCountry !== \"\" &&\n    //   getCountryCodes(clickedCountry).includes(ISO_A2)\n    // ) {\n    //   return \"#000000\";\n    // }\n\n    return \"#AAA\";\n  };\n\n  const handleColourStroke = country => {\n    const {\n      ISO_A2\n    } = country.properties;\n    return \"#FFF\";\n  };\n\n  const selectedCountryOptions = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"Selected Country: \", clickedCountry), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, \"OPTIONS:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, \" ATTACK \"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \"MOVE\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"DONATE\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, \"DROP\"))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-info-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"START THE CONQUEST!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"Welcome Commander \", username, \"!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"BASE TROOPS: \", troops)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), clickedCountry !== \"\" && /*#__PURE__*/React.createElement(\"selectedCountryOptions\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 37\n    }\n  }), display && /*#__PURE__*/React.createElement(CountryDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(MapSettings, {\n    setTooltipContent: setState,\n    setname: setname,\n    setgdp: setgdp,\n    setpop_est: setpop_est,\n    setdisplay: setdisplay,\n    setcontinent: setcontinent,\n    setsubrg: setsubrg,\n    setclickedCountry: handleclickedCountry,\n    handleColourFill: handleColourFill,\n    handleColourStroke: handleColourStroke,\n    setdoubleClicked: handledoubleClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, state));\n}\n\nconst getnum = num => {\n  var num = Math.round(num);\n\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n\n  return num;\n}; //Countries to not display\n\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry; //TODO: player team colour for country\n\nfunction countryColors(country) {\n  const {\n    NAME,\n    ISO_A2\n  } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  const situation = document.cookie.split(\"; \").map(s => s.split(\"=\")).filter(arr => arr[0] == \"situation\")[0][1];\n  const fileURL = \"/maps/\" + situation + \".txt\";\n  var countries = {};\n  var raw = \"\";\n  fetch(fileURL).then(line => line.text()).then(line => line.split(\"\\n\")).then(data => raw = data);\n  console.log(raw);\n  var borders = [];\n\n  for (let i = 0; i < raw.length; i++) {\n    borders = [];\n    var line = raw[i].split(\" \");\n    countries[line[0]] = line.slice(1);\n  }\n\n  return countries;\n}\n\nfunction getBorder(countrycode) {\n  return countries[countrycode];\n} //FIXME: fix read file correctly\n\n\nfunction getCountryCodes(countrycode) {\n  const fileURL = require(\"../maps/world.txt\");\n\n  const textByLine = fetch(fileURL).then(function (response) {\n    return response.text();\n  }).then(function (data) {\n    const borderdata = data.split(\"\\n\"); // console.log(data.split(\"\\n\").toString());\n    //\n\n    var countriesBordering = []; //Processing\n\n    for (let j = 0; j < borderdata.length; j++) {\n      var borders = borderdata[j].split(\" \");\n      console.log(borders);\n\n      if (borders[0] == countrycode) {\n        for (let i = 1; i < borders.length; i++) {\n          //Get border codes\n          // console.log(borders[i]);\n          countriesBordering.push(borders[i]);\n        }\n      }\n    } // console.log(countriesBordering);\n\n\n    return countriesBordering;\n  });\n  return textByLine;\n}\n/* GAME MAP */\n\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, geographies.map(geo => {\n    const fillcolour = handleColourFill(geo);\n    const strokecolour = handleColourStroke(geo);\n    return notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: fillcolour,\n      stroke: strokecolour,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST,\n          GDP_MD_EST,\n          SUBREGION,\n          CONTINENT\n        } = geo.properties; // setTooltipContent(\n        //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n        // );\n\n        setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n        setname(NAME);\n        setpop_est(getnum(POP_EST));\n        setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n        setsubrg(SUBREGION);\n        setcontinent(CONTINENT);\n        setdisplay(true);\n      },\n      onMouseLeave: () => {\n        setTooltipContent(\"\");\n        setdisplay(false);\n      },\n      style: {\n        default: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#F53\",\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        }\n      },\n      onClick: () => {\n        const {\n          ISO_A2\n        } = geo.properties;\n        setclickedCountry(ISO_A2);\n      },\n      onDoubleClick: () => {\n        setdoubleClicked();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }) : null;\n  }), geographies.map(geo => {\n    const centroid = geoCentroid(geo);\n    const {\n      NAME\n    } = geo.properties;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      key: geo.rsmKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      coordinates: centroid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      fontSize: 4,\n      alignmentBaseline: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 27\n      }\n    }, NAME)));\n  }))))));\n};\n\nexport default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","Annotation","Marker","ReactTooltip","connect","loaddetails","Intro2","username","geoCentroid","mapdata","geoUrl","countries","socket","troops","countryStates","playerColours","countryState","constructor","Troops","Player","GameMap","onmessage","msg","action","JSON","parse","data","Type","Country","console","log","render","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","handleclickedCountry","ISO_A2","handledoubleClicked","CountryDetails","handleColourFill","country","properties","handleColourStroke","selectedCountryOptions","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","loadMap","situation","document","cookie","split","map","s","filter","arr","fileURL","raw","fetch","then","line","text","borders","i","length","slice","getBorder","countrycode","getCountryCodes","require","textByLine","response","borderdata","countriesBordering","j","push","MapSettings","setTooltipContent","setdoubleClicked","geographies","geo","fillcolour","strokecolour","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed","centroid"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,MANF,QAOO,mBAPP;AAQA,OAAOC,YAAP,MAAyB,eAAzB,C,CACA;;AACA,OAAO,WAAP;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,iBAArC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,QAA4B,QAA5B;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,MAAMC,MAAM,GACV,wGADF;AAGA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,MAAM,GAAG,CAAb;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,aAAa,GAAG,EAApB;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC1B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAJgB;;AAOnB,MAAMC,OAAN,SAAsBzB,SAAtB,CAAgC;AAC9BsB,EAAAA,WAAW,GAAG;AACZ;AACAL,IAAAA,MAAM,GAAGR,OAAO,EAAhB;;AACAQ,IAAAA,MAAM,CAACS,SAAP,GAAoBC,GAAD,IAAS;AAC1B,UAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAf,CAAb;;AACA,cAAQH,MAAM,CAACI,IAAf;AACE,aAAK,cAAL;AACEd,UAAAA,MAAM,GAAGU,MAAM,CAACL,MAAhB;AACA;;AACF,aAAK,eAAL;AACE,cACE,OAAOJ,aAAa,CAACS,MAAM,CAACK,OAAR,CAApB,IAAwC,WAAxC,IACAd,aAAa,CAACS,MAAM,CAACK,OAAR,CAAb,CAA8BT,MAA9B,IAAwCI,MAAM,CAACJ,MAFjD,EAGE;AACAL,YAAAA,aAAa,CAACS,MAAM,CAACK,OAAR,CAAb,GAAgC,IAAIZ,YAAJ,CAC9BO,MAAM,CAACL,MADuB,EAE9BK,MAAM,CAACJ,MAFuB,CAAhC;AAID,WARD,MAQO;AACLL,YAAAA,aAAa,CAACS,MAAM,CAACK,OAAR,CAAb,CAA8BV,MAA9B,IAAwCK,MAAM,CAACL,MAA/C;AACD;;AACD;;AACF,aAAK,WAAL;AACEW,UAAAA,OAAO,CAACC,GAAR,CACEP,MAAM,CAACJ,MAAP,GAAgB,iCAAhB,GAAoDI,MAAM,CAACK,OAD7D;AAGAb,UAAAA,aAAa,CAACQ,MAAM,CAACJ,MAAR,CAAb,GAA+BI,MAAM,CAACK,OAAtC;AArBJ;AAuBD,KAzBD;AA0BD;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAlC6B;;AAqChC,SAASC,OAAT,GAAmB;AACjB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACuC,IAAD,EAAOC,OAAP,IAAkBxC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACyC,OAAD,EAAUC,UAAV,IAAwB1C,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC2C,GAAD,EAAMC,MAAN,IAAgB5C,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC6C,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiD,OAAD,EAAUC,UAAV,IAAwBlD,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACmD,cAAD,EAAiBC,iBAAjB,IAAsCpD,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMqD,oBAAoB,GAAIC,MAAD,IAAY;AACvCF,IAAAA,iBAAiB,CAACE,MAAD,CAAjB;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,MAAM;AAChCH,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,GAFD;;AAIA,QAAMI,cAAc,GAAG,MAAM;AAC3B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmBjB,IAAnB,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiBE,OAAjB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBE,GAAhB,CAHF,EAIGI,SAAS,KAAK,eAAd,iBAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBF,KAAhB,CAJpC,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBE,SAAhB,CALF,CADF;AASD,GAVD;;AAYA,QAAMU,gBAAgB,GAAIC,OAAD,IAAa;AACpC,UAAM;AAAEJ,MAAAA;AAAF,QAAaI,OAAO,CAACC,UAA3B,CADoC,CAEpC;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,MAAP;AACD,GATD;;AAWA,QAAMC,kBAAkB,GAAIF,OAAD,IAAa;AACtC,UAAM;AAAEJ,MAAAA;AAAF,QAAaI,OAAO,CAACC,UAA3B;AACA,WAAO,MAAP;AACD,GAHD;;AAKA,QAAME,sBAAsB,GAAG,MAAM;AACnC,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAuBV,cAAvB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CADF,CAHF,CADF;AAcD,GAfD;;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuBxC,QAAvB,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkBM,MAAlB,CAHF,CADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGANF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWGkC,cAAc,KAAK,EAAnB,iBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAX5B,EAYGF,OAAO,iBAAI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZd,CADF,CADF,eAiBE,oBAAC,WAAD;AACE,IAAA,iBAAiB,EAAEX,QADrB;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,MAAM,EAAEI,MAHV;AAIE,IAAA,UAAU,EAAEF,UAJd;AAKE,IAAA,UAAU,EAAEQ,UALd;AAME,IAAA,YAAY,EAAEF,YANhB;AAOE,IAAA,QAAQ,EAAEF,QAPZ;AAQE,IAAA,iBAAiB,EAAEO,oBARrB;AASE,IAAA,gBAAgB,EAAEI,gBATpB;AAUE,IAAA,kBAAkB,EAAEG,kBAVtB;AAWE,IAAA,gBAAgB,EAAEL,mBAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,eA8BE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAelB,KAAf,CA9BF,CADF;AAkCD;;AAED,MAAMyB,MAAM,GAAIC,GAAD,IAAS;AACtB,MAAIA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAV;;AACA,MAAIA,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,EAAb,CAAV,EAA4B;AAC1BH,IAAAA,GAAG,GAAGA,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,EAAb,CAAN,GAAyB,WAA/B;AACD,GAFD,MAEO,IAAIH,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAV,EAA2B;AAChCH,IAAAA,GAAG,GAAGA,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAN,GAAwB,UAA9B;AACD,GAFM,MAEA,IAAIH,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAV,EAA2B;AAChCH,IAAAA,GAAG,GAAGA,GAAG,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAN,GAAwB,UAA9B;AACD;;AACD,SAAOH,GAAP;AACD,CAVD,C,CAYA;;;AACA,SAASI,cAAT,CAAwBT,OAAxB,EAAiC;AAC/B,QAAM;AAAEU,IAAAA;AAAF,MAAWV,OAAO,CAACC,UAAzB;AACA,SAAOS,IAAI,KAAK,EAAhB;AACD;;AAED,IAAIjB,cAAJ,C,CACA;;AACA,SAASkB,aAAT,CAAuBX,OAAvB,EAAgC;AAC9B,QAAM;AAAEU,IAAAA,IAAF;AAAQd,IAAAA;AAAR,MAAmBI,OAAO,CAACC,UAAjC;AACA,SAAO,MAAP;AACD;;AAED,SAASW,OAAT,GAAmB;AACjB,QAAMC,SAAS,GAAGC,QAAQ,CAACC,MAAT,CACfC,KADe,CACT,IADS,EAEfC,GAFe,CAEVC,CAAD,IAAOA,CAAC,CAACF,KAAF,CAAQ,GAAR,CAFI,EAGfG,MAHe,CAGPC,GAAD,IAASA,GAAG,CAAC,CAAD,CAAH,IAAU,WAHX,EAGwB,CAHxB,EAG2B,CAH3B,CAAlB;AAIA,QAAMC,OAAO,GAAG,WAAWR,SAAX,GAAuB,MAAvC;AAEA,MAAIxD,SAAS,GAAG,EAAhB;AAEA,MAAIiE,GAAG,GAAG,EAAV;AACAC,EAAAA,KAAK,CAACF,OAAD,CAAL,CACGG,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESC,IAAD,IAAUA,IAAI,CAACT,KAAL,CAAW,IAAX,CAFlB,EAGGQ,IAHH,CAGSpD,IAAD,IAAWkD,GAAG,GAAGlD,IAHzB;AAKAG,EAAAA,OAAO,CAACC,GAAR,CAAY8C,GAAZ;AACA,MAAIK,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,OAAO,GAAG,EAAV;AACA,QAAIF,IAAI,GAAGH,GAAG,CAACM,CAAD,CAAH,CAAOZ,KAAP,CAAa,GAAb,CAAX;AACA3D,IAAAA,SAAS,CAACoE,IAAI,CAAC,CAAD,CAAL,CAAT,GAAqBA,IAAI,CAACK,KAAL,CAAW,CAAX,CAArB;AACD;;AACD,SAAOzE,SAAP;AACD;;AAED,SAAS0E,SAAT,CAAmBC,WAAnB,EAAgC;AAC9B,SAAO3E,SAAS,CAAC2E,WAAD,CAAhB;AACD,C,CAED;;;AACA,SAASC,eAAT,CAAyBD,WAAzB,EAAsC;AACpC,QAAMX,OAAO,GAAGa,OAAO,CAAC,mBAAD,CAAvB;;AACA,QAAMC,UAAU,GAAGZ,KAAK,CAACF,OAAD,CAAL,CAChBG,IADgB,CACX,UAAUY,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACV,IAAT,EAAP;AACD,GAHgB,EAIhBF,IAJgB,CAIX,UAAUpD,IAAV,EAAgB;AACpB,UAAMiE,UAAU,GAAGjE,IAAI,CAAC4C,KAAL,CAAW,IAAX,CAAnB,CADoB,CAEpB;AACA;;AACA,QAAIsB,kBAAkB,GAAG,EAAzB,CAJoB,CAKpB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACR,MAA/B,EAAuCU,CAAC,EAAxC,EAA4C;AAC1C,UAAIZ,OAAO,GAAGU,UAAU,CAACE,CAAD,CAAV,CAAcvB,KAAd,CAAoB,GAApB,CAAd;AACAzC,MAAAA,OAAO,CAACC,GAAR,CAAYmD,OAAZ;;AACA,UAAIA,OAAO,CAAC,CAAD,CAAP,IAAcK,WAAlB,EAA+B;AAC7B,aAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC;AACA;AACAU,UAAAA,kBAAkB,CAACE,IAAnB,CAAwBb,OAAO,CAACC,CAAD,CAA/B;AACD;AACF;AACF,KAhBmB,CAiBpB;;;AACA,WAAOU,kBAAP;AACD,GAvBgB,CAAnB;AAwBA,SAAOH,UAAP;AACD;AAED;;;AAEA,MAAMM,WAAW,GAAG,CAAC;AACnBC,EAAAA,iBADmB;AAEnB5D,EAAAA,OAFmB;AAGnBE,EAAAA,UAHmB;AAInBI,EAAAA,QAJmB;AAKnBE,EAAAA,YALmB;AAMnBJ,EAAAA,MANmB;AAOnBM,EAAAA,UAPmB;AAQnBE,EAAAA,iBARmB;AASnBK,EAAAA,gBATmB;AAUnBG,EAAAA,kBAVmB;AAWnByC,EAAAA;AAXmB,CAAD,KAYd;AACJ,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,gBAAS,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEvF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEwF,IAAAA;AAAF,GAAD,kBACC,0CACGA,WAAW,CAAC3B,GAAZ,CAAiB4B,GAAD,IAAS;AACxB,UAAMC,UAAU,GAAG/C,gBAAgB,CAAC8C,GAAD,CAAnC;AACA,UAAME,YAAY,GAAG7C,kBAAkB,CAAC2C,GAAD,CAAvC;AACA,WAAOpC,cAAc,CAACoC,GAAD,CAAd,gBACL,oBAAC,SAAD;AACE,MAAA,GAAG,EAAEA,GAAG,CAACG,MADX;AAEE,MAAA,SAAS,EAAEH,GAFb;AAGE,MAAA,IAAI,EAAEC,UAHR;AAIE,MAAA,MAAM,EAAEC,YAJV;AAKE,MAAA,YAAY,EAAE,MAAM;AAClB,cAAM;AACJrC,UAAAA,IADI;AAEJuC,UAAAA,OAFI;AAGJC,UAAAA,UAHI;AAIJC,UAAAA,SAJI;AAKJC,UAAAA;AALI,YAMFP,GAAG,CAAC5C,UANR,CADkB,CASlB;AACA;AACA;;AAEAyC,QAAAA,iBAAiB,CAAE,GAAEhC,IAAK,oBAAT,CAAjB;AACA5B,QAAAA,OAAO,CAAC4B,IAAD,CAAP;AACA1B,QAAAA,UAAU,CAACoB,MAAM,CAAC6C,OAAD,CAAP,CAAV;AACA/D,QAAAA,MAAM,CAACkB,MAAM,CAAC8C,UAAU,GAAG5C,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAd,CAAP,CAAN;AACApB,QAAAA,QAAQ,CAAC+D,SAAD,CAAR;AACA7D,QAAAA,YAAY,CAAC8D,SAAD,CAAZ;AACA5D,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAzBH;AA0BE,MAAA,YAAY,EAAE,MAAM;AAClBkD,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAlD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OA7BH;AA8BE,MAAA,KAAK,EAAE;AACL6D,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,SADC;AAEPC,UAAAA,OAAO,EAAE;AAFF,SADJ;AAKLC,QAAAA,KAAK,EAAE;AACLF,UAAAA,IAAI,EAAE,MADD;AAELC,UAAAA,OAAO,EAAE;AAFJ,SALF;AASLE,QAAAA,OAAO,EAAE;AACPH,UAAAA,IAAI,EAAE,SADC;AAEPC,UAAAA,OAAO,EAAE;AAFF;AATJ,OA9BT;AA4CE,MAAA,OAAO,EAAE,MAAM;AACb,cAAM;AAAE3D,UAAAA;AAAF,YAAaiD,GAAG,CAAC5C,UAAvB;AACAP,QAAAA,iBAAiB,CAACE,MAAD,CAAjB;AACD,OA/CH;AAgDE,MAAA,aAAa,EAAE,MAAM;AACnB+C,QAAAA,gBAAgB;AACjB,OAlDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,GAqDH,IArDJ;AAsDD,GAzDA,CADH,EA4DGC,WAAW,CAAC3B,GAAZ,CAAiB4B,GAAD,IAAS;AACxB,UAAMa,QAAQ,GAAGxG,WAAW,CAAC2F,GAAD,CAA5B;AACA,UAAM;AAAEnC,MAAAA;AAAF,QAAWmC,GAAG,CAAC5C,UAArB;AACA,wBACE;AAAG,MAAA,GAAG,EAAE4C,GAAG,CAACG,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,MAAD;AAAQ,MAAA,WAAW,EAAEU,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,QAAQ,EAAE,CAAhB;AAAmB,MAAA,iBAAiB,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGhD,IADH,CADF,CAFJ,CADF;AAWD,GAdA,CA5DH,CAFJ,CADF,CADF,CADF,CADF;AAwFD,CArGD;;AAuGA,eAAe5C,OAAf","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Annotation,\n  Marker,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport { geoCentroid } from \"d3-geo\";\n\nimport mapdata from \"../maps/world.txt\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nvar countries = {};\nvar socket = null;\nvar troops = 0;\nvar countryStates = {};\nvar playerColours = {};\n\nclass countryState {\n  constructor(Troops, Player) {\n    this.Troops = Troops;\n    this.Player = Player;\n  }\n}\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n    socket.onmessage = (msg) => {\n      var action = JSON.parse(msg.data);\n      switch (action.Type) {\n        case \"updateTroops\":\n          troops = action.Troops;\n          break;\n        case \"updateCountry\":\n          if (\n            typeof countryStates[action.Country] == \"undefined\" ||\n            countryStates[action.Country].Player != action.Player\n          ) {\n            countryStates[action.Country] = new countryState(\n              action.Troops,\n              action.Player\n            );\n          } else {\n            countryStates[action.Country].Troops += action.Troops;\n          }\n          break;\n        case \"newPlayer\":\n          console.log(\n            action.Player + \" has entered the chat bois as: \" + action.Country\n          );\n          playerColours[action.Player] = action.Country;\n      }\n    };\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = (ISO_A2) => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    const { ISO_A2 } = country.properties;\n    // if (\n    //   clickedCountry !== \"\" &&\n    //   getCountryCodes(clickedCountry).includes(ISO_A2)\n    // ) {\n    //   return \"#000000\";\n    // }\n    return \"#AAA\";\n  };\n\n  const handleColourStroke = (country) => {\n    const { ISO_A2 } = country.properties;\n    return \"#FFF\";\n  };\n\n  const selectedCountryOptions = () => {\n    return (\n      <div>\n        <h3>Selected Country: {clickedCountry}</h3>\n        <h4>OPTIONS:</h4>\n        <ul>\n          <li>\n            <button type=\"button\"> ATTACK </button>\n            <button type=\"button\">MOVE</button>\n            <button type=\"button\">DONATE</button>\n            <button type=\"button\">DROP</button>\n          </li>\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n            <h3>BASE TROOPS: {troops}</h3>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          <p></p>\n          {clickedCountry !== \"\" && <selectedCountryOptions />}\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourStroke}\n        setdoubleClicked={handledoubleClicked}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  const situation = document.cookie\n    .split(\"; \")\n    .map((s) => s.split(\"=\"))\n    .filter((arr) => arr[0] == \"situation\")[0][1];\n  const fileURL = \"/maps/\" + situation + \".txt\";\n\n  var countries = {};\n\n  var raw = \"\";\n  fetch(fileURL)\n    .then((line) => line.text())\n    .then((line) => line.split(\"\\n\"))\n    .then((data) => (raw = data));\n\n  console.log(raw);\n  var borders = [];\n  for (let i = 0; i < raw.length; i++) {\n    borders = [];\n    var line = raw[i].split(\" \");\n    countries[line[0]] = line.slice(1);\n  }\n  return countries;\n}\n\nfunction getBorder(countrycode) {\n  return countries[countrycode];\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  const fileURL = require(\"../maps/world.txt\");\n  const textByLine = fetch(fileURL)\n    .then(function (response) {\n      return response.text();\n    })\n    .then(function (data) {\n      const borderdata = data.split(\"\\n\");\n      // console.log(data.split(\"\\n\").toString());\n      //\n      var countriesBordering = [];\n      //Processing\n      for (let j = 0; j < borderdata.length; j++) {\n        var borders = borderdata[j].split(\" \");\n        console.log(borders);\n        if (borders[0] == countrycode) {\n          for (let i = 1; i < borders.length; i++) {\n            //Get border codes\n            // console.log(borders[i]);\n            countriesBordering.push(borders[i]);\n          }\n        }\n      }\n      // console.log(countriesBordering);\n      return countriesBordering;\n    });\n  return textByLine;\n}\n\n/* GAME MAP */\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap data-tip=\"\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) => (\n              <>\n                {geographies.map((geo) => {\n                  const fillcolour = handleColourFill(geo);\n                  const strokecolour = handleColourStroke(geo);\n                  return notThisCountry(geo) ? (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill={fillcolour}\n                      stroke={strokecolour}\n                      onMouseEnter={() => {\n                        const {\n                          NAME,\n                          POP_EST,\n                          GDP_MD_EST,\n                          SUBREGION,\n                          CONTINENT,\n                        } = geo.properties;\n\n                        // setTooltipContent(\n                        //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                        // );\n\n                        setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                        setname(NAME);\n                        setpop_est(getnum(POP_EST));\n                        setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                        setsubrg(SUBREGION);\n                        setcontinent(CONTINENT);\n                        setdisplay(true);\n                      }}\n                      onMouseLeave={() => {\n                        setTooltipContent(\"\");\n                        setdisplay(false);\n                      }}\n                      style={{\n                        default: {\n                          fill: \"#D6D6DA\",\n                          outline: \"none\",\n                        },\n                        hover: {\n                          fill: \"#F53\",\n                          outline: \"none\",\n                        },\n                        pressed: {\n                          fill: \"#D6D6DA\",\n                          outline: \"none\",\n                        },\n                      }}\n                      onClick={() => {\n                        const { ISO_A2 } = geo.properties;\n                        setclickedCountry(ISO_A2);\n                      }}\n                      onDoubleClick={() => {\n                        setdoubleClicked();\n                      }}\n                    />\n                  ) : null;\n                })}\n\n                {geographies.map((geo) => {\n                  const centroid = geoCentroid(geo);\n                  const { NAME } = geo.properties;\n                  return (\n                    <g key={geo.rsmKey}>\n                      {\n                        <Marker coordinates={centroid}>\n                          <text fontSize={4} alignmentBaseline=\"middle\">\n                            {NAME}\n                          </text>\n                        </Marker>\n                      }\n                    </g>\n                  );\n                })}\n              </>\n            )}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}