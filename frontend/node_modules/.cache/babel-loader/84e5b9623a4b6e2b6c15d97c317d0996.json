{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\Akshat\\\\Documents\\\\Imperial\\\\personal\\\\conquer2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n};\n\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nvar VALUE = 'value';\nvar UNDEFINED = 'undefined';\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar SELECT = 'select';\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nvar REGEX_IS_PLAIN_PROP = /^\\w*$/;\nvar REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nvar REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\nvar REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners(_ref) {\n  var ref = _ref.field.ref,\n      handleChange = _ref.handleChange,\n      isRadioOrCheckbox = _ref.isRadioOrCheckbox;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = function isKey(value) {\n  return !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n};\n\nvar stringToPath = function stringToPath(string) {\n  var result = [];\n  string.replace(REGEX_PROP_NAME, function (match, number, quote, string) {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!isKey(key)) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = path.split(/[,[\\].]+?/).filter(Boolean).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = function focusOnErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  var index = -1;\n  var length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  var updatePath = isKey(path) ? [path] : castPath(path);\n  var childObject = parent(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var result = !(childObject != null) || delete childObject[key];\n  var previousObjRef = undefined;\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(function (data) {\n          return isObject(data) && !isEmptyObject(data);\n        }).length) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(function (path) {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nvar isSameRef = function isSameRef(fieldValue, ref) {\n  return fieldValue && fieldValue.ref === ref;\n};\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  var ref = field.ref,\n      _field$ref = field.ref,\n      name = _field$ref.name,\n      type = _field$ref.type,\n      mutationWatcher = field.mutationWatcher;\n  var fieldValue = fields[name];\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    var options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach(function (option, index) {\n        var ref = option.ref,\n            mutationWatcher = option.mutationWatcher;\n\n        if (ref && isDetached(ref) && isSameRef(option, ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [\"[\".concat(index, \"]\")]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldValue, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.ref.checked ? {\n      isValid: true,\n      value: option.ref.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref4) {\n    var selected = _ref4.selected;\n    return selected;\n  }).map(function (_ref5) {\n    var value = _ref5.value;\n    return value;\n  });\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"\".concat(SELECT, \"-multiple\");\n};\n\nvar isEmptyString = function isEmptyString(value) {\n  return value === '';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.ref.checked;\n      }).map(function (_ref6) {\n        var value = _ref6.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  var name = ref.name,\n      value = ref.value;\n  var field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fields, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) ? search.find(function (data) {\n      return name.startsWith(data);\n    }) : search && search.nest)) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  };\n\n  for (var name in fields) {\n    _loop(name);\n  }\n\n  return output;\n};\n\nvar compareObject = function compareObject() {\n  var objectA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var objectB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var objectAKeys = Object.keys(objectA);\n  var objectBKeys = Object.keys(objectB);\n  return objectAKeys.length === objectBKeys.length && objectAKeys.every(function (key) {\n    return objectB[key] && objectB[key] === objectA[key];\n  });\n};\n\nvar isSameError = function isSameError(error, _ref7) {\n  var type = _ref7.type,\n      types = _ref7.types,\n      message = _ref7.message;\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldRenderBasedOnError(_ref8) {\n  var errors = _ref8.errors,\n      name = _ref8.name,\n      error = _ref8.error,\n      validFields = _ref8.validFields,\n      fieldsWithValidation = _ref8.fieldsWithValidation;\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = get(error, name);\n  var existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  var isValueMessage = function isValueMessage(value) {\n    return isObject(value) && !isRegex(value);\n  };\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || isObject(value) && isValidElement(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (validateAllFieldCriteria) {\n    var error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n    });\n  }\n\n  return {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref9) {\n    var ref, _ref9$ref, type, value, name, options, required, maxLength, minLength, min, max, pattern, validate, _a, fields, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref11, requiredValue, requiredMessage, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validationResult, _i, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref9.ref, _ref9$ref = _ref9.ref, type = _ref9$ref.type, value = _ref9$ref.value, name = _ref9$ref.name, options = _ref9.options, required = _ref9.required, maxLength = _ref9.maxLength, minLength = _ref9.minLength, min = _ref9.min, max = _ref9.max, pattern = _ref9.pattern, validate = _ref9.validate;\n            fields = fieldsRef.current;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = isEmptyString(value);\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n              if (!validateAllFieldCriteria) {\n                return error;\n              }\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 15;\n              break;\n            }\n\n            _ref11 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), requiredValue = _ref11.value, requiredMessage = _ref11.message;\n\n            if (!requiredValue) {\n              _context.next = 15;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: requiredMessage,\n              ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 15:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context.next = 23;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 23;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 23:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 33;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n            _exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 33;\n              break;\n            }\n\n            getMinMaxMessage(!!_exceedMax, maxLengthMessage, minLengthMessage);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 33;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 33:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 39;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 39;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 39;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 39:\n            if (!validate) {\n              _context.next = 72;\n              break;\n            }\n\n            fieldValue = getFieldValue(fields, ref);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 53;\n              break;\n            }\n\n            _context.next = 45;\n            return validate(fieldValue);\n\n          case 45:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 51;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 51;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 51:\n            _context.next = 72;\n            break;\n\n          case 53:\n            if (!isObject(validate)) {\n              _context.next = 72;\n              break;\n            }\n\n            validationResult = {};\n            _i = 0, _Object$entries = Object.entries(validate);\n\n          case 56:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 68;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 60;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 68);\n\n          case 60:\n            _context.next = 62;\n            return validateFunction(fieldValue);\n\n          case 62:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 65:\n            _i++;\n            _context.next = 56;\n            break;\n\n          case 68:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 72;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 72;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 72:\n            return _context.abrupt(\"return\", error);\n\n          case 73:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return isArray(error.inner) ? error.inner.reduce(function (previous, _ref12) {\n    var path = _ref12.path,\n        message = _ref12.message,\n        type = _ref12.type;\n    return Object.assign(Object.assign({}, previous), path ? previous[path] && validateAllFieldCriteria ? _defineProperty({}, path, appendErrors(path, validateAllFieldCriteria, previous, type, message)) : _defineProperty({}, path, previous[path] || Object.assign({\n      message: message,\n      type: type\n    }, validateAllFieldCriteria ? {\n      types: _defineProperty({}, type, message || true)\n    } : {})) : {});\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nfunction validateWithSchema(_x4, _x5, _x6, _x7, _x8) {\n  return _validateWithSchema.apply(this, arguments);\n}\n\nfunction _validateWithSchema() {\n  _validateWithSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!validationResolver) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", validationResolver(data, context));\n\n          case 2:\n            _context8.prev = 2;\n            _context8.next = 5;\n            return validationSchema.validate(data, {\n              abortEarly: false,\n              context: context\n            });\n\n          case 5:\n            _context8.t0 = _context8.sent;\n            _context8.t1 = {};\n            return _context8.abrupt(\"return\", {\n              values: _context8.t0,\n              errors: _context8.t1\n            });\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t2 = _context8[\"catch\"](2);\n            return _context8.abrupt(\"return\", {\n              values: {},\n              errors: transformToNestObject(parseErrorSchema(_context8.t2, validateAllFieldCriteria))\n            });\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[2, 10]]);\n  }));\n  return _validateWithSchema.apply(this, arguments);\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(value, key, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map(function (value, key) {\n    return getInnerPath(value, key);\n  }) : Object.entries(values).map(function (_ref16) {\n    var _ref17 = _slicedToArray(_ref16, 2),\n        key = _ref17[0],\n        value = _ref17[1];\n\n    return getInnerPath(value, key, true);\n  });\n};\n\nvar getPath$1 = function getPath$1(parentPath, value) {\n  return getPath(parentPath, value).flat(Infinity);\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, inputValue, isSingleField) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = function skipValidation(_ref18) {\n  var isOnChange = _ref18.isOnChange,\n      hasError = _ref18.hasError,\n      isBlurEvent = _ref18.isBlurEvent,\n      isOnSubmit = _ref18.isOnSubmit,\n      isReValidateOnSubmit = _ref18.isReValidateOnSubmit,\n      isOnBlur = _ref18.isOnBlur,\n      isReValidateOnBlur = _ref18.isReValidateOnBlur,\n      isSubmitted = _ref18.isSubmitted;\n  return isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf('['));\n};\n\nvar getFieldValueByName = function getFieldValueByName(fields, name) {\n  var results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  var isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (var i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    var dataA = referenceArray[i];\n    var dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (var key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp(\"^\".concat(searchName, \"[\\\\d+]\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return isMatchFieldArrayName(name, current);\n  });\n};\n\nvar isSelectInput = function isSelectInput(element) {\n  return element.type === \"\".concat(SELECT, \"-one\");\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nfunction useForm() {\n  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref19$mode = _ref19.mode,\n      mode = _ref19$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref19$mode,\n      _ref19$reValidateMode = _ref19.reValidateMode,\n      reValidateMode = _ref19$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref19$reValidateMode,\n      validationSchema = _ref19.validationSchema,\n      validationResolver = _ref19.validationResolver,\n      validationContext = _ref19.validationContext,\n      _ref19$defaultValues = _ref19.defaultValues,\n      defaultValues = _ref19$defaultValues === void 0 ? {} : _ref19$defaultValues,\n      _ref19$submitFocusErr = _ref19.submitFocusError,\n      submitFocusError = _ref19$submitFocusErr === void 0 ? true : _ref19$submitFocusErr,\n      validateCriteriaMode = _ref19.validateCriteriaMode;\n\n  var fieldsRef = useRef({});\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef({});\n  var fieldArrayDefaultValues = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var dirtyFieldsRef = useRef(new Set());\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultValuesRef = useRef(defaultValues);\n  var defaultValuesAtRenderRef = useRef({});\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChangeRef = useRef();\n  var resetFieldArrayFunctionRef = useRef({});\n  var validationContextRef = useRef(validationContext);\n  var fieldArrayNamesRef = useRef(new Set());\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef$current = useRef(modeChecker(mode)).current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit,\n      isOnChange = _useRef$current.isOnChange;\n  var validateAllFieldCriteria = validateCriteriaMode === 'all';\n  var isWindowUndefined = typeof window === UNDEFINED;\n  var shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\n  var isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  var isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  var readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current2.isOnBlur,\n      isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  validationContextRef.current = validationContext;\n  var reRender = useCallback(function () {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var shouldReRender = shouldRender || shouldRenderBasedOnError({\n      errors: errorsRef.current,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateSchemaOrResolver) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      var previousError = get(errorsRef.current, name);\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || (previousError ? !isSameError(previousError, error[name]) : true);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateSchemaOrResolver]);\n  var setFieldValue = useCallback(function (field, rawValue) {\n    var ref = field.ref,\n        options = field.options;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(function (_ref20) {\n        var radioRef = _ref20.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref)) {\n      if (isString(value)) {\n        ref.value = value;\n      } else {\n        ref.files = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref21) {\n        var checkboxRef = _ref21.ref;\n        return checkboxRef.checked = value.includes(checkboxRef.value);\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, [isWeb]);\n  var setDirty = useCallback(function (name) {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    var isFieldDirty = defaultValuesAtRenderRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    var previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n\n    if (isFieldArray) {\n      var fieldArrayName = getFieldArrayParentName(name);\n      isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    var isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isFieldDirty;\n\n    if (isFieldDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isFieldDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  }, []);\n  var setInternalValues = useCallback(function (name, value, parentFieldName) {\n    var isValueArray = isArray(value);\n\n    for (var key in value) {\n      var fieldName = \"\".concat(parentFieldName || name).concat(isValueArray ? \"[\".concat(key, \"]\") : \".\".concat(key));\n      var field = fieldsRef.current[fieldName];\n\n      if (isObject(value[key])) {\n        setInternalValues(name, value[key], fieldName);\n      }\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirty(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirty]);\n  var setInternalValue = useCallback(function (name, value) {\n    var field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      var output = setDirty(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value);\n    }\n  }, [setDirty, setFieldValue, setInternalValues]);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var field, _error;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              field = fieldsRef.current[name];\n\n              if (!field) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 4:\n              _error = _context2.sent;\n              shouldRenderBaseOnError(name, _error, skipReRender ? null : false);\n              return _context2.abrupt(\"return\", isEmptyObject(_error));\n\n            case 7:\n              return _context2.abrupt(\"return\", false);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref22.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = useCallback( /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n      var _yield$validateWithSc, errors, previousFormIsValid, _error2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n\n            case 2:\n              _yield$validateWithSc = _context3.sent;\n              errors = _yield$validateWithSc.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (isArray(payload)) {\n                payload.forEach(function (name) {\n                  var error = get(errors, name);\n\n                  if (error) {\n                    set(errorsRef.current, name, error);\n                  } else {\n                    unset(errorsRef.current, [name]);\n                  }\n                });\n                reRender();\n              } else {\n                _error2 = get(errors, payload);\n                shouldRenderBaseOnError(payload, _error2 ? _defineProperty({}, payload, _error2) : {}, previousFormIsValid !== isValidRef.current);\n              }\n\n              return _context3.abrupt(\"return\", isEmptyObject(errorsRef.current));\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x11) {\n      return _ref23.apply(this, arguments);\n    };\n  }(), [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  var triggerValidation = useCallback( /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = payload || Object.keys(fieldsRef.current);\n\n              if (!shouldValidateSchemaOrResolver) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", executeSchemaOrResolverValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 6;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, true);\n\n                        case 2:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x13) {\n                  return _ref26.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context5.sent;\n              reRender();\n              return _context5.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context5.next = 11;\n              return executeValidation(fields);\n\n            case 11:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x12) {\n      return _ref25.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation, reRender, shouldValidateSchemaOrResolver]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    var shouldRender = false;\n    var isArrayValue = isArray(names);\n    (isArrayValue ? names : [names]).forEach(function (name) {\n      var isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isArrayValue ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isArrayValue) {\n      reRender();\n    }\n\n    if (shouldValidate || isArrayValue && valueOrShouldValidate) {\n      triggerValidation(isArrayValue ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref27) {\n      var type, target, name, fields, errors, field, currentError, error, isBlurEvent, shouldSkipValidation, shouldUpdateDirty, shouldRender, _yield$validateWithSc2, _errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref27.type, target = _ref27.target;\n              name = target ? target.name : '';\n              fields = fieldsRef.current;\n              errors = errorsRef.current;\n              field = fields[name];\n              currentError = get(errors, name);\n\n              if (field) {\n                _context6.next = 8;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 8:\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation({\n                hasError: !!currentError,\n                isOnChange: isOnChange,\n                isBlurEvent: isBlurEvent,\n                isOnSubmit: isOnSubmit,\n                isReValidateOnSubmit: isReValidateOnSubmit,\n                isOnBlur: isOnBlur,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isSubmitted: isSubmittedRef.current\n              });\n              shouldUpdateDirty = setDirty(name);\n              shouldRender = isFieldWatched(name) || shouldUpdateDirty;\n\n              if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n                set(touchedFieldsRef.current, name, true);\n                shouldRender = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 15;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", shouldRender && reRender());\n\n            case 15:\n              if (!shouldValidateSchemaOrResolver) {\n                _context6.next = 26;\n                break;\n              }\n\n              _context6.next = 18;\n              return validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n\n            case 18:\n              _yield$validateWithSc2 = _context6.sent;\n              _errors = _yield$validateWithSc2.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(_errors);\n              error = get(_errors, name) ? _defineProperty({}, name, get(_errors, name)) : {};\n\n              if (previousFormIsValid !== isValidRef.current) {\n                shouldRender = true;\n              }\n\n              _context6.next = 29;\n              break;\n\n            case 26:\n              _context6.next = 28;\n              return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            case 28:\n              error = _context6.sent;\n\n            case 29:\n              if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n                reRender();\n              }\n\n            case 30:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x14) {\n      return _ref28.apply(this, arguments);\n    };\n  }();\n  var validateSchemaOrResolver = useCallback(function () {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(function (_ref30) {\n      var errors = _ref30.errors;\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n  var removeFieldEventListener = useCallback(function (field, forceDelete) {\n    if (handleChangeRef.current && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  }, []);\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    var name = field.ref.name;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(function (data) {\n      return data.current.delete(name);\n    });\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateSchemaOrResolver) {\n        validateSchemaOrResolver();\n      }\n    }\n  }, [reRender, shouldValidateSchemaOrResolver, validateSchemaOrResolver, removeFieldEventListener]);\n\n  function clearError(name) {\n    if (name) {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  var setInternalError = function setInternalError(_ref31) {\n    var name = _ref31.name,\n        type = _ref31.type,\n        types = _ref31.types,\n        message = _ref31.message,\n        shouldRender = _ref31.shouldRender;\n    var field = fieldsRef.current[name];\n\n    if (!isSameError(get(errorsRef.current, name), {\n      type: type,\n      message: message,\n      types: types\n    })) {\n      set(errorsRef.current, name, {\n        type: type,\n        types: types,\n        message: message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (shouldRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var message = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (isString(name)) {\n      setInternalError(Object.assign(Object.assign({\n        name: name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type: type,\n        message: message\n      }), {\n        shouldRender: true\n      }));\n    } else if (isArray(name)) {\n      name.forEach(function (error) {\n        return setInternalError(Object.assign({}, error));\n      });\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    var watchFields = watchFieldsRef.current;\n    var isDefaultValueUndefined = isUndefined(defaultValue);\n    var combinedDefaultValues = isDefaultValueUndefined ? defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined ? get(combinedDefaultValues, fieldNames) : defaultValue, true);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    var result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(name) {\n    if (fieldsRef.current) {\n      (isArray(name) ? name : [name]).forEach(function (fieldName) {\n        return removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      });\n    }\n  }\n\n  function registerFieldsRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldRefAndValidationOptions = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var field = fields[name];\n    var isEmptyDefaultValue = true;\n    var isFieldArray;\n    var defaultValue;\n\n    if (isRadioOrCheckbox ? field && isArray(field.options) && field.options.filter(Boolean).find(function (option) {\n      return value === option.ref.value && option.ref === ref;\n    }) : field && ref === field.ref) {\n      fields[name] = Object.assign(Object.assign({}, field), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeFieldEventListenerAndRef(field);\n      });\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(field && field.options || []), [{\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), {\n        mutationWatcher: mutationWatcher\n      });\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = get(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (shouldValidateSchemaOrResolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaOrResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(function (error) {\n          var previousFormIsValid = isValidRef.current;\n          isEmptyObject(error) ? validFieldsRef.current.add(name) : isValidRef.current = false;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field: isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field,\n        isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\n        handleChange: handleChangeRef.current\n      });\n    }\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return function (ref) {\n      return ref && registerFieldsRef(ref, refOrValidationOptions);\n    };\n  }\n\n  var handleSubmit = useCallback(function (callback) {\n    return /*#__PURE__*/function () {\n      var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n        var fieldErrors, fields, fieldValues, _yield$validateWithSc3, errors, values, _i2, _Object$values, field, _name, fieldError;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fields = fieldsRef.current;\n                fieldValues = getFieldsValues(fields);\n\n                if (readFormStateRef.current.isSubmitting) {\n                  isSubmittingRef.current = true;\n                  reRender();\n                }\n\n                _context7.prev = 5;\n\n                if (!shouldValidateSchemaOrResolver) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                _context7.next = 9;\n                return validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n\n              case 9:\n                _yield$validateWithSc3 = _context7.sent;\n                errors = _yield$validateWithSc3.errors;\n                values = _yield$validateWithSc3.values;\n                errorsRef.current = errors;\n                fieldErrors = errors;\n                fieldValues = values;\n                _context7.next = 29;\n                break;\n\n              case 17:\n                _i2 = 0, _Object$values = Object.values(fields);\n\n              case 18:\n                if (!(_i2 < _Object$values.length)) {\n                  _context7.next = 29;\n                  break;\n                }\n\n                field = _Object$values[_i2];\n\n                if (!field) {\n                  _context7.next = 26;\n                  break;\n                }\n\n                _name = field.ref.name;\n                _context7.next = 24;\n                return validateField(fieldsRef, validateAllFieldCriteria, field);\n\n              case 24:\n                fieldError = _context7.sent;\n\n                if (fieldError[_name]) {\n                  set(fieldErrors, _name, fieldError[_name]);\n                  validFieldsRef.current.delete(_name);\n                } else {\n                  if (fieldsWithValidationRef.current.has(_name)) {\n                    validFieldsRef.current.add(_name);\n                  }\n                }\n\n              case 26:\n                _i2++;\n                _context7.next = 18;\n                break;\n\n              case 29:\n                if (!isEmptyObject(fieldErrors)) {\n                  _context7.next = 36;\n                  break;\n                }\n\n                errorsRef.current = {};\n                reRender();\n                _context7.next = 34;\n                return callback(transformToNestObject(fieldValues), e);\n\n              case 34:\n                _context7.next = 38;\n                break;\n\n              case 36:\n                errorsRef.current = fieldErrors;\n\n                if (submitFocusError && isWeb) {\n                  focusOnErrorField(fields, fieldErrors);\n                }\n\n              case 38:\n                _context7.prev = 38;\n                isSubmittedRef.current = true;\n                isSubmittingRef.current = false;\n                submitCountRef.current = submitCountRef.current + 1;\n                reRender();\n                return _context7.finish(38);\n\n              case 44:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[5,, 38, 44]]);\n      }));\n\n      return function (_x15) {\n        return _ref32.apply(this, arguments);\n      };\n    }();\n  }, [isWeb, reRender, shouldValidateSchemaOrResolver, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  var resetRefs = function resetRefs(_ref33) {\n    var errors = _ref33.errors,\n        dirty = _ref33.dirty,\n        isSubmitted = _ref33.isSubmitted,\n        touched = _ref33.touched,\n        isValid = _ref33.isValid,\n        submitCount = _ref33.submitCount,\n        dirtyFields = _ref33.dirtyFields;\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = new Set();\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i3 = 0, _Object$values2 = Object.values(fieldsRef.current); _i3 < _Object$values2.length; _i3++) {\n        var field = _Object$values2[_i3];\n\n        if (field) {\n          var _ref34 = field.ref,\n              options = field.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref34) && isArray(options) ? options[0].ref : _ref34;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return fieldsRef.current[payload] ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref) : get(defaultValuesRef.current, payload);\n    }\n\n    var fieldValues = getFieldsValues(fieldsRef.current);\n    var outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  }\n\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateSchemaOrResolver) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  var commonProps = {\n    triggerValidation: triggerValidation,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    register: useCallback(register, [defaultValuesRef.current, defaultValuesAtRenderRef.current]),\n    unregister: useCallback(unregister, []),\n    getValues: useCallback(getValues, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState\n  };\n  var control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener: removeFieldEventListener,\n    reRender: reRender\n  }, shouldValidateSchemaOrResolver ? {\n    validateSchemaIsValid: validateSchemaOrResolver\n  } : {}), {\n    mode: {\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit\n    },\n    errorsRef: errorsRef,\n    touchedFieldsRef: touchedFieldsRef,\n    fieldsRef: fieldsRef,\n    isWatchAllRef: isWatchAllRef,\n    watchFieldsRef: watchFieldsRef,\n    resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues: fieldArrayDefaultValues,\n    validFieldsRef: validFieldsRef,\n    dirtyFieldsRef: dirtyFieldsRef,\n    fieldsWithValidationRef: fieldsWithValidationRef,\n    fieldArrayNamesRef: fieldArrayNamesRef,\n    isDirtyRef: isDirtyRef,\n    readFormStateRef: readFormStateRef,\n    defaultValuesRef: defaultValuesRef\n  }), commonProps);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    handleSubmit: handleSubmit,\n    reset: useCallback(reset, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState: formState,\n      errors: errors\n    })\n  }, children);\n}\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar appendId = function appendId(value, keyName) {\n  return Object.assign(_defineProperty({}, keyName, generateId()), isObject(value) ? value : {\n    value: value\n  });\n};\n\nvar mapIds = function mapIds(data, keyName) {\n  return (isArray(data) ? data : []).map(function (value) {\n    return appendId(value, keyName);\n  });\n};\n\nvar getSortRemovedItems = function getSortRemovedItems(indexes, removeIndexes) {\n  var updatedIndexes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var notFoundIndexes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  var _iterator = _createForOfIteratorHelper(removeIndexes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var removeIndex = _step.value;\n\n      if (indexes.indexOf(removeIndex) < 0) {\n        notFoundIndexes.push(removeIndex);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(indexes.sort()),\n      _step2;\n\n  try {\n    var _loop2 = function _loop2() {\n      var index = _step2.value;\n\n      if (removeIndexes.indexOf(index) > -1) {\n        updatedIndexes.push(-1);\n        count++;\n      } else {\n        updatedIndexes.push(index - count - (notFoundIndexes.length ? notFoundIndexes.map(function (notFoundIndex) {\n          return notFoundIndex < index;\n        }).filter(Boolean).length : 0));\n      }\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return updatedIndexes;\n};\n\nvar removeAt = function removeAt(data, index) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(data.slice(index + 1)));\n};\n\nfunction removeAtIndexes(data, index) {\n  var k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  return isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(isArray(value) ? value : [value || null]), _toConsumableArray(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return isArray(value) ? Array(value.length).fill(null) : null;\n};\n\nvar useFieldArray = function useFieldArray(_ref35) {\n  var control = _ref35.control,\n      name = _ref35.name,\n      _ref35$keyName = _ref35.keyName,\n      keyName = _ref35$keyName === void 0 ? 'id' : _ref35$keyName;\n  var methods = useFormContext();\n\n  var _ref36 = control || methods.control,\n      isWatchAllRef = _ref36.isWatchAllRef,\n      resetFieldArrayFunctionRef = _ref36.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref36.fieldArrayNamesRef,\n      reRender = _ref36.reRender,\n      fieldsRef = _ref36.fieldsRef,\n      getValues = _ref36.getValues,\n      defaultValuesRef = _ref36.defaultValuesRef,\n      removeFieldEventListener = _ref36.removeFieldEventListener,\n      errorsRef = _ref36.errorsRef,\n      dirtyFieldsRef = _ref36.dirtyFieldsRef,\n      isDirtyRef = _ref36.isDirtyRef,\n      touchedFieldsRef = _ref36.touchedFieldsRef,\n      readFormStateRef = _ref36.readFormStateRef,\n      watchFieldsRef = _ref36.watchFieldsRef,\n      validFieldsRef = _ref36.validFieldsRef,\n      fieldsWithValidationRef = _ref36.fieldsWithValidationRef,\n      fieldArrayDefaultValues = _ref36.fieldArrayDefaultValues,\n      validateSchemaIsValid = _ref36.validateSchemaIsValid;\n\n  var getDefaultValues = function getDefaultValues() {\n    return _toConsumableArray(get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, []));\n  };\n\n  var memoizedDefaultValues = useRef(getDefaultValues());\n\n  var _useState3 = useState(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setField = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDeleted = _useState6[0],\n      setIsDeleted = _useState6[1];\n\n  var allFields = useRef(fields);\n  var isNameKey = isKey(name);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  var appendValueWithKey = function appendValueWithKey(values) {\n    return values.map(function (value) {\n      return appendId(value, keyName);\n    });\n  };\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid(_defineProperty({}, name, fieldsValues));\n    }\n  };\n\n  var modifyDirtyFields = function modifyDirtyFields() {\n    var _ref37 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        shouldRender = _ref37.shouldRender,\n        isRemove = _ref37.isRemove,\n        isPrePend = _ref37.isPrePend,\n        index = _ref37.index,\n        _ref37$value = _ref37.value,\n        value = _ref37$value === void 0 ? {} : _ref37$value;\n\n    var render = shouldRender;\n    var values = isArray(value) ? value : [value];\n\n    if (readFormStateRef.current.dirty) {\n      var dirtyFieldIndexesAndValues = {};\n\n      if (isPrePend || isRemove) {\n        var _iterator3 = _createForOfIteratorHelper(_toConsumableArray(dirtyFieldsRef.current).sort()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var dirtyField = _step3.value;\n\n            if (isMatchFieldArrayName(dirtyField, name)) {\n              var matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\n\n              if (matchedIndexes) {\n                var matchIndex = +matchedIndexes[matchedIndexes.length - 1];\n\n                if (dirtyFieldIndexesAndValues[matchIndex]) {\n                  dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\n                } else {\n                  dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\n                }\n              }\n\n              dirtyFieldsRef.current.delete(dirtyField);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (!isUndefined(index) || isPrePend) {\n        var updatedDirtyFieldIndexes = isUndefined(index) ? [] : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map(function (i) {\n          return +i;\n        }), isArray(index) ? index : [index]);\n        Object.values(dirtyFieldIndexesAndValues).forEach(function (values, index) {\n          var updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\n\n          if (updateIndex > -1) {\n            var _iterator4 = _createForOfIteratorHelper(values),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _value = _step4.value;\n\n                var _matchedIndexes = _value.match(REGEX_ARRAY_FIELD_INDEX);\n\n                if (_matchedIndexes) {\n                  dirtyFieldsRef.current.add(_value.replace(/[\\d+]([^[\\d+]+)$/, \"\".concat(isPrePend ? +_matchedIndexes[_matchedIndexes.length - 1] + values.length : updateIndex, \"$1\")));\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        });\n      }\n\n      if (!isRemove) {\n        values.forEach(function (fieldValue, index) {\n          return Object.keys(fieldValue).forEach(function (key) {\n            return dirtyFieldsRef.current.add(\"\".concat(name, \"[\").concat(isPrePend ? index : allFields.current.length + index, \"].\").concat(key));\n          });\n        });\n        isDirtyRef.current = true;\n      }\n\n      render = true;\n    }\n\n    if (render && !isWatchAllRef.current) {\n      reRender();\n    }\n  };\n\n  var resetFields = function resetFields(flagOrFields) {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\n    }\n\n    for (var key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  var mapCurrentFieldsValueWithState = function mapCurrentFieldsValueWithState() {\n    var currentFieldsValue = get(getValues({\n      nest: true\n    }), name);\n\n    if (isArray(currentFieldsValue)) {\n      for (var i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  var append = function append(value) {\n    setFieldAndValidState([].concat(_toConsumableArray(allFields.current), _toConsumableArray(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])));\n    modifyDirtyFields({\n      value: value\n    });\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldRender = false;\n    resetFields();\n    setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\n      shouldRender = true;\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isPrePend: true,\n      value: value\n    });\n  };\n\n  var remove = function remove(index) {\n    var shouldRender = false;\n    var isIndexUndefined = isUndefined(index);\n\n    if (!isIndexUndefined) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      var fieldIndex = -1;\n      var isFound = false;\n\n      var _isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        var isLast = fieldIndex === fields.length - 1;\n        var isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || _isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (var key in fields[fieldIndex]) {\n          var currentFieldName = \"\".concat(name, \"[\").concat(fieldIndex, \"].\").concat(key);\n\n          if (isCurrentIndex || isLast || _isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            var previousFieldName = \"\".concat(name, \"[\").concat(fieldIndex - 1, \"].\").concat(key);\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    modifyDirtyFields({\n      shouldRender: shouldRender,\n      isRemove: true,\n      index: index\n    });\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    mapCurrentFieldsValueWithState();\n    resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  var swap = function swap(indexA, indexB) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  var move = function move(from, to) {\n    mapCurrentFieldsValueWithState();\n    var fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState(_toConsumableArray(allFields.current));\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  var reset = function reset() {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(function () {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect(function () {\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      var _iterator5 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var watchField = _step5.value;\n\n          if (watchField.startsWith(name)) {\n            reRender();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\n  useEffect(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nvar getInputValue = function getInputValue(event, isCheckboxInput) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nvar Controller = function Controller(_a) {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      onFocus = _a.onFocus,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  var methods = useFormContext();\n\n  var _ref38 = control || methods.control,\n      defaultValuesRef = _ref38.defaultValuesRef,\n      setValue = _ref38.setValue,\n      register = _ref38.register,\n      unregister = _ref38.unregister,\n      errorsRef = _ref38.errorsRef,\n      removeFieldEventListener = _ref38.removeFieldEventListener,\n      triggerValidation = _ref38.triggerValidation,\n      _ref38$mode = _ref38.mode,\n      isOnSubmit = _ref38$mode.isOnSubmit,\n      isOnBlur = _ref38$mode.isOnBlur,\n      isOnChange = _ref38$mode.isOnChange,\n      _ref38$reValidateMode = _ref38.reValidateMode,\n      isReValidateOnBlur = _ref38$reValidateMode.isReValidateOnBlur,\n      isReValidateOnSubmit = _ref38$reValidateMode.isReValidateOnSubmit,\n      isSubmitted = _ref38.formState.isSubmitted,\n      touchedFieldsRef = _ref38.touchedFieldsRef,\n      readFormStateRef = _ref38.readFormStateRef,\n      reRender = _ref38.reRender,\n      fieldsRef = _ref38.fieldsRef,\n      fieldArrayNamesRef = _ref38.fieldArrayNamesRef;\n\n  var _useState7 = useState(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue),\n      _useState8 = _slicedToArray(_useState7, 2),\n      value = _useState8[0],\n      setInputStateValue = _useState8[1];\n\n  var valueRef = useRef(value);\n  var isCheckboxInput = isBoolean(value);\n  var shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  var rulesRef = useRef(rules);\n  var onFocusRef = useRef(onFocus);\n  var isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  rulesRef.current = rules;\n\n  var shouldValidate = function shouldValidate() {\n    return !skipValidation({\n      hasError: !!get(errorsRef.current, name),\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnSubmit: isReValidateOnSubmit,\n      isSubmitted: isSubmitted\n    });\n  };\n\n  var commonTask = function commonTask(event) {\n    var data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  var eventWrapper = function eventWrapper(event) {\n    return function () {\n      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n        arg[_key] = arguments[_key];\n      }\n\n      return setValue(name, commonTask(event(arg)), shouldValidate());\n    };\n  };\n\n  var handleChange = function handleChange(event) {\n    var data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  var registerField = useCallback(function () {\n    if (!isNotFieldArray) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name: name,\n      focus: onFocusRef.current\n    }, VALUE, {\n      set: function set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n      get: function get() {\n        return valueRef.current;\n      }\n    }), rulesRef.current);\n  }, [isNotFieldArray, fieldsRef, rulesRef, name, onFocusRef, register, removeFieldEventListener]);\n  useEffect(function () {\n    return function () {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    };\n  }, [unregister, name, fieldArrayNamesRef]);\n  useEffect(function () {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!fieldsRef.current[name]) {\n      registerField();\n\n      if (isNotFieldArray) {\n        setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n      }\n    }\n  });\n  var props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name: name\n  }, rest), onChange ? _defineProperty({}, onChangeName, eventWrapper(onChange)) : _defineProperty({}, onChangeName, handleChange)), _defineProperty({}, onBlurName, function () {\n    if (onBlur) {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      onBlur(args);\n    }\n\n    if (readFormStateRef.current.touched && !get(touchedFieldsRef.current, name)) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldReValidateOnBlur) {\n      triggerValidation(name);\n    }\n  })), _defineProperty({}, valueName || (isCheckboxInput ? 'checked' : VALUE), value));\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nvar ErrorMessage = function ErrorMessage(_a) {\n  var InnerComponent = _a.as,\n      errors = _a.errors,\n      name = _a.name,\n      message = _a.message,\n      children = _a.children,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  var methods = useFormContext();\n  var error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  var messageFromRegister = error.message,\n      types = error.types;\n  var props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["C:/Users/Akshat/Documents/Imperial/personal/conquer2/frontend/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isValidElement","useRef","useState","useCallback","useEffect","createContext","useContext","createElement","cloneElement","Fragment","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","SELECT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","REGEX_ARRAY_FIELD_INDEX","attachEventListeners","ref","field","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","isUndefined","val","undefined","get","obj","defaultValue","split","filter","Boolean","focusOnErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","unset","paths","forEach","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","option","disconnect","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","startsWith","find","nest","compareObject","objectA","objectB","objectAKeys","objectBKeys","every","isSameError","error","types","message","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateSchemaOrResolver","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isFieldArray","previousDirtyFieldsLength","size","fieldArrayName","isDirtyChanged","setInternalValues","parentFieldName","isValueArray","setInternalValue","executeValidation","skipReRender","executeSchemaOrResolverValidation","payload","previousFormIsValid","triggerValidation","Promise","all","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isArrayValue","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","validateSchemaOrResolver","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","setError","watch","fieldNames","isDefaultValueUndefined","combinedDefaultValues","unregister","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","process","env","NODE_ENV","formState","commonProps","prop","control","validateSchemaIsValid","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","getSortRemovedItems","indexes","removeIndexes","updatedIndexes","count","notFoundIndexes","removeIndex","sort","notFoundIndex","removeAt","removeAtIndexes","removeArrayAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prepend","insert","fillEmptyArray","fill","useFieldArray","methods","getDefaultValues","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","modifyDirtyFields","isRemove","isPrePend","dirtyFieldIndexesAndValues","dirtyField","matchedIndexes","matchIndex","updatedDirtyFieldIndexes","updateIndex","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend$1","remove","isIndexUndefined","fieldIndex","isFound","isLast","isCurrentIndex","currentFieldName","previousFieldName","insert$1","swap","move","pop","watchField","resetFunctions","fieldArrayNames","getInputValue","event","isCheckboxInput","Controller","rules","InnerComponent","as","onChangeName","onBlurName","valueName","onFocus","rest","setInputStateValue","valueRef","shouldReValidateOnBlur","rulesRef","onFocusRef","isNotFieldArray","commonTask","eventWrapper","arg","registerField","defineProperty","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwDC,SAAxD,EAAmEC,aAAnE,EAAkFC,UAAlF,EAA8FC,aAA9F,EAA6GC,YAA7G,EAA2HC,QAA3H,QAA2I,OAA3I;;AAEA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD;AAAA,SAAWA,KAAK,IAAI,IAApB;AAAA,CAAxB;;AAEA,IAAIC,OAAO,GAAG,SAAVA,OAAU,CAACD,KAAD;AAAA,SAAWE,KAAK,CAACD,OAAN,CAAcD,KAAd,CAAX;AAAA,CAAd;;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACH,KAAD;AAAA,SAAW,OAAOA,KAAP,KAAiB,QAA5B;AAAA,CAArB;;AACA,IAAII,QAAQ,GAAG,SAAXA,QAAW,CAACJ,KAAD;AAAA,SAAW,CAACD,iBAAiB,CAACC,KAAD,CAAlB,IAA6B,CAACC,OAAO,CAACD,KAAD,CAArC,IAAgDG,YAAY,CAACH,KAAD,CAAvE;AAAA,CAAf;;AAEA,IAAIK,aAAa,GAAG,SAAhBA,aAAgB,CAACL,KAAD;AAAA,SAAWI,QAAQ,CAACJ,KAAD,CAAR,IAAmBA,KAAK,CAACM,QAAN,KAAmBC,IAAI,CAACC,YAAtD;AAAA,CAApB;;AAEA,IAAMC,eAAe,GAAG;AACpBC,EAAAA,MAAM,EAAE,QADY;AAEpBC,EAAAA,QAAQ,EAAE,UAFU;AAGpBC,EAAAA,QAAQ,EAAE;AAHU,CAAxB;AAKA,IAAMC,KAAK,GAAG,OAAd;AACA,IAAMC,SAAS,GAAG,WAAlB;AACA,IAAMC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE,MADK;AAEXC,EAAAA,MAAM,EAAE,QAFG;AAGXC,EAAAA,KAAK,EAAE;AAHI,CAAf;AAKA,IAAMC,MAAM,GAAG,QAAf;AACA,IAAMC,sBAAsB,GAAG;AAC3BC,EAAAA,GAAG,EAAE,KADsB;AAE3BC,EAAAA,GAAG,EAAE,KAFsB;AAG3BC,EAAAA,SAAS,EAAE,WAHgB;AAI3BC,EAAAA,SAAS,EAAE,WAJgB;AAK3BC,EAAAA,OAAO,EAAE,SALkB;AAM3BC,EAAAA,QAAQ,EAAE,UANiB;AAO3BC,EAAAA,QAAQ,EAAE;AAPiB,CAA/B;AASA,IAAMC,kBAAkB,GAAG,kDAA3B;AACA,IAAMC,mBAAmB,GAAG,OAA5B;AACA,IAAMC,eAAe,GAAG,kGAAxB;AACA,IAAMC,iBAAiB,GAAG,UAA1B;AACA,IAAMC,uBAAuB,GAAG,QAAhC;;AAEA,SAASC,oBAAT,OAAoF;AAAA,MAA3CC,GAA2C,QAApDC,KAAoD,CAA3CD,GAA2C;AAAA,MAApCE,YAAoC,QAApCA,YAAoC;AAAA,MAAtBC,iBAAsB,QAAtBA,iBAAsB;;AAChF,MAAIhC,aAAa,CAAC6B,GAAD,CAAb,IAAsBE,YAA1B,EAAwC;AACpCF,IAAAA,GAAG,CAACI,gBAAJ,CAAqBD,iBAAiB,GAAGtB,MAAM,CAACE,MAAV,GAAmBF,MAAM,CAACG,KAAhE,EAAuEkB,YAAvE;AACAF,IAAAA,GAAG,CAACI,gBAAJ,CAAqBvB,MAAM,CAACC,IAA5B,EAAkCoB,YAAlC;AACH;AACJ;;AAED,IAAIG,KAAK,GAAG,SAARA,KAAQ,CAACvC,KAAD;AAAA,SAAW,CAACC,OAAO,CAACD,KAAD,CAAR,KAClB6B,mBAAmB,CAACW,IAApB,CAAyBxC,KAAzB,KAAmC,CAAC4B,kBAAkB,CAACY,IAAnB,CAAwBxC,KAAxB,CADlB,CAAX;AAAA,CAAZ;;AAGA,IAAIyC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC3B,MAAMC,MAAM,GAAG,EAAf;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAed,eAAf,EAAgC,UAACe,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuBL,MAAvB,EAAkC;AAC9DC,IAAAA,MAAM,CAACK,IAAP,CAAYD,KAAK,GAAGL,MAAM,CAACE,OAAP,CAAeb,iBAAf,EAAkC,IAAlC,CAAH,GAA6Ce,MAAM,IAAID,KAAxE;AACH,GAFD;AAGA,SAAOF,MAAP;AACH,CAND;;AAQA,SAASM,GAAT,CAAaC,MAAb,EAAqBC,IAArB,EAA2BnD,KAA3B,EAAkC;AAC9B,MAAIoD,KAAK,GAAG,CAAC,CAAb;AACA,MAAMC,QAAQ,GAAGd,KAAK,CAACY,IAAD,CAAL,GAAc,CAACA,IAAD,CAAd,GAAuBV,YAAY,CAACU,IAAD,CAApD;AACA,MAAMG,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AACA,MAAMC,SAAS,GAAGD,MAAM,GAAG,CAA3B;;AACA,SAAO,EAAEF,KAAF,GAAUE,MAAjB,EAAyB;AACrB,QAAME,GAAG,GAAGH,QAAQ,CAACD,KAAD,CAApB;AACA,QAAIK,QAAQ,GAAGzD,KAAf;;AACA,QAAIoD,KAAK,KAAKG,SAAd,EAAyB;AACrB,UAAMG,QAAQ,GAAGR,MAAM,CAACM,GAAD,CAAvB;AACAC,MAAAA,QAAQ,GACJrD,QAAQ,CAACsD,QAAD,CAAR,IAAsBzD,OAAO,CAACyD,QAAD,CAA7B,GACMA,QADN,GAEM,CAACC,KAAK,CAAC,CAACN,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAV,CAAN,GACI,EADJ,GAEI,EALd;AAMH;;AACDF,IAAAA,MAAM,CAACM,GAAD,CAAN,GAAcC,QAAd;AACAP,IAAAA,MAAM,GAAGA,MAAM,CAACM,GAAD,CAAf;AACH;;AACD,SAAON,MAAP;AACH;;AAED,IAAIU,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,IAAD;AAAA,SAAUC,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqBG,MAArB,CAA4B,UAACC,QAAD,SAA4B;AAAA;AAAA,QAAhBT,GAAgB;AAAA,QAAXxD,KAAW;;AAC1F,QAAI,CAACuC,KAAK,CAACiB,GAAD,CAAV,EAAiB;AACbP,MAAAA,GAAG,CAACgB,QAAD,EAAWT,GAAX,EAAgBxD,KAAhB,CAAH;AACA,aAAOiE,QAAP;AACH;;AACD,WAAOH,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,sBAA8CT,GAA9C,EAAoDxD,KAApD,EAAP;AACH,GANqC,EAMnC,EANmC,CAAV;AAAA,CAA5B;;AAQA,IAAImE,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;AAAA,SAASA,GAAG,KAAKC,SAAjB;AAAA,CAAlB;;AAEA,IAAIC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAMpB,IAAN,EAAYqB,YAAZ,EAA6B;AACnC,MAAM7B,MAAM,GAAGQ,IAAI,CACdsB,KADU,CACJ,WADI,EAEVC,MAFU,CAEHC,OAFG,EAGVX,MAHU,CAGH,UAACrB,MAAD,EAASa,GAAT;AAAA,WAAkBzD,iBAAiB,CAAC4C,MAAD,CAAjB,GAA4BA,MAA5B,GAAqCA,MAAM,CAACa,GAAD,CAA7D;AAAA,GAHG,EAGkEe,GAHlE,CAAf;AAIA,SAAOJ,WAAW,CAACxB,MAAD,CAAX,IAAuBA,MAAM,KAAK4B,GAAlC,GACDJ,WAAW,CAACI,GAAG,CAACpB,IAAD,CAAJ,CAAX,GACIqB,YADJ,GAEID,GAAG,CAACpB,IAAD,CAHN,GAIDR,MAJN;AAKH,CAVD;;AAYA,IAAIiC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAASC,WAAT,EAAyB;AAC7C,OAAK,IAAMtB,GAAX,IAAkBqB,MAAlB,EAA0B;AACtB,QAAIP,GAAG,CAACQ,WAAD,EAActB,GAAd,CAAP,EAA2B;AACvB,UAAMrB,KAAK,GAAG0C,MAAM,CAACrB,GAAD,CAApB;;AACA,UAAIrB,KAAJ,EAAW;AACP,YAAIA,KAAK,CAACD,GAAN,CAAU6C,KAAd,EAAqB;AACjB5C,UAAAA,KAAK,CAACD,GAAN,CAAU6C,KAAV;AACA;AACH,SAHD,MAIK,IAAI5C,KAAK,CAAC6C,OAAV,EAAmB;AACpB7C,UAAAA,KAAK,CAAC6C,OAAN,CAAc,CAAd,EAAiB9C,GAAjB,CAAqB6C,KAArB;AACA;AACH;AACJ;AACJ;AACJ;AACJ,CAhBD;;AAkBA,IAAIE,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAC/C,GAAD,EAAMgD,uBAAN,EAAkC;AAC5D,MAAI7E,aAAa,CAAC6B,GAAD,CAAb,IAAsBA,GAAG,CAACiD,mBAA9B,EAAmD;AAC/CjD,IAAAA,GAAG,CAACiD,mBAAJ,CAAwBpE,MAAM,CAACG,KAA/B,EAAsCgE,uBAAtC;AACAhD,IAAAA,GAAG,CAACiD,mBAAJ,CAAwBpE,MAAM,CAACE,MAA/B,EAAuCiE,uBAAvC;AACAhD,IAAAA,GAAG,CAACiD,mBAAJ,CAAwBpE,MAAM,CAACC,IAA/B,EAAqCkE,uBAArC;AACH;AACJ,CAND;;AAQA,IAAIE,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,SAAaA,OAAO,CAACC,IAAR,KAAiB,OAA9B;AAAA,CAAnB;;AAEA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,OAAD;AAAA,SAAaA,OAAO,CAACC,IAAR,KAAiB,UAA9B;AAAA,CAAtB;;AAEA,SAASE,UAAT,CAAoBH,OAApB,EAA6B;AACzB,MAAI,CAACA,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AACD,MAAI,EAAEA,OAAO,YAAYI,WAArB,KACAJ,OAAO,CAAC/E,QAAR,KAAqBC,IAAI,CAACmF,aAD9B,EAC6C;AACzC,WAAO,KAAP;AACH;;AACD,SAAOF,UAAU,CAACH,OAAO,CAACM,UAAT,CAAjB;AACH;;AAED,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAAC5F,KAAD;AAAA,SAAWI,QAAQ,CAACJ,KAAD,CAAR,IAAmB,CAAC8D,MAAM,CAAC+B,IAAP,CAAY7F,KAAZ,EAAmBsD,MAAlD;AAAA,CAApB;;AAEA,SAASwC,QAAT,CAAkB9F,KAAlB,EAAyB;AACrB,SAAOC,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyByC,YAAY,CAACzC,KAAD,CAA5C;AACH;;AACD,SAAS+F,OAAT,CAAiB7C,MAAjB,EAAyBC,IAAzB,EAA+B;AAC3B,MAAM6C,UAAU,GAAGzD,KAAK,CAACY,IAAD,CAAL,GAAc,CAACA,IAAD,CAAd,GAAuB2C,QAAQ,CAAC3C,IAAD,CAAlD;AACA,MAAMG,MAAM,GAAGH,IAAI,CAACG,MAApB;AACA,MAAIF,KAAK,GAAG,CAAZ;;AACA,SAAOA,KAAK,GAAGE,MAAf,EAAuB;AACnBJ,IAAAA,MAAM,GAAGiB,WAAW,CAACjB,MAAD,CAAX,GAAsBE,KAAK,EAA3B,GAAgCF,MAAM,CAAC8C,UAAU,CAAC5C,KAAK,EAAN,CAAX,CAA/C;AACH;;AACD,SAAOA,KAAK,IAAIE,MAAT,GAAkBJ,MAAlB,GAA2BmB,SAAlC;AACH;;AACD,SAAS4B,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AAClC,MAAIhD,KAAK,GAAG,CAAC,CAAb;AACA,MAAIE,MAAM,GAAG4C,KAAK,CAAC5C,MAAnB;;AACA,MAAI6C,KAAK,GAAG,CAAZ,EAAe;AACXA,IAAAA,KAAK,GAAG,CAACA,KAAD,GAAS7C,MAAT,GAAkB,CAAlB,GAAsBA,MAAM,GAAG6C,KAAvC;AACH;;AACDC,EAAAA,GAAG,GAAGA,GAAG,GAAG9C,MAAN,GAAeA,MAAf,GAAwB8C,GAA9B;;AACA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACTA,IAAAA,GAAG,IAAI9C,MAAP;AACH;;AACDA,EAAAA,MAAM,GAAG6C,KAAK,GAAGC,GAAR,GAAc,CAAd,GAAkBA,GAAG,GAAGD,KAAjC;AACA,MAAMxD,MAAM,GAAGzC,KAAK,CAACoD,MAAD,CAApB;;AACA,SAAO,EAAEF,KAAF,GAAUE,MAAjB,EAAyB;AACrBX,IAAAA,MAAM,CAACS,KAAD,CAAN,GAAgB8C,KAAK,CAAC9C,KAAK,GAAG+C,KAAT,CAArB;AACH;;AACD,SAAOxD,MAAP;AACH;;AACD,SAAS0D,MAAT,CAAgBnD,MAAhB,EAAwBC,IAAxB,EAA8B;AAC1B,SAAOA,IAAI,CAACG,MAAL,IAAe,CAAf,GAAmBJ,MAAnB,GAA4B6C,OAAO,CAAC7C,MAAD,EAAS+C,SAAS,CAAC9C,IAAD,EAAO,CAAP,EAAU,CAAC,CAAX,CAAlB,CAA1C;AACH;;AACD,SAASmD,SAAT,CAAmBpD,MAAnB,EAA2BC,IAA3B,EAAiC;AAC7B,MAAM6C,UAAU,GAAGzD,KAAK,CAACY,IAAD,CAAL,GAAc,CAACA,IAAD,CAAd,GAAuB2C,QAAQ,CAAC3C,IAAD,CAAlD;AACA,MAAMoD,WAAW,GAAGF,MAAM,CAACnD,MAAD,EAAS8C,UAAT,CAA1B;AACA,MAAMxC,GAAG,GAAGwC,UAAU,CAACA,UAAU,CAAC1C,MAAX,GAAoB,CAArB,CAAtB;AACA,MAAMX,MAAM,GAAG,EAAE4D,WAAW,IAAI,IAAjB,KAA0B,OAAOA,WAAW,CAAC/C,GAAD,CAA3D;AACA,MAAIgD,cAAc,GAAGnC,SAArB;;AACA,OAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,EAAwBpD,MAA5C,EAAoDmD,CAAC,EAArD,EAAyD;AACrD,QAAIrD,KAAK,GAAG,CAAC,CAAb;AACA,QAAIuD,SAAS,GAAGtC,SAAhB;AACA,QAAMuC,YAAY,GAAGZ,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoB,EAAED,CAAC,GAAG,CAAN,CAApB,CAArB;AACA,QAAMI,kBAAkB,GAAGD,YAAY,CAACtD,MAAb,GAAsB,CAAjD;;AACA,QAAImD,CAAC,GAAG,CAAR,EAAW;AACPD,MAAAA,cAAc,GAAGtD,MAAjB;AACH;;AACD,WAAO,EAAEE,KAAF,GAAUwD,YAAY,CAACtD,MAA9B,EAAsC;AAClC,UAAMwD,IAAI,GAAGF,YAAY,CAACxD,KAAD,CAAzB;AACAuD,MAAAA,SAAS,GAAGA,SAAS,GAAGA,SAAS,CAACG,IAAD,CAAZ,GAAqB5D,MAAM,CAAC4D,IAAD,CAAhD;;AACA,UAAID,kBAAkB,KAAKzD,KAA3B,EAAkC;AAC9B,YAAKhD,QAAQ,CAACuG,SAAD,CAAR,IAAuBf,aAAa,CAACe,SAAD,CAArC,IACC1G,OAAO,CAAC0G,SAAD,CAAP,IACG,CAACA,SAAS,CAACjC,MAAV,CAAiB,UAACb,IAAD;AAAA,iBAAUzD,QAAQ,CAACyD,IAAD,CAAR,IAAkB,CAAC+B,aAAa,CAAC/B,IAAD,CAA1C;AAAA,SAAjB,EACIP,MAHb,EAGsB;AAClBkD,UAAAA,cAAc,GAAG,OAAOA,cAAc,CAACM,IAAD,CAAxB,GAAiC,OAAO5D,MAAM,CAAC4D,IAAD,CAA5D;AACH;AACJ;;AACDN,MAAAA,cAAc,GAAGG,SAAjB;AACH;AACJ;;AACD,SAAOhE,MAAP;AACH;;AACD,SAASoE,KAAT,CAAe7D,MAAf,EAAuB8D,KAAvB,EAA8B;AAC1BA,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAC9D,IAAD,EAAU;AACpBmD,IAAAA,SAAS,CAACpD,MAAD,EAASC,IAAT,CAAT;AACH,GAFD;AAGA,SAAOD,MAAP;AACH;;AAED,IAAMgE,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAajF,GAAb;AAAA,SAAqBiF,UAAU,IAAIA,UAAU,CAACjF,GAAX,KAAmBA,GAAtD;AAAA,CAAlB;;AACA,SAASkF,iCAAT,CAA2CvC,MAA3C,EAAmDzC,YAAnD,EAAiED,KAAjE,EAAwEkF,WAAxE,EAAqF;AAAA,MACzEnF,GADyE,GAC1BC,KAD0B,CACzED,GADyE;AAAA,mBAC1BC,KAD0B,CACpED,GADoE;AAAA,MAC7DoF,IAD6D,cAC7DA,IAD6D;AAAA,MACvDhC,IADuD,cACvDA,IADuD;AAAA,MAC/CiC,eAD+C,GAC1BpF,KAD0B,CAC/CoF,eAD+C;AAEjF,MAAMJ,UAAU,GAAGtC,MAAM,CAACyC,IAAD,CAAzB;;AACA,MAAI,CAAChC,IAAL,EAAW;AACP,WAAOT,MAAM,CAACyC,IAAD,CAAb;AACA;AACH;;AACD,MAAI,CAAClC,YAAY,CAAClD,GAAD,CAAZ,IAAqBqD,eAAe,CAACrD,GAAD,CAArC,KAA+CiF,UAAnD,EAA+D;AAAA,QACnDnC,OADmD,GACvCmC,UADuC,CACnDnC,OADmD;;AAE3D,QAAI/E,OAAO,CAAC+E,OAAD,CAAP,IAAoBA,OAAO,CAAC1B,MAAhC,EAAwC;AACpC0B,MAAAA,OAAO,CAACN,MAAR,CAAeC,OAAf,EAAwBsC,OAAxB,CAAgC,UAACO,MAAD,EAASpE,KAAT,EAAmB;AAAA,YACvClB,GADuC,GACdsF,MADc,CACvCtF,GADuC;AAAA,YAClCqF,eADkC,GACdC,MADc,CAClCD,eADkC;;AAE/C,YAAKrF,GAAG,IAAIsD,UAAU,CAACtD,GAAD,CAAjB,IAA0BgF,SAAS,CAACM,MAAD,EAAStF,GAAT,CAApC,IAAsDmF,WAA1D,EAAuE;AACnEpC,UAAAA,uBAAuB,CAAC/C,GAAD,EAAME,YAAN,CAAvB;;AACA,cAAImF,eAAJ,EAAqB;AACjBA,YAAAA,eAAe,CAACE,UAAhB;AACH;;AACDV,UAAAA,KAAK,CAAC/B,OAAD,EAAU,YAAK5B,KAAL,OAAV,CAAL;AACH;AACJ,OATD;;AAUA,UAAI4B,OAAO,IAAI,CAACA,OAAO,CAACN,MAAR,CAAeC,OAAf,EAAwBrB,MAAxC,EAAgD;AAC5C,eAAOuB,MAAM,CAACyC,IAAD,CAAb;AACH;AACJ,KAdD,MAeK;AACD,aAAOzC,MAAM,CAACyC,IAAD,CAAb;AACH;AACJ,GApBD,MAqBK,IAAK9B,UAAU,CAACtD,GAAD,CAAV,IAAmBgF,SAAS,CAACC,UAAD,EAAajF,GAAb,CAA7B,IAAmDmF,WAAvD,EAAoE;AACrEpC,IAAAA,uBAAuB,CAAC/C,GAAD,EAAME,YAAN,CAAvB;;AACA,QAAImF,eAAJ,EAAqB;AACjBA,MAAAA,eAAe,CAACE,UAAhB;AACH;;AACD,WAAO5C,MAAM,CAACyC,IAAD,CAAb;AACH;AACJ;;AAED,IAAMI,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,KADS;AAElB3H,EAAAA,KAAK,EAAE;AAFW,CAAtB;;AAIA,IAAI4H,aAAa,GAAG,SAAhBA,aAAgB,CAAC5C,OAAD;AAAA,SAAa/E,OAAO,CAAC+E,OAAD,CAAP,GAC3BA,OAAO,CAAChB,MAAR,CAAe,UAACC,QAAD,EAAWuD,MAAX;AAAA,WAAsBA,MAAM,IAAIA,MAAM,CAACtF,GAAP,CAAW2F,OAArB,GACjC;AACEF,MAAAA,OAAO,EAAE,IADX;AAEE3H,MAAAA,KAAK,EAAEwH,MAAM,CAACtF,GAAP,CAAWlC;AAFpB,KADiC,GAKjCiE,QALW;AAAA,GAAf,EAKcyD,aALd,CAD2B,GAO3BA,aAPc;AAAA,CAApB;;AASA,IAAII,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC9C,OAAD;AAAA,SAAa,mBAAIA,OAAJ,EACrCN,MADqC,CAC9B;AAAA,QAAGqD,QAAH,SAAGA,QAAH;AAAA,WAAkBA,QAAlB;AAAA,GAD8B,EAErCC,GAFqC,CAEjC;AAAA,QAAGhI,KAAH,SAAGA,KAAH;AAAA,WAAeA,KAAf;AAAA,GAFiC,CAAb;AAAA,CAA7B;;AAIA,IAAIiI,WAAW,GAAG,SAAdA,WAAc,CAAC5C,OAAD;AAAA,SAAaA,OAAO,CAACC,IAAR,KAAiB,MAA9B;AAAA,CAAlB;;AAEA,IAAI4C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC7C,OAAD;AAAA,SAAaA,OAAO,CAACC,IAAR,eAAoBnE,MAApB,cAAb;AAAA,CAAvB;;AAEA,IAAIgH,aAAa,GAAG,SAAhBA,aAAgB,CAACnI,KAAD;AAAA,SAAWA,KAAK,KAAK,EAArB;AAAA,CAApB;;AAEA,IAAMoI,aAAa,GAAG;AAClBpI,EAAAA,KAAK,EAAE,KADW;AAElB2H,EAAAA,OAAO,EAAE;AAFS,CAAtB;AAIA,IAAMU,WAAW,GAAG;AAAErI,EAAAA,KAAK,EAAE,IAAT;AAAe2H,EAAAA,OAAO,EAAE;AAAxB,CAApB;;AACA,IAAIW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACtD,OAAD,EAAa;AAChC,MAAI/E,OAAO,CAAC+E,OAAD,CAAX,EAAsB;AAClB,QAAIA,OAAO,CAAC1B,MAAR,GAAiB,CAArB,EAAwB;AACpB,UAAMiF,MAAM,GAAGvD,OAAO,CACjBN,MADU,CACH,UAAC8C,MAAD;AAAA,eAAYA,MAAM,IAAIA,MAAM,CAACtF,GAAP,CAAW2F,OAAjC;AAAA,OADG,EAEVG,GAFU,CAEN;AAAA,YAAUhI,KAAV,SAAGkC,GAAH,CAAUlC,KAAV;AAAA,eAAwBA,KAAxB;AAAA,OAFM,CAAf;AAGA,aAAO;AAAEA,QAAAA,KAAK,EAAEuI,MAAT;AAAiBZ,QAAAA,OAAO,EAAE,CAAC,CAACY,MAAM,CAACjF;AAAnC,OAAP;AACH;;AANiB,yBAOqB0B,OAAO,CAAC,CAAD,CAAP,CAAW9C,GAPhC;AAAA,QAOV2F,OAPU,kBAOVA,OAPU;AAAA,QAOD7H,KAPC,kBAODA,KAPC;AAAA,QAOMwI,UAPN,kBAOMA,UAPN;AAQlB,WAAOX,OAAO,GACRW,UAAU,IAAI,CAACrE,WAAW,CAACqE,UAAU,CAACxI,KAAZ,CAA1B,GACImE,WAAW,CAACnE,KAAD,CAAX,IAAsBmI,aAAa,CAACnI,KAAD,CAAnC,GACIqI,WADJ,GAEI;AAAErI,MAAAA,KAAK,EAAEA,KAAT;AAAgB2H,MAAAA,OAAO,EAAE;AAAzB,KAHR,GAIIU,WALI,GAMRD,aANN;AAOH;;AACD,SAAOA,aAAP;AACH,CAlBD;;AAoBA,SAASK,aAAT,CAAuB5D,MAAvB,EAA+B3C,GAA/B,EAAoC;AAAA,MACxBoF,IADwB,GACRpF,GADQ,CACxBoF,IADwB;AAAA,MAClBtH,KADkB,GACRkC,GADQ,CAClBlC,KADkB;AAEhC,MAAMmC,KAAK,GAAG0C,MAAM,CAACyC,IAAD,CAApB;;AACA,MAAIW,WAAW,CAAC/F,GAAD,CAAf,EAAsB;AAClB,WAAOA,GAAG,CAACwG,KAAX;AACH;;AACD,MAAItD,YAAY,CAAClD,GAAD,CAAhB,EAAuB;AACnB,WAAOC,KAAK,GAAGyF,aAAa,CAACzF,KAAK,CAAC6C,OAAP,CAAb,CAA6BhF,KAAhC,GAAwC,EAApD;AACH;;AACD,MAAIkI,gBAAgB,CAAChG,GAAD,CAApB,EAA2B;AACvB,WAAO4F,sBAAsB,CAAC5F,GAAG,CAAC8C,OAAL,CAA7B;AACH;;AACD,MAAIO,eAAe,CAACrD,GAAD,CAAnB,EAA0B;AACtB,WAAOC,KAAK,GAAGmG,gBAAgB,CAACnG,KAAK,CAAC6C,OAAP,CAAhB,CAAgChF,KAAnC,GAA2C,KAAvD;AACH;;AACD,SAAOA,KAAP;AACH;;AAED,IAAI2I,QAAQ,GAAG,SAAXA,QAAW,CAAC3I,KAAD;AAAA,SAAW,OAAOA,KAAP,KAAiB,QAA5B;AAAA,CAAf;;AAEA,IAAI4I,eAAe,GAAG,SAAlBA,eAAkB,CAAC/D,MAAD,EAASgE,MAAT,EAAoB;AACtC,MAAMC,MAAM,GAAG,EAAf;;AADsC,6BAE3BxB,IAF2B;AAGlC,QAAInD,WAAW,CAAC0E,MAAD,CAAX,KACCF,QAAQ,CAACE,MAAD,CAAR,GACKvB,IAAI,CAACyB,UAAL,CAAgBF,MAAhB,CADL,GAEK5I,OAAO,CAAC4I,MAAD,CAAP,GACIA,MAAM,CAACG,IAAP,CAAY,UAACnF,IAAD;AAAA,aAAUyD,IAAI,CAACyB,UAAL,CAAgBlF,IAAhB,CAAV;AAAA,KAAZ,CADJ,GAEIgF,MAAM,IAAIA,MAAM,CAACI,IAL3B,CAAJ,EAKsC;AAClCH,MAAAA,MAAM,CAACxB,IAAD,CAAN,GAAemB,aAAa,CAAC5D,MAAD,EAASA,MAAM,CAACyC,IAAD,CAAN,CAAapF,GAAtB,CAA5B;AACH;AAViC;;AAEtC,OAAK,IAAMoF,IAAX,IAAmBzC,MAAnB,EAA2B;AAAA,UAAhByC,IAAgB;AAS1B;;AACD,SAAOwB,MAAP;AACH,CAbD;;AAeA,IAAII,aAAa,GAAG,SAAhBA,aAAgB,GAAgC;AAAA,MAA/BC,OAA+B,uEAArB,EAAqB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAChD,MAAMC,WAAW,GAAGvF,MAAM,CAAC+B,IAAP,CAAYsD,OAAZ,CAApB;AACA,MAAMG,WAAW,GAAGxF,MAAM,CAAC+B,IAAP,CAAYuD,OAAZ,CAApB;AACA,SAAQC,WAAW,CAAC/F,MAAZ,KAAuBgG,WAAW,CAAChG,MAAnC,IACJ+F,WAAW,CAACE,KAAZ,CAAkB,UAAC/F,GAAD;AAAA,WAAS4F,OAAO,CAAC5F,GAAD,CAAP,IAAgB4F,OAAO,CAAC5F,GAAD,CAAP,KAAiB2F,OAAO,CAAC3F,GAAD,CAAjD;AAAA,GAAlB,CADJ;AAEH,CALD;;AAOA,IAAIgG,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,MAAUnE,IAAV,SAAUA,IAAV;AAAA,MAAgBoE,KAAhB,SAAgBA,KAAhB;AAAA,MAAuBC,OAAvB,SAAuBA,OAAvB;AAAA,SAAqCvJ,QAAQ,CAACqJ,KAAD,CAAR,IACnDA,KAAK,CAACnE,IAAN,KAAeA,IADoC,IAEnDmE,KAAK,CAACE,OAAN,KAAkBA,OAFiC,IAGnDT,aAAa,CAACO,KAAK,CAACC,KAAP,EAAcA,KAAd,CAHC;AAAA,CAAlB;;AAKA,SAASE,wBAAT,QAA+F;AAAA,MAA3DC,MAA2D,SAA3DA,MAA2D;AAAA,MAAnDvC,IAAmD,SAAnDA,IAAmD;AAAA,MAA7CmC,KAA6C,SAA7CA,KAA6C;AAAA,MAAtCK,WAAsC,SAAtCA,WAAsC;AAAA,MAAzBC,oBAAyB,SAAzBA,oBAAyB;AAC3F,MAAMC,YAAY,GAAGpE,aAAa,CAAC6D,KAAD,CAAlC;AACA,MAAMQ,WAAW,GAAGrE,aAAa,CAACiE,MAAD,CAAjC;AACA,MAAMK,iBAAiB,GAAG5F,GAAG,CAACmF,KAAD,EAAQnC,IAAR,CAA7B;AACA,MAAM6C,eAAe,GAAG7F,GAAG,CAACuF,MAAD,EAASvC,IAAT,CAA3B;;AACA,MAAK0C,YAAY,IAAIF,WAAW,CAACM,GAAZ,CAAgB9C,IAAhB,CAAjB,IACC6C,eAAe,IAAIA,eAAe,CAACE,QADxC,EACmD;AAC/C,WAAO,KAAP;AACH;;AACD,MAAIJ,WAAW,KAAKD,YAAhB,IACC,CAACC,WAAD,IAAgB,CAACE,eADlB,IAECH,YAAY,IAAID,oBAAoB,CAACK,GAArB,CAAyB9C,IAAzB,CAAhB,IAAkD,CAACwC,WAAW,CAACM,GAAZ,CAAgB9C,IAAhB,CAFxD,EAEgF;AAC5E,WAAO,IAAP;AACH;;AACD,SAAO4C,iBAAiB,IAAI,CAACV,WAAW,CAACW,eAAD,EAAkBD,iBAAlB,CAAxC;AACH;;AAED,IAAII,OAAO,GAAG,SAAVA,OAAU,CAACtK,KAAD;AAAA,SAAWA,KAAK,YAAYuK,MAA5B;AAAA,CAAd;;AAEA,IAAIC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,cAAD,EAAoB;AACzC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAC1K,KAAD;AAAA,WAAWI,QAAQ,CAACJ,KAAD,CAAR,IAAmB,CAACsK,OAAO,CAACtK,KAAD,CAAtC;AAAA,GAAvB;;AACA,SAAO0K,cAAc,CAACD,cAAD,CAAd,GACDA,cADC,GAED;AACEzK,IAAAA,KAAK,EAAEyK,cADT;AAEEd,IAAAA,OAAO,EAAE;AAFX,GAFN;AAMH,CARD;;AAUA,IAAIgB,UAAU,GAAG,SAAbA,UAAa,CAAC3K,KAAD;AAAA,SAAW,OAAOA,KAAP,KAAiB,UAA5B;AAAA,CAAjB;;AAEA,IAAI4K,SAAS,GAAG,SAAZA,SAAY,CAAC5K,KAAD;AAAA,SAAW,OAAOA,KAAP,KAAiB,SAA5B;AAAA,CAAhB;;AAEA,IAAI6K,SAAS,GAAG,SAAZA,SAAY,CAAC7K,KAAD;AAAA,SAAW2I,QAAQ,CAAC3I,KAAD,CAAR,IAAoBI,QAAQ,CAACJ,KAAD,CAAR,IAAmBX,cAAc,CAACW,KAAD,CAAhE;AAAA,CAAhB;;AAEA,SAAS8K,gBAAT,CAA0BnI,MAA1B,EAAkCT,GAAlC,EAA0D;AAAA,MAAnBoD,IAAmB,uEAAZ,UAAY;;AACtD,MAAIuF,SAAS,CAAClI,MAAD,CAAT,IAAsBiI,SAAS,CAACjI,MAAD,CAAT,IAAqB,CAACA,MAAhD,EAAyD;AACrD,WAAO;AACH2C,MAAAA,IAAI,EAAJA,IADG;AAEHqE,MAAAA,OAAO,EAAEkB,SAAS,CAAClI,MAAD,CAAT,GAAoBA,MAApB,GAA6B,EAFnC;AAGHT,MAAAA,GAAG,EAAHA;AAHG,KAAP;AAKH;AACJ;;AAED,IAAI6I,YAAY,GAAG,SAAfA,YAAe,CAACzD,IAAD,EAAO0D,wBAAP,EAAiCnB,MAAjC,EAAyCvE,IAAzC,EAA+CqE,OAA/C,EAA2D;AAC1E,MAAIqB,wBAAJ,EAA8B;AAC1B,QAAMvB,KAAK,GAAGI,MAAM,CAACvC,IAAD,CAApB;AACA,WAAOxD,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBuF,KAAlB,CAAd,EAAwC;AAAEC,MAAAA,KAAK,EAAE5F,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAmBuF,KAAK,IAAIA,KAAK,CAACC,KAAf,GAAuBD,KAAK,CAACC,KAA7B,GAAqC,EAAxD,CAAd,sBAA+EpE,IAA/E,EAAsFqE,OAAO,IAAI,IAAjG;AAAT,KAAxC,CAAP;AACH;;AACD,SAAO,EAAP;AACH,CAND;;AAQA,IAAIsB,aAAa;AAAA,wEAAG,iBAAOC,SAAP,EAAkBF,wBAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA8C9I,YAAAA,GAA9C,SAA8CA,GAA9C,oBAAmDA,GAAnD,EAA0DoD,IAA1D,aAA0DA,IAA1D,EAAgEtF,KAAhE,aAAgEA,KAAhE,EAAuEsH,IAAvE,aAAuEA,IAAvE,EAA+EtC,OAA/E,SAA+EA,OAA/E,EAAwFtD,QAAxF,SAAwFA,QAAxF,EAAkGH,SAAlG,SAAkGA,SAAlG,EAA6GC,SAA7G,SAA6GA,SAA7G,EAAwHF,GAAxH,SAAwHA,GAAxH,EAA6HD,GAA7H,SAA6HA,GAA7H,EAAkII,OAAlI,SAAkIA,OAAlI,EAA2IE,QAA3I,SAA2IA,QAA3I;AAEVkD,YAAAA,MAFU,GAEDqG,SAAS,CAACC,OAFT;AAGV1B,YAAAA,KAHU,GAGF,EAHE;AAIV2B,YAAAA,OAJU,GAIAhG,YAAY,CAAClD,GAAD,CAJZ;AAKVmJ,YAAAA,UALU,GAKG9F,eAAe,CAACrD,GAAD,CALlB;AAMVG,YAAAA,iBANU,GAMU+I,OAAO,IAAIC,UANrB;AAOVC,YAAAA,OAPU,GAOAnD,aAAa,CAACnI,KAAD,CAPb;AAQVuL,YAAAA,iBARU,GAQUR,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAwBlE,IAAxB,EAA8B0D,wBAA9B,EAAwDvB,KAAxD,CARV;;AASVgC,YAAAA,gBATU,GASS,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,gBAAZ,EAA8BC,gBAA9B,EAA2I;AAAA,kBAA3FC,OAA2F,uEAAjFzK,sBAAsB,CAACG,SAA0D;AAAA,kBAA/CuK,OAA+C,uEAArC1K,sBAAsB,CAACI,SAAc;AAChK,kBAAMmI,OAAO,GAAG+B,SAAS,GAAGC,gBAAH,GAAsBC,gBAA/C;AACAnC,cAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcxD,MAAM,CAACI,MAAP,CAAc;AAAEoB,gBAAAA,IAAI,EAAEoG,SAAS,GAAGG,OAAH,GAAaC,OAA9B;AAAuCnC,gBAAAA,OAAO,EAAPA,OAAvC;AACxBzH,gBAAAA,GAAG,EAAHA;AADwB,eAAd,EACFwJ,SAAS,GACfH,iBAAiB,CAACM,OAAD,EAAUlC,OAAV,CADF,GAEf4B,iBAAiB,CAACO,OAAD,EAAUnC,OAAV,CAHT,CAAd;;AAIA,kBAAI,CAACqB,wBAAL,EAA+B;AAC3B,uBAAOvB,KAAP;AACH;AACJ,aAlBe;;AAAA,kBAmBZ/H,QAAQ,KACN,CAAC0J,OAAD,IAAY,CAACC,UAAb,KAA4BC,OAAO,IAAIvL,iBAAiB,CAACC,KAAD,CAAxD,CAAD,IACI4K,SAAS,CAAC5K,KAAD,CAAT,IAAoB,CAACA,KADzB,IAEIqL,UAAU,IAAI,CAAC/C,gBAAgB,CAACtD,OAAD,CAAhB,CAA0B2C,OAF7C,IAGIyD,OAAO,IAAI,CAACxD,aAAa,CAAC5C,OAAD,CAAb,CAAuB2C,OAJhC,CAnBI;AAAA;AAAA;AAAA;;AAAA,qBAwB+CkD,SAAS,CAACnJ,QAAD,CAAT,GACrD;AAAE1B,cAAAA,KAAK,EAAE,CAAC,CAAC0B,QAAX;AAAqBiI,cAAAA,OAAO,EAAEjI;AAA9B,aADqD,GAErD8I,kBAAkB,CAAC9I,QAAD,CA1BZ,EAwBGqK,aAxBH,UAwBJ/L,KAxBI,EAwB2BgM,eAxB3B,UAwBkBrC,OAxBlB;;AAAA,iBA2BRoC,aA3BQ;AAAA;AAAA;AAAA;;AA4BRtC,YAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcxD,MAAM,CAACI,MAAP,CAAc;AAAEoB,cAAAA,IAAI,EAAElE,sBAAsB,CAACM,QAA/B;AAAyCiI,cAAAA,OAAO,EAAEqC,eAAlD;AAAmE9J,cAAAA,GAAG,EAAEG,iBAAiB,GAAG,CAAC4J,EAAE,GAAGpH,MAAM,CAACyC,IAAD,CAAN,CAAatC,OAAnB,MAAgC,IAAhC,IAAwCiH,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAAC,CAAD,CAAF,CAAM/J,GAA1E,GAAgFA;AAAzK,aAAd,EAA8LqJ,iBAAiB,CAACnK,sBAAsB,CAACM,QAAxB,EAAkCsK,eAAlC,CAA/M,CAAd;;AA5BQ,gBA6BHhB,wBA7BG;AAAA;AAAA;AAAA;;AAAA,6CA8BGvB,KA9BH;;AAAA;AAAA,kBAkCZ,CAAC1J,iBAAiB,CAACuB,GAAD,CAAlB,IAA2B,CAACvB,iBAAiB,CAACsB,GAAD,CAlCjC;AAAA;AAAA;AAAA;;AAAA,kCAqCqCmJ,kBAAkB,CAACnJ,GAAD,CArCvD,EAqCG6K,QArCH,uBAqCJlM,KArCI,EAqCsBmM,UArCtB,uBAqCaxC,OArCb;AAAA,mCAsCqCa,kBAAkB,CAAClJ,GAAD,CAtCvD,EAsCG8K,QAtCH,wBAsCJpM,KAtCI,EAsCsBqM,UAtCtB,wBAsCa1C,OAtCb;;AAuCZ,gBAAIrE,IAAI,KAAK,QAAT,IAAsB,CAACA,IAAD,IAAS,CAAC3B,KAAK,CAAC3D,KAAD,CAAzC,EAAmD;AACzCsM,cAAAA,WADyC,GAC3BpK,GAAG,CAACqK,aAAJ,IAAqBC,UAAU,CAACxM,KAAD,CADJ;;AAE/C,kBAAI,CAACD,iBAAiB,CAACmM,QAAD,CAAtB,EAAkC;AAC9BR,gBAAAA,SAAS,GAAGY,WAAW,GAAGJ,QAA1B;AACH;;AACD,kBAAI,CAACnM,iBAAiB,CAACqM,QAAD,CAAtB,EAAkC;AAC9BK,gBAAAA,SAAS,GAAGH,WAAW,GAAGF,QAA1B;AACH;AACJ,aARD,MASK;AACKM,cAAAA,SADL,GACiBxK,GAAG,CAACyK,WAAJ,IAAmB,IAAIC,IAAJ,CAAS5M,KAAT,CADpC;;AAED,kBAAI2I,QAAQ,CAACuD,QAAD,CAAZ,EAAwB;AACpBR,gBAAAA,SAAS,GAAGgB,SAAS,GAAG,IAAIE,IAAJ,CAASV,QAAT,CAAxB;AACH;;AACD,kBAAIvD,QAAQ,CAACyD,QAAD,CAAZ,EAAwB;AACpBK,gBAAAA,SAAS,GAAGC,SAAS,GAAG,IAAIE,IAAJ,CAASR,QAAT,CAAxB;AACH;AACJ;;AAxDW,kBAyDRV,SAAS,IAAIe,SAzDL;AAAA;AAAA;AAAA;;AA0DRhB,YAAAA,gBAAgB,CAAC,CAAC,CAACC,SAAH,EAAcS,UAAd,EAA0BE,UAA1B,EAAsCjL,sBAAsB,CAACC,GAA7D,EAAkED,sBAAsB,CAACE,GAAzF,CAAhB;;AA1DQ,gBA2DH0J,wBA3DG;AAAA;AAAA;AAAA;;AAAA,6CA4DGvB,KA5DH;;AAAA;AAAA,kBAgEZd,QAAQ,CAAC3I,KAAD,CAAR,IAAmB,CAACsL,OAApB,KAAgC/J,SAAS,IAAIC,SAA7C,CAhEY;AAAA;AAAA;AAAA;;AAAA,mCAiEkDgJ,kBAAkB,CAACjJ,SAAD,CAjEpE,EAiEGsL,cAjEH,wBAiEJ7M,KAjEI,EAiE4B2L,gBAjE5B,wBAiEmBhC,OAjEnB;AAAA,mCAkEkDa,kBAAkB,CAAChJ,SAAD,CAlEpE,EAkEGsL,cAlEH,wBAkEJ9M,KAlEI,EAkE4B4L,gBAlE5B,wBAkEmBjC,OAlEnB;AAmENoD,YAAAA,WAnEM,GAmEQ/M,KAAK,CAACgN,QAAN,GAAiB1J,MAnEzB;AAoENoI,YAAAA,UApEM,GAoEM,CAAC3L,iBAAiB,CAAC8M,cAAD,CAAlB,IAAsCE,WAAW,GAAGF,cApE1D;AAqENJ,YAAAA,UArEM,GAqEM,CAAC1M,iBAAiB,CAAC+M,cAAD,CAAlB,IAAsCC,WAAW,GAAGD,cArE1D;;AAAA,kBAsERpB,UAAS,IAAIe,UAtEL;AAAA;AAAA;AAAA;;AAuERhB,YAAAA,gBAAgB,CAAC,CAAC,CAACC,UAAH,EAAcC,gBAAd,EAAgCC,gBAAhC,CAAhB;;AAvEQ,gBAwEHZ,wBAxEG;AAAA;AAAA;AAAA;;AAAA,6CAyEGvB,KAzEH;;AAAA;AAAA,kBA6EZhI,OAAO,IAAI,CAAC6J,OA7EA;AAAA;AAAA;AAAA;;AAAA,mCA8E6Cd,kBAAkB,CAAC/I,OAAD,CA9E/D,EA8EGwL,YA9EH,wBA8EJjN,KA9EI,EA8E0BkN,cA9E1B,wBA8EiBvD,OA9EjB;;AAAA,kBA+ERW,OAAO,CAAC2C,YAAD,CAAP,IAAyB,CAACA,YAAY,CAACzK,IAAb,CAAkBxC,KAAlB,CA/ElB;AAAA;AAAA;AAAA;;AAgFRyJ,YAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcxD,MAAM,CAACI,MAAP,CAAc;AAAEoB,cAAAA,IAAI,EAAElE,sBAAsB,CAACK,OAA/B;AAAwCkI,cAAAA,OAAO,EAAEuD,cAAjD;AAAiEhL,cAAAA,GAAG,EAAHA;AAAjE,aAAd,EAAsFqJ,iBAAiB,CAACnK,sBAAsB,CAACK,OAAxB,EAAiCyL,cAAjC,CAAvG,CAAd;;AAhFQ,gBAiFHlC,wBAjFG;AAAA;AAAA;AAAA;;AAAA,6CAkFGvB,KAlFH;;AAAA;AAAA,iBAsFZ9H,QAtFY;AAAA;AAAA;AAAA;;AAuFNwF,YAAAA,UAvFM,GAuFOsB,aAAa,CAAC5D,MAAD,EAAS3C,GAAT,CAvFpB;AAwFNiL,YAAAA,WAxFM,GAwFQ9K,iBAAiB,IAAI2C,OAArB,GAA+BA,OAAO,CAAC,CAAD,CAAP,CAAW9C,GAA1C,GAAgDA,GAxFxD;;AAAA,iBAyFRyI,UAAU,CAAChJ,QAAD,CAzFF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0FaA,QAAQ,CAACwF,UAAD,CA1FrB;;AAAA;AA0FFxE,YAAAA,MA1FE;AA2FFyK,YAAAA,aA3FE,GA2FctC,gBAAgB,CAACnI,MAAD,EAASwK,WAAT,CA3F9B;;AAAA,iBA4FJC,aA5FI;AAAA;AAAA;AAAA;;AA6FJ3D,YAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcxD,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBkJ,aAAlB,CAAd,EAAgD7B,iBAAiB,CAACnK,sBAAsB,CAACO,QAAxB,EAAkCyL,aAAa,CAACzD,OAAhD,CAAjE,CAAd;;AA7FI,gBA8FCqB,wBA9FD;AAAA;AAAA;AAAA;;AAAA,6CA+FOvB,KA/FP;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAmGHrJ,QAAQ,CAACuB,QAAD,CAnGL;AAAA;AAAA;AAAA;;AAoGJ0L,YAAAA,gBApGI,GAoGe,EApGf;AAAA,sCAqG8BvJ,MAAM,CAACC,OAAP,CAAepC,QAAf,CArG9B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yEAqGI6B,GArGJ,0BAqGS8J,gBArGT;;AAAA,kBAsGA,CAAC1H,aAAa,CAACyH,gBAAD,CAAd,IAAoC,CAACrC,wBAtGrC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAyGyBsC,gBAAgB,CAACnG,UAAD,CAzGzC;;AAAA;AAyGEoG,YAAAA,cAzGF;AA0GEH,YAAAA,cA1GF,GA0GkBtC,gBAAgB,CAACyC,cAAD,EAAiBJ,WAAjB,EAA8B3J,GAA9B,CA1GlC;;AA2GJ,gBAAI4J,cAAJ,EAAmB;AACfC,cAAAA,gBAAgB,GAAGvJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBkJ,cAAlB,CAAd,EAAgD7B,iBAAiB,CAAC/H,GAAD,EAAM4J,cAAa,CAACzD,OAApB,CAAjE,CAAnB;;AACA,kBAAIqB,wBAAJ,EAA8B;AAC1BvB,gBAAAA,KAAK,CAACnC,IAAD,CAAL,GAAc+F,gBAAd;AACH;AACJ;;AAhHG;AAAA;AAAA;AAAA;;AAAA;AAAA,gBAkHHzH,aAAa,CAACyH,gBAAD,CAlHV;AAAA;AAAA;AAAA;;AAmHJ5D,YAAAA,KAAK,CAACnC,IAAD,CAAL,GAAcxD,MAAM,CAACI,MAAP,CAAc;AAAEhC,cAAAA,GAAG,EAAEiL;AAAP,aAAd,EAAoCE,gBAApC,CAAd;;AAnHI,gBAoHCrC,wBApHD;AAAA;AAAA;AAAA;;AAAA,6CAqHOvB,KArHP;;AAAA;AAAA,6CA0HTA,KA1HS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbwB,aAAa;AAAA;AAAA;AAAA,GAAjB;;AA6HA,IAAMuC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC/D,KAAD,EAAQuB,wBAAR;AAAA,SAAqC/K,OAAO,CAACwJ,KAAK,CAACgE,KAAP,CAAP,GACxDhE,KAAK,CAACgE,KAAN,CAAYzJ,MAAZ,CAAmB,UAACC,QAAD;AAAA,QAAad,IAAb,UAAaA,IAAb;AAAA,QAAmBwG,OAAnB,UAAmBA,OAAnB;AAAA,QAA4BrE,IAA5B,UAA4BA,IAA5B;AAAA,WAAwCxB,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,EAA4Cd,IAAI,GACvGc,QAAQ,CAACd,IAAD,CAAR,IAAkB6H,wBAAlB,uBAEO7H,IAFP,EAEc4H,YAAY,CAAC5H,IAAD,EAAO6H,wBAAP,EAAiC/G,QAAjC,EAA2CqB,IAA3C,EAAiDqE,OAAjD,CAF1B,wBAKOxG,IALP,EAKcc,QAAQ,CAACd,IAAD,CAAR,IAAkBW,MAAM,CAACI,MAAP,CAAc;AAAEyF,MAAAA,OAAO,EAAPA,OAAF;AACpCrE,MAAAA,IAAI,EAAJA;AADoC,KAAd,EACb0F,wBAAwB,GAC/B;AACEtB,MAAAA,KAAK,sBAAKpE,IAAL,EAAYqE,OAAO,IAAI,IAAvB;AADP,KAD+B,GAI/B,EALoB,CALhC,CADuG,GAavG,EAbuD,CAAxC;AAAA,GAAnB,EAaW,EAbX,CADwD,uBAgBrDF,KAAK,CAACtG,IAhB+C,EAgBxC;AAAEwG,IAAAA,OAAO,EAAEF,KAAK,CAACE,OAAjB;AAA0BrE,IAAAA,IAAI,EAAEmE,KAAK,CAACnE;AAAtC,GAhBwC,CAArC;AAAA,CAAzB;;SAkBeoI,kB;;;;;iFAAf,kBAAkCC,gBAAlC,EAAoD3C,wBAApD,EAA8EnH,IAA9E,EAAoF+J,kBAApF,EAAwGC,OAAxG;AAAA;AAAA;AAAA;AAAA;AAAA,iBACQD,kBADR;AAAA;AAAA;AAAA;;AAAA,8CAEeA,kBAAkB,CAAC/J,IAAD,EAAOgK,OAAP,CAFjC;;AAAA;AAAA;AAAA;AAAA,mBAM0BF,gBAAgB,CAAChM,QAAjB,CAA0BkC,IAA1B,EAAgC;AAC1CiK,cAAAA,UAAU,EAAE,KAD8B;AAE1CD,cAAAA,OAAO,EAAPA;AAF0C,aAAhC,CAN1B;;AAAA;AAAA;AAAA,2BAUoB,EAVpB;AAAA;AAMYtF,cAAAA,MANZ;AAUYsB,cAAAA,MAVZ;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAce;AACHtB,cAAAA,MAAM,EAAE,EADL;AAEHsB,cAAAA,MAAM,EAAEjG,qBAAqB,CAAC4J,gBAAgB,eAAIxC,wBAAJ,CAAjB;AAF1B,aAdf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,IAAI+C,WAAW,GAAG,SAAdA,WAAc,CAAC/N,KAAD;AAAA,SAAWD,iBAAiB,CAACC,KAAD,CAAjB,IAA4B,CAACG,YAAY,CAACH,KAAD,CAApD;AAAA,CAAlB;;AAEA,IAAMgO,OAAO,GAAG,SAAVA,OAAU,CAAC7K,IAAD,EAAOoF,MAAP,EAAkB;AAC9B,MAAM0F,YAAY,GAAG,SAAfA,YAAe,CAACjO,KAAD,EAAQwD,GAAR,EAAapD,QAAb,EAA0B;AAC3C,QAAM8N,aAAa,GAAG9N,QAAQ,aAAM+C,IAAN,cAAcK,GAAd,cAAyBL,IAAzB,cAAiCK,GAAjC,MAA9B;AACA,WAAOuK,WAAW,CAAC/N,KAAD,CAAX,GAAqBkO,aAArB,GAAqCF,OAAO,CAACE,aAAD,EAAgBlO,KAAhB,CAAnD;AACH,GAHD;;AAIA,SAAOC,OAAO,CAACsI,MAAD,CAAP,GACDA,MAAM,CAACP,GAAP,CAAW,UAAChI,KAAD,EAAQwD,GAAR;AAAA,WAAgByK,YAAY,CAACjO,KAAD,EAAQwD,GAAR,CAA5B;AAAA,GAAX,CADC,GAEDM,MAAM,CAACC,OAAP,CAAewE,MAAf,EAAuBP,GAAvB,CAA2B;AAAA;AAAA,QAAExE,GAAF;AAAA,QAAOxD,KAAP;;AAAA,WAAkBiO,YAAY,CAACjO,KAAD,EAAQwD,GAAR,EAAa,IAAb,CAA9B;AAAA,GAA3B,CAFN;AAGH,CARD;;AASA,IAAI2K,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAapO,KAAb;AAAA,SAAuBgO,OAAO,CAACI,UAAD,EAAapO,KAAb,CAAP,CAA2BqO,IAA3B,CAAgCC,QAAhC,CAAvB;AAAA,CAAhB;;AAEA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAAcC,SAAd,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,aAAlD,EAAoE;AACxF,MAAI5O,KAAJ;AACA0O,EAAAA,WAAW,CAACG,GAAZ,CAAgBJ,SAAhB;;AACA,MAAI7I,aAAa,CAAC4I,WAAD,CAAjB,EAAgC;AAC5BxO,IAAAA,KAAK,GAAGqE,SAAR;AACH,GAFD,MAGK,IAAI,CAACF,WAAW,CAACqK,WAAW,CAACC,SAAD,CAAZ,CAAhB,EAA0C;AAC3CzO,IAAAA,KAAK,GAAGwO,WAAW,CAACC,SAAD,CAAnB;AACAC,IAAAA,WAAW,CAACG,GAAZ,CAAgBJ,SAAhB;AACH,GAHI,MAIA;AACDzO,IAAAA,KAAK,GAAGsE,GAAG,CAACV,qBAAqB,CAAC4K,WAAD,CAAtB,EAAqCC,SAArC,CAAX;;AACA,QAAI,CAACtK,WAAW,CAACnE,KAAD,CAAhB,EAAyB;AACrBmO,MAAAA,SAAS,CAACM,SAAD,EAAYzO,KAAZ,CAAT,CAA4BiH,OAA5B,CAAoC,UAACK,IAAD;AAAA,eAAUoH,WAAW,CAACG,GAAZ,CAAgBvH,IAAhB,CAAV;AAAA,OAApC;AACH;AACJ;;AACD,SAAOnD,WAAW,CAACnE,KAAD,CAAX,GACD4O,aAAa,GACTD,UADS,GAETrK,GAAG,CAACqK,UAAD,EAAaF,SAAb,CAHN,GAIDzO,KAJN;AAKH,CArBD;;AAuBA,IAAI8O,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGC,UAAH,UAAGA,UAAH;AAAA,MAAeC,QAAf,UAAeA,QAAf;AAAA,MAAyBC,WAAzB,UAAyBA,WAAzB;AAAA,MAAsCC,UAAtC,UAAsCA,UAAtC;AAAA,MAAkDC,oBAAlD,UAAkDA,oBAAlD;AAAA,MAAwEC,QAAxE,UAAwEA,QAAxE;AAAA,MAAkFC,kBAAlF,UAAkFA,kBAAlF;AAAA,MAAsGC,WAAtG,UAAsGA,WAAtG;AAAA,SAA0HP,UAAU,IAAIE,WAAf,IACzIC,UAAU,IAAIC,oBAD2H,IAEzID,UAAU,IAAI,CAACI,WAF0H,IAGzIF,QAAQ,IAAI,CAACH,WAAb,IAA4B,CAACD,QAH4G,IAIzIK,kBAAkB,IAAI,CAACJ,WAAvB,IAAsCD,QAJmG,IAKzIG,oBAAoB,IAAIG,WALR;AAAA,CAArB;;AAOA,IAAIC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACjI,IAAD;AAAA,SAAUA,IAAI,CAACkI,SAAL,CAAe,CAAf,EAAkBlI,IAAI,CAACmI,OAAL,CAAa,GAAb,CAAlB,CAAV;AAAA,CAA9B;;AAEA,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC7K,MAAD,EAASyC,IAAT,EAAkB;AACxC,MAAMqI,OAAO,GAAG/L,qBAAqB,CAACgF,eAAe,CAAC/D,MAAD,CAAhB,CAArC;AACA,SAAOyC,IAAI,GAAGhD,GAAG,CAACqL,OAAD,EAAUrI,IAAV,EAAgBqI,OAAhB,CAAN,GAAiCA,OAA5C;AACH,CAHD;;AAKA,SAASC,oBAAT,CAA8BC,cAA9B,EAA8CC,eAA9C,EAA+D;AAC3D,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAI,CAAC9P,OAAO,CAAC4P,cAAD,CAAR,IACA,CAAC5P,OAAO,CAAC6P,eAAD,CADR,IAEAD,cAAc,CAACvM,MAAf,KAA0BwM,eAAe,CAACxM,MAF9C,EAEsD;AAClD,WAAO,IAAP;AACH;;AACD,OAAK,IAAI0M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,cAAc,CAACvM,MAAnC,EAA2C0M,CAAC,EAA5C,EAAgD;AAC5C,QAAID,OAAJ,EAAa;AACT;AACH;;AACD,QAAME,KAAK,GAAGJ,cAAc,CAACG,CAAD,CAA5B;AACA,QAAME,KAAK,GAAGJ,eAAe,CAACE,CAAD,CAA7B;;AACA,QAAI7L,WAAW,CAAC+L,KAAD,CAAX,IACApM,MAAM,CAAC+B,IAAP,CAAYoK,KAAZ,EAAmB3M,MAAnB,KAA8BQ,MAAM,CAAC+B,IAAP,CAAYqK,KAAZ,EAAmB5M,MADrD,EAC6D;AACzDyM,MAAAA,OAAO,GAAG,IAAV;AACA;AACH;;AACD,SAAK,IAAMvM,GAAX,IAAkByM,KAAlB,EAAyB;AACrB,UAAIA,KAAK,CAACzM,GAAD,CAAL,KAAe0M,KAAK,CAAC1M,GAAD,CAAxB,EAA+B;AAC3BuM,QAAAA,OAAO,GAAG,IAAV;AACA;AACH;AACJ;AACJ;;AACD,SAAOA,OAAP;AACH;;AAED,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC7I,IAAD,EAAO8I,UAAP;AAAA,SAAsB7F,MAAM,CAAC,WAAI6F,UAAJ,YAAuBxN,OAAvB,CAA+B,KAA/B,EAAsC,KAAtC,EAA6CA,OAA7C,CAAqD,KAArD,EAA4D,KAA5D,CAAD,CAAN,CAA2EJ,IAA3E,CAAgF8E,IAAhF,CAAtB;AAAA,CAA9B;;AACA,IAAI+I,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQhJ,IAAR;AAAA,SAAiB,mBAAIgJ,KAAJ,EAAWC,IAAX,CAAgB,UAACpF,OAAD;AAAA,WAAagF,qBAAqB,CAAC7I,IAAD,EAAO6D,OAAP,CAAlC;AAAA,GAAhB,CAAjB;AAAA,CAAzB;;AAEA,IAAIqF,aAAa,GAAG,SAAhBA,aAAgB,CAACnL,OAAD;AAAA,SAAaA,OAAO,CAACC,IAAR,eAAoBnE,MAApB,SAAb;AAAA,CAApB;;AAEA,SAASsP,WAAT,CAAqBpL,OAArB,EAA8BqL,gBAA9B,EAAgD;AAC5C,MAAMC,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,YAAM;AACxC,QAAIpL,UAAU,CAACH,OAAD,CAAd,EAAyB;AACrBsL,MAAAA,QAAQ,CAAClJ,UAAT;AACAiJ,MAAAA,gBAAgB;AACnB;AACJ,GALgB,CAAjB;AAMAC,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,MAAM,CAACC,QAAxB,EAAkC;AAC9BC,IAAAA,SAAS,EAAE,IADmB;AAE9BC,IAAAA,OAAO,EAAE;AAFqB,GAAlC;AAIA,SAAON,QAAP;AACH;;AAED,IAAIO,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD;AAAA,SAAW;AACzBjC,IAAAA,UAAU,EAAE,CAACiC,IAAD,IAASA,IAAI,KAAK1Q,eAAe,CAACG,QADrB;AAEzBwO,IAAAA,QAAQ,EAAE+B,IAAI,KAAK1Q,eAAe,CAACC,MAFV;AAGzBqO,IAAAA,UAAU,EAAEoC,IAAI,KAAK1Q,eAAe,CAACE;AAHZ,GAAX;AAAA,CAAlB;;AAMA,IAAIyQ,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAClP,GAAD;AAAA,SAASkD,YAAY,CAAClD,GAAD,CAAZ,IAAqBqD,eAAe,CAACrD,GAAD,CAA7C;AAAA,CAAhC;;AAEA,SAASmP,OAAT,GAAmO;AAAA,mFAAJ,EAAI;AAAA,2BAAhNF,IAAgN;AAAA,MAAhNA,IAAgN,4BAAzM1Q,eAAe,CAACG,QAAyL;AAAA,qCAA/K0Q,cAA+K;AAAA,MAA/KA,cAA+K,sCAA9J7Q,eAAe,CAACE,QAA8I;AAAA,MAApIgN,gBAAoI,UAApIA,gBAAoI;AAAA,MAAlHC,kBAAkH,UAAlHA,kBAAkH;AAAA,MAA9F2D,iBAA8F,UAA9FA,iBAA8F;AAAA,oCAA3EC,aAA2E;AAAA,MAA3EA,aAA2E,qCAA3D,EAA2D;AAAA,qCAAvDC,gBAAuD;AAAA,MAAvDA,gBAAuD,sCAApC,IAAoC;AAAA,MAA9BC,oBAA8B,UAA9BA,oBAA8B;;AAC/N,MAAMxG,SAAS,GAAG5L,MAAM,CAAC,EAAD,CAAxB;AACA,MAAMqS,SAAS,GAAGrS,MAAM,CAAC,EAAD,CAAxB;AACA,MAAMsS,gBAAgB,GAAGtS,MAAM,CAAC,EAAD,CAA/B;AACA,MAAMuS,uBAAuB,GAAGvS,MAAM,CAAC,EAAD,CAAtC;AACA,MAAMwS,cAAc,GAAGxS,MAAM,CAAC,IAAIyS,GAAJ,EAAD,CAA7B;AACA,MAAMC,cAAc,GAAG1S,MAAM,CAAC,IAAIyS,GAAJ,EAAD,CAA7B;AACA,MAAME,uBAAuB,GAAG3S,MAAM,CAAC,IAAIyS,GAAJ,EAAD,CAAtC;AACA,MAAMG,cAAc,GAAG5S,MAAM,CAAC,IAAIyS,GAAJ,EAAD,CAA7B;AACA,MAAMI,UAAU,GAAG7S,MAAM,CAAC,IAAD,CAAzB;AACA,MAAM8S,gBAAgB,GAAG9S,MAAM,CAACkS,aAAD,CAA/B;AACA,MAAMa,wBAAwB,GAAG/S,MAAM,CAAC,EAAD,CAAvC;AACA,MAAMgT,SAAS,GAAGhT,MAAM,CAAC,KAAD,CAAxB;AACA,MAAMiT,aAAa,GAAGjT,MAAM,CAAC,KAAD,CAA5B;AACA,MAAMkT,cAAc,GAAGlT,MAAM,CAAC,KAAD,CAA7B;AACA,MAAMmT,UAAU,GAAGnT,MAAM,CAAC,KAAD,CAAzB;AACA,MAAMoT,cAAc,GAAGpT,MAAM,CAAC,CAAD,CAA7B;AACA,MAAMqT,eAAe,GAAGrT,MAAM,CAAC,KAAD,CAA9B;AACA,MAAMsT,eAAe,GAAGtT,MAAM,EAA9B;AACA,MAAMuT,0BAA0B,GAAGvT,MAAM,CAAC,EAAD,CAAzC;AACA,MAAMwT,oBAAoB,GAAGxT,MAAM,CAACiS,iBAAD,CAAnC;AACA,MAAMwB,kBAAkB,GAAGzT,MAAM,CAAC,IAAIyS,GAAJ,EAAD,CAAjC;;AArB+N,kBAsB5MxS,QAAQ,EAtBoM;AAAA;AAAA,MAsBtNyT,MAtBsN;;AAAA,wBAuBlL1T,MAAM,CAAC4R,WAAW,CAACC,IAAD,CAAZ,CAAN,CAA0BhG,OAvBwJ;AAAA,MAuBvNiE,QAvBuN,mBAuBvNA,QAvBuN;AAAA,MAuB7MF,UAvB6M,mBAuB7MA,UAvB6M;AAAA,MAuBjMH,UAvBiM,mBAuBjMA,UAvBiM;AAwB/N,MAAM/D,wBAAwB,GAAG0G,oBAAoB,KAAK,KAA1D;AACA,MAAMuB,iBAAiB,GAAG,OAAOnC,MAAP,KAAkBhQ,SAA5C;AACA,MAAMoS,8BAA8B,GAAG,CAAC,EAAEvF,gBAAgB,IAAIC,kBAAtB,CAAxC;AACA,MAAMuF,KAAK,GAAG,OAAOpC,QAAP,KAAoBjQ,SAApB,IACV,CAACmS,iBADS,IAEV,CAAC9O,WAAW,CAAC2M,MAAM,CAACrL,WAAR,CAFhB;AAGA,MAAM2N,cAAc,GAAGD,KAAK,GAAG,WAAWrC,MAAd,GAAuB,OAAOuC,KAAP,KAAiBvS,SAApE;AACA,MAAMwS,gBAAgB,GAAGhU,MAAM,CAAC;AAC5BiU,IAAAA,KAAK,EAAE,CAACH,cADoB;AAE5BI,IAAAA,WAAW,EAAE,CAACJ,cAFc;AAG5B9D,IAAAA,WAAW,EAAEJ,UAHe;AAI5BuE,IAAAA,WAAW,EAAE,CAACL,cAJc;AAK5BM,IAAAA,OAAO,EAAE,CAACN,cALkB;AAM5BO,IAAAA,YAAY,EAAE,CAACP,cANa;AAO5BzL,IAAAA,OAAO,EAAE,CAACyL;AAPkB,GAAD,CAA/B;AA/B+N,yBAwCnJ9T,MAAM,CAAC4R,WAAW,CAACI,cAAD,CAAZ,CAAN,CAAoCnG,OAxC+G;AAAA,MAwC7MkE,kBAxC6M,oBAwCvND,QAxCuN;AAAA,MAwC7KD,oBAxC6K,oBAwCzLD,UAxCyL;AAyC/N4D,EAAAA,oBAAoB,CAAC3H,OAArB,GAA+BoG,iBAA/B;AACA,MAAMqC,QAAQ,GAAGpU,WAAW,CAAC,YAAM;AAC/B,QAAI,CAAC8S,SAAS,CAACnH,OAAf,EAAwB;AACpB6H,MAAAA,MAAM,CAAC,EAAD,CAAN;AACH;AACJ,GAJ2B,EAIzB,EAJyB,CAA5B;AAKA,MAAMa,uBAAuB,GAAGrU,WAAW,CAAC,UAAC8H,IAAD,EAAOmC,KAAP,EAAuC;AAAA,QAAzBqK,YAAyB,uEAAV,KAAU;AAC/E,QAAIC,cAAc,GAAGD,YAAY,IAC7BlK,wBAAwB,CAAC;AACrBC,MAAAA,MAAM,EAAE8H,SAAS,CAACxG,OADG;AAErB1B,MAAAA,KAAK,EAALA,KAFqB;AAGrBnC,MAAAA,IAAI,EAAJA,IAHqB;AAIrBwC,MAAAA,WAAW,EAAEoI,cAAc,CAAC/G,OAJP;AAKrBpB,MAAAA,oBAAoB,EAAEkI,uBAAuB,CAAC9G;AALzB,KAAD,CAD5B;;AAQA,QAAIvF,aAAa,CAAC6D,KAAD,CAAjB,EAA0B;AACtB,UAAIwI,uBAAuB,CAAC9G,OAAxB,CAAgCf,GAAhC,CAAoC9C,IAApC,KACA4L,8BADJ,EACoC;AAChChB,QAAAA,cAAc,CAAC/G,OAAf,CAAuB0D,GAAvB,CAA2BvH,IAA3B;AACAyM,QAAAA,cAAc,GAAGA,cAAc,IAAIzP,GAAG,CAACqN,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,CAAtC;AACH;;AACDqK,MAAAA,SAAS,CAACxG,OAAV,GAAoBpE,KAAK,CAAC4K,SAAS,CAACxG,OAAX,EAAoB,CAAC7D,IAAD,CAApB,CAAzB;AACH,KAPD,MAQK;AACD,UAAM0M,aAAa,GAAG1P,GAAG,CAACqN,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,CAAzB;AACA4K,MAAAA,cAAc,CAAC/G,OAAf,CAAuB8I,MAAvB,CAA8B3M,IAA9B;AACAyM,MAAAA,cAAc,GACVA,cAAc,KACTC,aAAa,GACR,CAACxK,WAAW,CAACwK,aAAD,EAAgBvK,KAAK,CAACnC,IAAD,CAArB,CADJ,GAER,IAHI,CADlB;AAKArE,MAAAA,GAAG,CAAC0O,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,EAA0BmC,KAAK,CAACnC,IAAD,CAA/B,CAAH;AACH;;AACD,QAAIyM,cAAc,IAAI,CAAChU,iBAAiB,CAAC+T,YAAD,CAAxC,EAAwD;AACpDF,MAAAA,QAAQ;AACR,aAAO,IAAP;AACH;AACJ,GA/B0C,EA+BxC,CAACA,QAAD,EAAWV,8BAAX,CA/BwC,CAA3C;AAgCA,MAAMgB,aAAa,GAAG1U,WAAW,CAAC,UAAC2C,KAAD,EAAQgS,QAAR,EAAqB;AAAA,QAC3CjS,GAD2C,GAC1BC,KAD0B,CAC3CD,GAD2C;AAAA,QACtC8C,OADsC,GAC1B7C,KAD0B,CACtC6C,OADsC;AAEnD,QAAMhF,KAAK,GAAGmT,KAAK,IAAI9S,aAAa,CAAC6B,GAAD,CAAtB,IAA+BnC,iBAAiB,CAACoU,QAAD,CAAhD,GACR,EADQ,GAERA,QAFN;;AAGA,QAAI/O,YAAY,CAAClD,GAAD,CAAZ,IAAqB8C,OAAzB,EAAkC;AAC9BA,MAAAA,OAAO,CAACiC,OAAR,CAAgB;AAAA,YAAQmN,QAAR,UAAGlS,GAAH;AAAA,eAAwBkS,QAAQ,CAACvM,OAAT,GAAmBuM,QAAQ,CAACpU,KAAT,KAAmBA,KAA9D;AAAA,OAAhB;AACH,KAFD,MAGK,IAAIiI,WAAW,CAAC/F,GAAD,CAAf,EAAsB;AACvB,UAAIyG,QAAQ,CAAC3I,KAAD,CAAZ,EAAqB;AACjBkC,QAAAA,GAAG,CAAClC,KAAJ,GAAYA,KAAZ;AACH,OAFD,MAGK;AACDkC,QAAAA,GAAG,CAACwG,KAAJ,GAAY1I,KAAZ;AACH;AACJ,KAPI,MAQA,IAAIkI,gBAAgB,CAAChG,GAAD,CAApB,EAA2B;AAC5B,yBAAIA,GAAG,CAAC8C,OAAR,EAAiBiC,OAAjB,CAAyB,UAACoN,SAAD;AAAA,eAAgBA,SAAS,CAACtM,QAAV,GAAqB/H,KAAK,CAACsU,QAAN,CAAeD,SAAS,CAACrU,KAAzB,CAArC;AAAA,OAAzB;AACH,KAFI,MAGA,IAAIuF,eAAe,CAACrD,GAAD,CAAf,IAAwB8C,OAA5B,EAAqC;AACtCA,MAAAA,OAAO,CAAC1B,MAAR,GAAiB,CAAjB,GACM0B,OAAO,CAACiC,OAAR,CAAgB;AAAA,YAAQsN,WAAR,UAAGrS,GAAH;AAAA,eAA2BqS,WAAW,CAAC1M,OAAZ,GAAsB7H,KAAK,CAACsU,QAAN,CAAeC,WAAW,CAACvU,KAA3B,CAAjD;AAAA,OAAhB,CADN,GAEOgF,OAAO,CAAC,CAAD,CAAP,CAAW9C,GAAX,CAAe2F,OAAf,GAAyB,CAAC,CAAC7H,KAFlC;AAGH,KAJI,MAKA;AACDkC,MAAAA,GAAG,CAAClC,KAAJ,GAAYA,KAAZ;AACH;AACJ,GA3BgC,EA2B9B,CAACmT,KAAD,CA3B8B,CAAjC;AA4BA,MAAMqB,QAAQ,GAAGhV,WAAW,CAAC,UAAC8H,IAAD,EAAU;AACnC,QAAI,CAAC4D,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CAAD,IACC,CAACgM,gBAAgB,CAACnI,OAAjB,CAAyBoI,KAA1B,IAAmC,CAACD,gBAAgB,CAACnI,OAAjB,CAAyBqI,WADlE,EACgF;AAC5E,aAAO,KAAP;AACH;;AACD,QAAIiB,YAAY,GAAGpC,wBAAwB,CAAClH,OAAzB,CAAiC7D,IAAjC,MACfmB,aAAa,CAACyC,SAAS,CAACC,OAAX,EAAoBD,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,EAAwBpF,GAA5C,CADjB;AAEA,QAAMwS,YAAY,GAAGrE,kBAAkB,CAAC0C,kBAAkB,CAAC5H,OAApB,EAA6B7D,IAA7B,CAAvC;AACA,QAAMqN,yBAAyB,GAAG3C,cAAc,CAAC7G,OAAf,CAAuByJ,IAAzD;;AACA,QAAIF,YAAJ,EAAkB;AACd,UAAMG,cAAc,GAAGtF,uBAAuB,CAACjI,IAAD,CAA9C;AACAmN,MAAAA,YAAY,GAAG7E,oBAAoB,CAACF,mBAAmB,CAACxE,SAAS,CAACC,OAAX,EAAoB0J,cAApB,CAApB,EAAyDvQ,GAAG,CAAC8N,gBAAgB,CAACjH,OAAlB,EAA2B0J,cAA3B,CAA5D,CAAnC;AACH;;AACD,QAAMC,cAAc,GAAG,CAACJ,YAAY,GAAGjC,UAAU,CAACtH,OAAd,GAAwB6G,cAAc,CAAC7G,OAAf,CAAuBf,GAAvB,CAA2B9C,IAA3B,CAArC,MACnBmN,YADJ;;AAEA,QAAIA,YAAJ,EAAkB;AACdzC,MAAAA,cAAc,CAAC7G,OAAf,CAAuB0D,GAAvB,CAA2BvH,IAA3B;AACH,KAFD,MAGK;AACD0K,MAAAA,cAAc,CAAC7G,OAAf,CAAuB8I,MAAvB,CAA8B3M,IAA9B;AACH;;AACDmL,IAAAA,UAAU,CAACtH,OAAX,GAAqBuJ,YAAY,GAC3BD,YAD2B,GAE3B,CAAC,CAACzC,cAAc,CAAC7G,OAAf,CAAuByJ,IAF/B;AAGA,WAAOtB,gBAAgB,CAACnI,OAAjB,CAAyBoI,KAAzB,GACDuB,cADC,GAEDH,yBAAyB,KAAK3C,cAAc,CAAC7G,OAAf,CAAuByJ,IAF3D;AAGH,GA3B2B,EA2BzB,EA3ByB,CAA5B;AA4BA,MAAMG,iBAAiB,GAAGvV,WAAW,CAAC,UAAC8H,IAAD,EAAOtH,KAAP,EAAcgV,eAAd,EAAkC;AACpE,QAAMC,YAAY,GAAGhV,OAAO,CAACD,KAAD,CAA5B;;AACA,SAAK,IAAMwD,GAAX,IAAkBxD,KAAlB,EAAyB;AACrB,UAAMyO,SAAS,aAAMuG,eAAe,IAAI1N,IAAzB,SAAgC2N,YAAY,cAAOzR,GAAP,oBAAoBA,GAApB,CAA5C,CAAf;AACA,UAAMrB,KAAK,GAAG+I,SAAS,CAACC,OAAV,CAAkBsD,SAAlB,CAAd;;AACA,UAAIrO,QAAQ,CAACJ,KAAK,CAACwD,GAAD,CAAN,CAAZ,EAA0B;AACtBuR,QAAAA,iBAAiB,CAACzN,IAAD,EAAOtH,KAAK,CAACwD,GAAD,CAAZ,EAAmBiL,SAAnB,CAAjB;AACH;;AACD,UAAItM,KAAJ,EAAW;AACP+R,QAAAA,aAAa,CAAC/R,KAAD,EAAQnC,KAAK,CAACwD,GAAD,CAAb,CAAb;AACAgR,QAAAA,QAAQ,CAAC/F,SAAD,CAAR;AACH;AACJ;AACJ,GAboC,EAalC,CAACyF,aAAD,EAAgBM,QAAhB,CAbkC,CAArC;AAcA,MAAMU,gBAAgB,GAAG1V,WAAW,CAAC,UAAC8H,IAAD,EAAOtH,KAAP,EAAiB;AAClD,QAAMmC,KAAK,GAAG+I,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CAAd;;AACA,QAAInF,KAAJ,EAAW;AACP+R,MAAAA,aAAa,CAAC/R,KAAD,EAAQnC,KAAR,CAAb;AACA,UAAM8I,MAAM,GAAG0L,QAAQ,CAAClN,IAAD,CAAvB;;AACA,UAAIsD,SAAS,CAAC9B,MAAD,CAAb,EAAuB;AACnB,eAAOA,MAAP;AACH;AACJ,KAND,MAOK,IAAI,CAACiF,WAAW,CAAC/N,KAAD,CAAhB,EAAyB;AAC1B+U,MAAAA,iBAAiB,CAACzN,IAAD,EAAOtH,KAAP,CAAjB;AACH;AACJ,GAZmC,EAYjC,CAACwU,QAAD,EAAWN,aAAX,EAA0Ba,iBAA1B,CAZiC,CAApC;AAaA,MAAMI,iBAAiB,GAAG3V,WAAW;AAAA,0EAAC,kBAAO8H,IAAP,EAAa8N,YAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5BjT,cAAAA,KAD4B,GACpB+I,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CADoB;;AAAA,mBAE9BnF,KAF8B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGV8I,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsC7I,KAAtC,CAHH;;AAAA;AAGxBsH,cAAAA,MAHwB;AAI9BoK,cAAAA,uBAAuB,CAACvM,IAAD,EAAOmC,MAAP,EAAc2L,YAAY,GAAG,IAAH,GAAU,KAApC,CAAvB;AAJ8B,gDAKvBxP,aAAa,CAAC6D,MAAD,CALU;;AAAA;AAAA,gDAO3B,KAP2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAQlC,CAACoK,uBAAD,EAA0B7I,wBAA1B,CARkC,CAArC;AASA,MAAMqK,iCAAiC,GAAG7V,WAAW;AAAA,0EAAC,kBAAO8V,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACzB5H,kBAAkB,CAACC,gBAAD,EAAmB3C,wBAAnB,EAA6C0E,mBAAmB,CAACxE,SAAS,CAACC,OAAX,CAAhE,EAAqFyC,kBAArF,EAAyGkF,oBAAoB,CAAC3H,OAA9H,CADO;;AAAA;AAAA;AAC1CtB,cAAAA,MAD0C,yBAC1CA,MAD0C;AAE5C0L,cAAAA,mBAF4C,GAEtBpD,UAAU,CAAChH,OAFW;AAGlDgH,cAAAA,UAAU,CAAChH,OAAX,GAAqBvF,aAAa,CAACiE,MAAD,CAAlC;;AACA,kBAAI5J,OAAO,CAACqV,OAAD,CAAX,EAAsB;AAClBA,gBAAAA,OAAO,CAACrO,OAAR,CAAgB,UAACK,IAAD,EAAU;AACtB,sBAAMmC,KAAK,GAAGnF,GAAG,CAACuF,MAAD,EAASvC,IAAT,CAAjB;;AACA,sBAAImC,KAAJ,EAAW;AACPxG,oBAAAA,GAAG,CAAC0O,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,EAA0BmC,KAA1B,CAAH;AACH,mBAFD,MAGK;AACD1C,oBAAAA,KAAK,CAAC4K,SAAS,CAACxG,OAAX,EAAoB,CAAC7D,IAAD,CAApB,CAAL;AACH;AACJ,iBARD;AASAsM,gBAAAA,QAAQ;AACX,eAXD,MAYK;AACKnK,gBAAAA,OADL,GACanF,GAAG,CAACuF,MAAD,EAASyL,OAAT,CADhB;AAEDzB,gBAAAA,uBAAuB,CAACyB,OAAD,EAAW7L,OAAK,uBAAM6L,OAAN,EAAgB7L,OAAhB,IAA0B,EAA1C,EAA+C8L,mBAAmB,KAAKpD,UAAU,CAAChH,OAAlF,CAAvB;AACH;;AAnBiD,gDAoB3CvF,aAAa,CAAC+L,SAAS,CAACxG,OAAX,CApB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAqBlD,CACCyI,QADD,EAECC,uBAFD,EAGC7I,wBAHD,EAIC4C,kBAJD,EAKCD,gBALD,CArBkD,CAArD;AA4BA,MAAM6H,iBAAiB,GAAGhW,WAAW;AAAA,0EAAC,kBAAO8V,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BzQ,cAAAA,MAD4B,GACnByQ,OAAO,IAAIxR,MAAM,CAAC+B,IAAP,CAAYqF,SAAS,CAACC,OAAtB,CADQ;;AAAA,mBAE9B+H,8BAF8B;AAAA;AAAA;AAAA;;AAAA,gDAGvBmC,iCAAiC,CAACxQ,MAAD,CAHV;;AAAA;AAAA,mBAK9B5E,OAAO,CAAC4E,MAAD,CALuB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMT4Q,OAAO,CAACC,GAAR,CAAY7Q,MAAM,CAACmD,GAAP;AAAA,sFAAW,kBAAOnE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAsBsR,iBAAiB,CAACtR,IAAD,EAAO,IAAP,CAAvC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAX;;AAAA;AAAA;AAAA;AAAA,kBAAZ,CANS;;AAAA;AAMxBlB,cAAAA,MANwB;AAO9BiR,cAAAA,QAAQ;AAPsB,gDAQvBjR,MAAM,CAAC4G,KAAP,CAAa5E,OAAb,CARuB;;AAAA;AAAA;AAAA,qBAUrBwQ,iBAAiB,CAACtQ,MAAD,CAVI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAWlC,CACCwQ,iCADD,EAECF,iBAFD,EAGCvB,QAHD,EAICV,8BAJD,CAXkC,CAArC;;AAiBA,MAAMyC,cAAc,GAAG,SAAjBA,cAAiB,CAACrO,IAAD;AAAA,WAAUiL,aAAa,CAACpH,OAAd,IAC7B2G,cAAc,CAAC3G,OAAf,CAAuBf,GAAvB,CAA2B9C,IAA3B,CAD6B,IAE7BwK,cAAc,CAAC3G,OAAf,CAAuBf,GAAvB,CAA2B,CAAC9C,IAAI,CAACzE,KAAL,CAAW,KAAX,KAAqB,EAAtB,EAA0B,CAA1B,CAA3B,CAFmB;AAAA,GAAvB;;AAGA,WAAS+S,QAAT,CAAkBtF,KAAlB,EAAyBuF,qBAAzB,EAAgDC,cAAhD,EAAgE;AAC5D,QAAIhC,YAAY,GAAG,KAAnB;AACA,QAAMiC,YAAY,GAAG9V,OAAO,CAACqQ,KAAD,CAA5B;AACA,KAACyF,YAAY,GACPzF,KADO,GAEP,CAACA,KAAD,CAFN,EAEerJ,OAFf,CAEuB,UAACK,IAAD,EAAU;AAC7B,UAAM0O,iBAAiB,GAAGrN,QAAQ,CAACrB,IAAD,CAAlC;AACAwM,MAAAA,YAAY,GACRoB,gBAAgB,CAACc,iBAAiB,GAAG1O,IAAH,GAAUxD,MAAM,CAAC+B,IAAP,CAAYyB,IAAZ,EAAkB,CAAlB,CAA5B,EAAkD0O,iBAAiB,GAC7EH,qBAD6E,GAE7E/R,MAAM,CAACyE,MAAP,CAAcjB,IAAd,EAAoB,CAApB,CAFU,CAAhB,IAEiCyO,YAFjC,GAGM,IAHN,GAIMJ,cAAc,CAACrO,IAAD,CALxB;AAMH,KAVD;;AAWA,QAAIwM,YAAY,IAAIiC,YAApB,EAAkC;AAC9BnC,MAAAA,QAAQ;AACX;;AACD,QAAIkC,cAAc,IAAKC,YAAY,IAAIF,qBAAvC,EAA+D;AAC3DL,MAAAA,iBAAiB,CAACO,YAAY,GAAG1R,SAAH,GAAeiM,KAA5B,CAAjB;AACH;AACJ;;AACDsC,EAAAA,eAAe,CAACzH,OAAhB,GAA0ByH,eAAe,CAACzH,OAAhB,GACpByH,eAAe,CAACzH,OADI;AAAA,0EAEpB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS7F,cAAAA,IAAT,UAASA,IAAT,EAAe2Q,MAAf,UAAeA,MAAf;AACQ3O,cAAAA,IADR,GACe2O,MAAM,GAAGA,MAAM,CAAC3O,IAAV,GAAiB,EADtC;AAEQzC,cAAAA,MAFR,GAEiBqG,SAAS,CAACC,OAF3B;AAGQtB,cAAAA,MAHR,GAGiB8H,SAAS,CAACxG,OAH3B;AAIQhJ,cAAAA,KAJR,GAIgB0C,MAAM,CAACyC,IAAD,CAJtB;AAKQ4O,cAAAA,YALR,GAKuB5R,GAAG,CAACuF,MAAD,EAASvC,IAAT,CAL1B;;AAAA,kBAOOnF,KAPP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUQ8M,cAAAA,WAVR,GAUsB3J,IAAI,KAAKvE,MAAM,CAACC,IAVtC;AAWQmV,cAAAA,oBAXR,GAW+BrH,cAAc,CAAC;AACxCE,gBAAAA,QAAQ,EAAE,CAAC,CAACkH,YAD4B;AAExCnH,gBAAAA,UAAU,EAAVA,UAFwC;AAGxCE,gBAAAA,WAAW,EAAXA,WAHwC;AAIxCC,gBAAAA,UAAU,EAAVA,UAJwC;AAKxCC,gBAAAA,oBAAoB,EAApBA,oBALwC;AAMxCC,gBAAAA,QAAQ,EAARA,QANwC;AAOxCC,gBAAAA,kBAAkB,EAAlBA,kBAPwC;AAQxCC,gBAAAA,WAAW,EAAEkD,cAAc,CAACrH;AARY,eAAD,CAX7C;AAqBQiL,cAAAA,iBArBR,GAqB4B5B,QAAQ,CAAClN,IAAD,CArBpC;AAsBMwM,cAAAA,YAtBN,GAsBqB6B,cAAc,CAACrO,IAAD,CAAd,IAAwB8O,iBAtB7C;;AAuBE,kBAAInH,WAAW,IACX,CAAC3K,GAAG,CAACsN,gBAAgB,CAACzG,OAAlB,EAA2B7D,IAA3B,CADJ,IAEAgM,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAF7B,EAEsC;AAClCzQ,gBAAAA,GAAG,CAAC2O,gBAAgB,CAACzG,OAAlB,EAA2B7D,IAA3B,EAAiC,IAAjC,CAAH;AACAwM,gBAAAA,YAAY,GAAG,IAAf;AACH;;AA5BH,mBA6BMqC,oBA7BN;AAAA;AAAA;AAAA;;AAAA,gDA8BarC,YAAY,IAAIF,QAAQ,EA9BrC;;AAAA;AAAA,mBAgCMV,8BAhCN;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAiC+BxF,kBAAkB,CAACC,gBAAD,EAAmB3C,wBAAnB,EAA6C0E,mBAAmB,CAAC7K,MAAD,CAAhE,EAA0E+I,kBAA1E,EAA8FkF,oBAAoB,CAAC3H,OAAnH,CAjCjD;;AAAA;AAAA;AAiCctB,cAAAA,OAjCd,0BAiCcA,MAjCd;AAkCY0L,cAAAA,mBAlCZ,GAkCkCpD,UAAU,CAAChH,OAlC7C;AAmCMgH,cAAAA,UAAU,CAAChH,OAAX,GAAqBvF,aAAa,CAACiE,OAAD,CAAlC;AACAJ,cAAAA,KAAK,GAAInF,GAAG,CAACuF,OAAD,EAASvC,IAAT,CAAH,uBACAA,IADA,EACOhD,GAAG,CAACuF,OAAD,EAASvC,IAAT,CADV,IAEH,EAFN;;AAGA,kBAAIiO,mBAAmB,KAAKpD,UAAU,CAAChH,OAAvC,EAAgD;AAC5C2I,gBAAAA,YAAY,GAAG,IAAf;AACH;;AAzCP;AAAA;;AAAA;AAAA;AAAA,qBA4CoB7I,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsC7I,KAAtC,CA5CjC;;AAAA;AA4CMsH,cAAAA,KA5CN;;AAAA;AA8CE,kBAAI,CAACoK,uBAAuB,CAACvM,IAAD,EAAOmC,KAAP,CAAxB,IAAyCqK,YAA7C,EAA2D;AACvDF,gBAAAA,QAAQ;AACX;;AAhDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFoB;;AAAA;AAAA;AAAA;AAAA,KAA1B;AAoDA,MAAMyC,wBAAwB,GAAG7W,WAAW,CAAC,YAAiB;AAAA,QAAhB+I,MAAgB,uEAAP,EAAO;AAC1D,QAAMiG,WAAW,GAAG5I,aAAa,CAACwM,gBAAgB,CAACjH,OAAlB,CAAb,GACdvC,eAAe,CAACsC,SAAS,CAACC,OAAX,CADD,GAEdiH,gBAAgB,CAACjH,OAFvB;AAGAuC,IAAAA,kBAAkB,CAACC,gBAAD,EAAmB3C,wBAAnB,EAA6CpH,qBAAqB,CAACE,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBsK,WAAlB,CAAd,EAA8CjG,MAA9C,CAAD,CAAlE,EAA2HqF,kBAA3H,EAA+IkF,oBAAoB,CAAC3H,OAApK,CAAlB,CAA+LmL,IAA/L,CAAoM,kBAAgB;AAAA,UAAbzM,MAAa,UAAbA,MAAa;AAChN,UAAM0L,mBAAmB,GAAGpD,UAAU,CAAChH,OAAvC;AACAgH,MAAAA,UAAU,CAAChH,OAAX,GAAqBvF,aAAa,CAACiE,MAAD,CAAlC;;AACA,UAAI0L,mBAAmB,KAAKpD,UAAU,CAAChH,OAAvC,EAAgD;AAC5CyI,QAAAA,QAAQ;AACX;AACJ,KAND;AAOH,GAX2C,EAY5C;AACA,GAACA,QAAD,EAAW5I,wBAAX,EAAqC4C,kBAArC,CAb4C,CAA5C;AAcA,MAAM2I,wBAAwB,GAAG/W,WAAW,CAAC,UAAC2C,KAAD,EAAQkF,WAAR,EAAwB;AACjE,QAAIuL,eAAe,CAACzH,OAAhB,IAA2BhJ,KAA/B,EAAsC;AAClCiF,MAAAA,iCAAiC,CAAC8D,SAAS,CAACC,OAAX,EAAoByH,eAAe,CAACzH,OAApC,EAA6ChJ,KAA7C,EAAoDkF,WAApD,CAAjC;AACH;AACJ,GAJ2C,EAIzC,EAJyC,CAA5C;AAKA,MAAMmP,8BAA8B,GAAGhX,WAAW,CAAC,UAAC2C,KAAD,EAAQkF,WAAR,EAAwB;AACvE,QAAI,CAAClF,KAAD,IACCA,KAAK,IACFkO,kBAAkB,CAAC0C,kBAAkB,CAAC5H,OAApB,EAA6BhJ,KAAK,CAACD,GAAN,CAAUoF,IAAvC,CADrB,IAEG,CAACD,WAHT,EAGuB;AACnB;AACH;;AACDkP,IAAAA,wBAAwB,CAACpU,KAAD,EAAQkF,WAAR,CAAxB;AAPuE,QAQ/DC,IAR+D,GAQtDnF,KAAK,CAACD,GARgD,CAQ/DoF,IAR+D;AASvEqK,IAAAA,SAAS,CAACxG,OAAV,GAAoBpE,KAAK,CAAC4K,SAAS,CAACxG,OAAX,EAAoB,CAAC7D,IAAD,CAApB,CAAzB;AACAsK,IAAAA,gBAAgB,CAACzG,OAAjB,GAA2BpE,KAAK,CAAC6K,gBAAgB,CAACzG,OAAlB,EAA2B,CAAC7D,IAAD,CAA3B,CAAhC;AACA+K,IAAAA,wBAAwB,CAAClH,OAAzB,GAAmCpE,KAAK,CAACsL,wBAAwB,CAAClH,OAA1B,EAAmC,CAAC7D,IAAD,CAAnC,CAAxC;AACA,KACI0K,cADJ,EAEIC,uBAFJ,EAGIC,cAHJ,EAIIJ,cAJJ,EAKE7K,OALF,CAKU,UAACpD,IAAD;AAAA,aAAUA,IAAI,CAACsH,OAAL,CAAa8I,MAAb,CAAoB3M,IAApB,CAAV;AAAA,KALV;;AAMA,QAAIgM,gBAAgB,CAACnI,OAAjB,CAAyBxD,OAAzB,IACA2L,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAD7B,EACsC;AAClCE,MAAAA,QAAQ;;AACR,UAAIV,8BAAJ,EAAoC;AAChCmD,QAAAA,wBAAwB;AAC3B;AACJ;AACJ,GAzBiD,EAyB/C,CACCzC,QADD,EAECV,8BAFD,EAGCmD,wBAHD,EAICE,wBAJD,CAzB+C,CAAlD;;AA+BA,WAASE,UAAT,CAAoBnP,IAApB,EAA0B;AACtB,QAAIA,IAAJ,EAAU;AACNP,MAAAA,KAAK,CAAC4K,SAAS,CAACxG,OAAX,EAAoBlL,OAAO,CAACqH,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,CAACA,IAAD,CAA3C,CAAL;AACH,KAFD,MAGK;AACDqK,MAAAA,SAAS,CAACxG,OAAV,GAAoB,EAApB;AACH;;AACDyI,IAAAA,QAAQ;AACX;;AACD,MAAM8C,gBAAgB,GAAG,SAAnBA,gBAAmB,SAAmD;AAAA,QAAhDpP,IAAgD,UAAhDA,IAAgD;AAAA,QAA1ChC,IAA0C,UAA1CA,IAA0C;AAAA,QAApCoE,KAAoC,UAApCA,KAAoC;AAAA,QAA7BC,OAA6B,UAA7BA,OAA6B;AAAA,QAApBmK,YAAoB,UAApBA,YAAoB;AACxE,QAAM3R,KAAK,GAAG+I,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CAAd;;AACA,QAAI,CAACkC,WAAW,CAAClF,GAAG,CAACqN,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,CAAJ,EAA+B;AAC3ChC,MAAAA,IAAI,EAAJA,IAD2C;AAE3CqE,MAAAA,OAAO,EAAPA,OAF2C;AAG3CD,MAAAA,KAAK,EAALA;AAH2C,KAA/B,CAAhB,EAII;AACAzG,MAAAA,GAAG,CAAC0O,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,EAA0B;AACzBhC,QAAAA,IAAI,EAAJA,IADyB;AAEzBoE,QAAAA,KAAK,EAALA,KAFyB;AAGzBC,QAAAA,OAAO,EAAPA,OAHyB;AAIzBzH,QAAAA,GAAG,EAAEC,KAAK,GAAGA,KAAK,CAACD,GAAT,GAAe,EAJA;AAKzBmI,QAAAA,QAAQ,EAAE;AALe,OAA1B,CAAH;;AAOA,UAAIyJ,YAAJ,EAAkB;AACdF,QAAAA,QAAQ;AACX;AACJ;AACJ,GAlBD;;AAmBA,WAAS+C,QAAT,CAAkBrP,IAAlB,EAA4C;AAAA,QAApBhC,IAAoB,uEAAb,EAAa;AAAA,QAATqE,OAAS;;AACxC,QAAIhB,QAAQ,CAACrB,IAAD,CAAZ,EAAoB;AAChBoP,MAAAA,gBAAgB,CAAC5S,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc;AAAEoD,QAAAA,IAAI,EAAJA;AAAF,OAAd,EAAyBlH,QAAQ,CAACkF,IAAD,CAAR,GAClD;AACEoE,QAAAA,KAAK,EAAEpE,IADT;AAEEA,QAAAA,IAAI,EAAE;AAFR,OADkD,GAKlD;AACEA,QAAAA,IAAI,EAAJA,IADF;AAEEqE,QAAAA,OAAO,EAAPA;AAFF,OALyB,CAAd,EAQR;AAAEmK,QAAAA,YAAY,EAAE;AAAhB,OARQ,CAAD,CAAhB;AASH,KAVD,MAWK,IAAI7T,OAAO,CAACqH,IAAD,CAAX,EAAmB;AACpBA,MAAAA,IAAI,CAACL,OAAL,CAAa,UAACwC,KAAD;AAAA,eAAWiN,gBAAgB,CAAC5S,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBuF,KAAlB,CAAD,CAA3B;AAAA,OAAb;AACAmK,MAAAA,QAAQ;AACX;AACJ;;AACD,WAASgD,KAAT,CAAeC,UAAf,EAA2BrS,YAA3B,EAAyC;AACrC,QAAMkK,WAAW,GAAGoD,cAAc,CAAC3G,OAAnC;AACA,QAAM2L,uBAAuB,GAAG3S,WAAW,CAACK,YAAD,CAA3C;AACA,QAAMuS,qBAAqB,GAAGD,uBAAuB,GAC/C1E,gBAAgB,CAACjH,OAD8B,GAE/C3G,YAFN;AAGA,QAAMgK,WAAW,GAAG5F,eAAe,CAACsC,SAAS,CAACC,OAAX,EAAoB0L,UAApB,CAAnC;;AACA,QAAIlO,QAAQ,CAACkO,UAAD,CAAZ,EAA0B;AACtB,aAAOtI,iBAAiB,CAACC,WAAD,EAAcqI,UAAd,EAA0BnI,WAA1B,EAAuCoI,uBAAuB,GAChFxS,GAAG,CAACyS,qBAAD,EAAwBF,UAAxB,CAD6E,GAEhFrS,YAFkB,EAEJ,IAFI,CAAxB;AAGH;;AACD,QAAIvE,OAAO,CAAC4W,UAAD,CAAX,EAAyB;AACrB,aAAOA,UAAU,CAAC7S,MAAX,CAAkB,UAACC,QAAD,EAAWqD,IAAX;AAAA,eAAqBxD,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBD,QAAlB,CAAd,sBAA8CqD,IAA9C,EAAqDiH,iBAAiB,CAACC,WAAD,EAAclH,IAAd,EAAoBoH,WAApB,EAAiCqI,qBAAjC,CAAtE,EAArB;AAAA,OAAlB,EAA0K,EAA1K,CAAP;AACH;;AACDxE,IAAAA,aAAa,CAACpH,OAAd,GAAwB,IAAxB;AACA,QAAMxI,MAAM,GAAI,CAACiD,aAAa,CAAC4I,WAAD,CAAd,IAA+BA,WAAhC,IAAgDuI,qBAA/D;AACA,WAAOF,UAAU,IAAIA,UAAU,CAAC5N,IAAzB,GACDrF,qBAAqB,CAACjB,MAAD,CADpB,GAEDA,MAFN;AAGH;;AACD,WAASqU,UAAT,CAAoB1P,IAApB,EAA0B;AACtB,QAAI4D,SAAS,CAACC,OAAd,EAAuB;AACnB,OAAClL,OAAO,CAACqH,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,CAACA,IAAD,CAAxB,EAAgCL,OAAhC,CAAwC,UAACwH,SAAD;AAAA,eAAe+H,8BAA8B,CAACtL,SAAS,CAACC,OAAV,CAAkBsD,SAAlB,CAAD,EAA+B,IAA/B,CAA7C;AAAA,OAAxC;AACH;AACJ;;AACD,WAASwI,iBAAT,CAA2B/U,GAA3B,EAAsD;AAAA,QAAtBgV,eAAsB,uEAAJ,EAAI;;AAClD,QAAI,CAAChV,GAAG,CAACoF,IAAT,EAAe;AACX;AACA,aAAO6P,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+BlV,GAA/B,CAAP;AACH;;AAJiD,QAK1CoF,IAL0C,GAKpBpF,GALoB,CAK1CoF,IAL0C;AAAA,QAKpChC,IALoC,GAKpBpD,GALoB,CAKpCoD,IALoC;AAAA,QAK9BtF,KAL8B,GAKpBkC,GALoB,CAK9BlC,KAL8B;AAMlD,QAAMqX,4BAA4B,GAAGvT,MAAM,CAACI,MAAP,CAAc;AAAEhC,MAAAA,GAAG,EAAHA;AAAF,KAAd,EAAuBgV,eAAvB,CAArC;AACA,QAAMrS,MAAM,GAAGqG,SAAS,CAACC,OAAzB;AACA,QAAM9I,iBAAiB,GAAG+O,yBAAyB,CAAClP,GAAD,CAAnD;AACA,QAAIC,KAAK,GAAG0C,MAAM,CAACyC,IAAD,CAAlB;AACA,QAAIgQ,mBAAmB,GAAG,IAA1B;AACA,QAAI5C,YAAJ;AACA,QAAIlQ,YAAJ;;AACA,QAAInC,iBAAiB,GACfF,KAAK,IACHlC,OAAO,CAACkC,KAAK,CAAC6C,OAAP,CADT,IAEE7C,KAAK,CAAC6C,OAAN,CAAcN,MAAd,CAAqBC,OAArB,EAA8BqE,IAA9B,CAAmC,UAACxB,MAAD,EAAY;AAC3C,aAAOxH,KAAK,KAAKwH,MAAM,CAACtF,GAAP,CAAWlC,KAArB,IAA8BwH,MAAM,CAACtF,GAAP,KAAeA,GAApD;AACH,KAFD,CAHa,GAMfC,KAAK,IAAID,GAAG,KAAKC,KAAK,CAACD,GAN7B,EAMkC;AAC9B2C,MAAAA,MAAM,CAACyC,IAAD,CAAN,GAAexD,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB/B,KAAlB,CAAd,EAAwC+U,eAAxC,CAAf;AACA;AACH;;AACD,QAAI5R,IAAJ,EAAU;AACN,UAAMiC,eAAe,GAAGkJ,WAAW,CAACvO,GAAD,EAAM;AAAA,eAAMsU,8BAA8B,CAACrU,KAAD,CAApC;AAAA,OAAN,CAAnC;AACAA,MAAAA,KAAK,GAAGE,iBAAiB,GACnByB,MAAM,CAACI,MAAP,CAAc;AAAEc,QAAAA,OAAO,+BACZ7C,KAAK,IAAIA,KAAK,CAAC6C,OAAhB,IAA4B,EADf,IAEjB;AACI9C,UAAAA,GAAG,EAAHA,GADJ;AAEIqF,UAAAA,eAAe,EAAfA;AAFJ,SAFiB,EAAT;AAMTrF,QAAAA,GAAG,EAAE;AAAEoD,UAAAA,IAAI,EAAJA,IAAF;AAAQgC,UAAAA,IAAI,EAAJA;AAAR;AANI,OAAd,EAM4B4P,eAN5B,CADmB,GAO4BpT,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBmT,4BAAlB,CAAd,EAA+D;AAAE9P,QAAAA,eAAe,EAAfA;AAAF,OAA/D,CAPrD;AAQH,KAVD,MAWK;AACDpF,MAAAA,KAAK,GAAGkV,4BAAR;AACH;;AACDxS,IAAAA,MAAM,CAACyC,IAAD,CAAN,GAAenF,KAAf;;AACA,QAAI,CAACyD,aAAa,CAACwM,gBAAgB,CAACjH,OAAlB,CAAlB,EAA8C;AAC1C3G,MAAAA,YAAY,GAAGF,GAAG,CAAC8N,gBAAgB,CAACjH,OAAlB,EAA2B7D,IAA3B,CAAlB;AACAgQ,MAAAA,mBAAmB,GAAGnT,WAAW,CAACK,YAAD,CAAjC;AACAkQ,MAAAA,YAAY,GAAGrE,kBAAkB,CAAC0C,kBAAkB,CAAC5H,OAApB,EAA6B7D,IAA7B,CAAjC;;AACA,UAAI,CAACgQ,mBAAD,IAAwB,CAAC5C,YAA7B,EAA2C;AACvCR,QAAAA,aAAa,CAAC/R,KAAD,EAAQqC,YAAR,CAAb;AACH;AACJ;;AACD,QAAI0O,8BAA8B,IAC9B,CAACwB,YADD,IAEApB,gBAAgB,CAACnI,OAAjB,CAAyBxD,OAF7B,EAEsC;AAClC0O,MAAAA,wBAAwB;AAC3B,KAJD,MAKK,IAAI,CAACzQ,aAAa,CAACsR,eAAD,CAAlB,EAAqC;AACtCjF,MAAAA,uBAAuB,CAAC9G,OAAxB,CAAgC0D,GAAhC,CAAoCvH,IAApC;;AACA,UAAI,CAAC4H,UAAD,IAAeoE,gBAAgB,CAACnI,OAAjB,CAAyBxD,OAA5C,EAAqD;AACjDsD,QAAAA,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsC7I,KAAtC,CAAb,CAA0DmU,IAA1D,CAA+D,UAAC7M,KAAD,EAAW;AACtE,cAAM8L,mBAAmB,GAAGpD,UAAU,CAAChH,OAAvC;AACAvF,UAAAA,aAAa,CAAC6D,KAAD,CAAb,GACMyI,cAAc,CAAC/G,OAAf,CAAuB0D,GAAvB,CAA2BvH,IAA3B,CADN,GAEO6K,UAAU,CAAChH,OAAX,GAAqB,KAF5B;;AAGA,cAAIoK,mBAAmB,KAAKpD,UAAU,CAAChH,OAAvC,EAAgD;AAC5CyI,YAAAA,QAAQ;AACX;AACJ,SARD;AASH;AACJ;;AACD,QAAI,CAACvB,wBAAwB,CAAClH,OAAzB,CAAiC7D,IAAjC,CAAD,IACA,EAAEoN,YAAY,IAAI4C,mBAAlB,CADJ,EAC4C;AACxCjF,MAAAA,wBAAwB,CAAClH,OAAzB,CAAiC7D,IAAjC,IAAyCgQ,mBAAmB,GAAG7O,aAAa,CAAC5D,MAAD,EAAS1C,KAAK,CAACD,GAAf,CAAhB,GAAsCsC,YAAlG;AACH;;AACD,QAAIc,IAAJ,EAAU;AACNrD,MAAAA,oBAAoB,CAAC;AACjBE,QAAAA,KAAK,EAAEE,iBAAiB,IAAIF,KAAK,CAAC6C,OAA3B,GACD7C,KAAK,CAAC6C,OAAN,CAAc7C,KAAK,CAAC6C,OAAN,CAAc1B,MAAd,GAAuB,CAArC,CADC,GAEDnB,KAHW;AAIjBE,QAAAA,iBAAiB,EAAEA,iBAAiB,IAAImO,aAAa,CAACtO,GAAD,CAJpC;AAKjBE,QAAAA,YAAY,EAAEwQ,eAAe,CAACzH;AALb,OAAD,CAApB;AAOH;AACJ;;AACD,WAASoM,QAAT,CAAkBC,sBAAlB,EAA0CC,iBAA1C,EAA6D;AACzD,QAAIxE,iBAAJ,EAAuB;AACnB;AACH;;AACD,QAAItK,QAAQ,CAAC6O,sBAAD,CAAZ,EAAsC;AAClCP,MAAAA,iBAAiB,CAAC;AAAE3P,QAAAA,IAAI,EAAEkQ;AAAR,OAAD,EAAmCC,iBAAnC,CAAjB;AACA;AACH;;AACD,QAAIrX,QAAQ,CAACoX,sBAAD,CAAR,IAAoC,UAAUA,sBAAlD,EAA0E;AACtEP,MAAAA,iBAAiB,CAACO,sBAAD,EAAyBC,iBAAzB,CAAjB;AACA;AACH;;AACD,WAAO,UAACvV,GAAD;AAAA,aAASA,GAAG,IAAI+U,iBAAiB,CAAC/U,GAAD,EAAMsV,sBAAN,CAAjC;AAAA,KAAP;AACH;;AACD,MAAME,YAAY,GAAGlY,WAAW,CAAC,UAACmY,QAAD;AAAA;AAAA,4EAAc,kBAAOC,CAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3C,oBAAIA,CAAJ,EAAO;AACHA,kBAAAA,CAAC,CAACC,cAAF;AACAD,kBAAAA,CAAC,CAACE,OAAF;AACH;;AACGhT,gBAAAA,WALuC,GAKzB,EALyB;AAMrCD,gBAAAA,MANqC,GAM5BqG,SAAS,CAACC,OANkB;AAOvCqD,gBAAAA,WAPuC,GAOzB5F,eAAe,CAAC/D,MAAD,CAPU;;AAQ3C,oBAAIyO,gBAAgB,CAACnI,OAAjB,CAAyBwI,YAA7B,EAA2C;AACvChB,kBAAAA,eAAe,CAACxH,OAAhB,GAA0B,IAA1B;AACAyI,kBAAAA,QAAQ;AACX;;AAX0C;;AAAA,qBAanCV,8BAbmC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAcFxF,kBAAkB,CAACC,gBAAD,EAAmB3C,wBAAnB,EAA6CpH,qBAAqB,CAAC4K,WAAD,CAAlE,EAAiFZ,kBAAjF,EAAqGkF,oBAAoB,CAAC3H,OAA1H,CAdhB;;AAAA;AAAA;AAc3BtB,gBAAAA,MAd2B,0BAc3BA,MAd2B;AAcnBtB,gBAAAA,MAdmB,0BAcnBA,MAdmB;AAenCoJ,gBAAAA,SAAS,CAACxG,OAAV,GAAoBtB,MAApB;AACA/E,gBAAAA,WAAW,GAAG+E,MAAd;AACA2E,gBAAAA,WAAW,GAAGjG,MAAd;AAjBmC;AAAA;;AAAA;AAAA,0CAoBfzE,MAAM,CAACyE,MAAP,CAAc1D,MAAd,CApBe;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBxB1C,gBAAAA,KApBwB;;AAAA,qBAqB3BA,KArB2B;AAAA;AAAA;AAAA;;AAsBZmF,gBAAAA,KAtBY,GAsBAnF,KAtBA,CAsBnBD,GAtBmB,CAsBZoF,IAtBY;AAAA;AAAA,uBAuBF2D,aAAa,CAACC,SAAD,EAAYF,wBAAZ,EAAsC7I,KAAtC,CAvBX;;AAAA;AAuBrB4V,gBAAAA,UAvBqB;;AAwB3B,oBAAIA,UAAU,CAACzQ,KAAD,CAAd,EAAsB;AAClBrE,kBAAAA,GAAG,CAAC6B,WAAD,EAAcwC,KAAd,EAAoByQ,UAAU,CAACzQ,KAAD,CAA9B,CAAH;AACA4K,kBAAAA,cAAc,CAAC/G,OAAf,CAAuB8I,MAAvB,CAA8B3M,KAA9B;AACH,iBAHD,MAIK;AACD,sBAAI2K,uBAAuB,CAAC9G,OAAxB,CAAgCf,GAAhC,CAAoC9C,KAApC,CAAJ,EAA+C;AAC3C4K,oBAAAA,cAAc,CAAC/G,OAAf,CAAuB0D,GAAvB,CAA2BvH,KAA3B;AACH;AACJ;;AAhC0B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAoCnC1B,aAAa,CAACd,WAAD,CApCsB;AAAA;AAAA;AAAA;;AAqCnC6M,gBAAAA,SAAS,CAACxG,OAAV,GAAoB,EAApB;AACAyI,gBAAAA,QAAQ;AAtC2B;AAAA,uBAuC7B+D,QAAQ,CAAC/T,qBAAqB,CAAC4K,WAAD,CAAtB,EAAqCoJ,CAArC,CAvCqB;;AAAA;AAAA;AAAA;;AAAA;AA0CnCjG,gBAAAA,SAAS,CAACxG,OAAV,GAAoBrG,WAApB;;AACA,oBAAI2M,gBAAgB,IAAI0B,KAAxB,EAA+B;AAC3BvO,kBAAAA,iBAAiB,CAACC,MAAD,EAASC,WAAT,CAAjB;AACH;;AA7CkC;AAAA;AAiDvC0N,gBAAAA,cAAc,CAACrH,OAAf,GAAyB,IAAzB;AACAwH,gBAAAA,eAAe,CAACxH,OAAhB,GAA0B,KAA1B;AACAuH,gBAAAA,cAAc,CAACvH,OAAf,GAAyBuH,cAAc,CAACvH,OAAf,GAAyB,CAAlD;AACAyI,gBAAAA,QAAQ;AApD+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAd;;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAsD7B,CACCT,KADD,EAECS,QAFD,EAGCV,8BAHD,EAICzB,gBAJD,EAKCzG,wBALD,EAMC4C,kBAND,EAOCD,gBAPD,CAtD6B,CAAhC;;AA+DA,MAAMqK,SAAS,GAAG,SAAZA,SAAY,SAAiF;AAAA,QAA9EnO,MAA8E,UAA9EA,MAA8E;AAAA,QAAtE0J,KAAsE,UAAtEA,KAAsE;AAAA,QAA/DjE,WAA+D,UAA/DA,WAA+D;AAAA,QAAlDoE,OAAkD,UAAlDA,OAAkD;AAAA,QAAzC/L,OAAyC,UAAzCA,OAAyC;AAAA,QAAhC8L,WAAgC,UAAhCA,WAAgC;AAAA,QAAnBD,WAAmB,UAAnBA,WAAmB;AAC/FtI,IAAAA,SAAS,CAACC,OAAV,GAAoB,EAApB;;AACA,QAAI,CAACtB,MAAL,EAAa;AACT8H,MAAAA,SAAS,CAACxG,OAAV,GAAoB,EAApB;AACH;;AACD,QAAI,CAACuI,OAAL,EAAc;AACV9B,MAAAA,gBAAgB,CAACzG,OAAjB,GAA2B,EAA3B;AACH;;AACD,QAAI,CAACxD,OAAL,EAAc;AACVuK,MAAAA,cAAc,CAAC/G,OAAf,GAAyB,IAAI4G,GAAJ,EAAzB;AACAE,MAAAA,uBAAuB,CAAC9G,OAAxB,GAAkC,IAAI4G,GAAJ,EAAlC;AACAI,MAAAA,UAAU,CAAChH,OAAX,GAAqB,IAArB;AACH;;AACD,QAAI,CAACoI,KAAL,EAAY;AACRd,MAAAA,UAAU,CAACtH,OAAX,GAAqB,KAArB;AACH;;AACD,QAAI,CAACqI,WAAL,EAAkB;AACdxB,MAAAA,cAAc,CAAC7G,OAAf,GAAyB,IAAI4G,GAAJ,EAAzB;AACH;;AACD,QAAI,CAACzC,WAAL,EAAkB;AACdkD,MAAAA,cAAc,CAACrH,OAAf,GAAyB,KAAzB;AACH;;AACD,QAAI,CAACsI,WAAL,EAAkB;AACdf,MAAAA,cAAc,CAACvH,OAAf,GAAyB,CAAzB;AACH;;AACDkH,IAAAA,wBAAwB,CAAClH,OAAzB,GAAmC,EAAnC;AACA0G,IAAAA,uBAAuB,CAAC1G,OAAxB,GAAkC,EAAlC;AACA2G,IAAAA,cAAc,CAAC3G,OAAf,GAAyB,IAAI4G,GAAJ,EAAzB;AACAQ,IAAAA,aAAa,CAACpH,OAAd,GAAwB,KAAxB;AACH,GA7BD;;AA8BA,MAAM8M,KAAK,GAAG,SAARA,KAAQ,CAAC1P,MAAD,EAAiC;AAAA,QAAxB2P,cAAwB,uEAAP,EAAO;;AAC3C,QAAI/E,KAAJ,EAAW;AACP,0CAAoBrP,MAAM,CAACyE,MAAP,CAAc2C,SAAS,CAACC,OAAxB,CAApB,uCAAsD;AAAjD,YAAMhJ,KAAK,uBAAX;;AACD,YAAIA,KAAJ,EAAW;AAAA,cACCD,MADD,GACkBC,KADlB,CACCD,GADD;AAAA,cACM8C,OADN,GACkB7C,KADlB,CACM6C,OADN;AAEP,cAAMmT,QAAQ,GAAG/G,yBAAyB,CAAClP,MAAD,CAAzB,IAAkCjC,OAAO,CAAC+E,OAAD,CAAzC,GACXA,OAAO,CAAC,CAAD,CAAP,CAAW9C,GADA,GAEXA,MAFN;;AAGA,cAAI7B,aAAa,CAAC8X,QAAD,CAAjB,EAA6B;AACzB,gBAAI;AACAA,cAAAA,QAAQ,CAACC,OAAT,CAAiB,MAAjB,EAAyBH,KAAzB;AACA;AACH,aAHD,CAIA,OAAOhM,EAAP,EAAW,CAAG;AACjB;AACJ;AACJ;AACJ;;AACD,QAAI1D,MAAJ,EAAY;AACR6J,MAAAA,gBAAgB,CAACjH,OAAjB,GAA2B5C,MAA3B;AACH;;AACDzE,IAAAA,MAAM,CAACyE,MAAP,CAAcsK,0BAA0B,CAAC1H,OAAzC,EAAkDlE,OAAlD,CAA0D,UAACoR,eAAD;AAAA,aAAqB1N,UAAU,CAAC0N,eAAD,CAAV,IAA+BA,eAAe,EAAnE;AAAA,KAA1D;AACAL,IAAAA,SAAS,CAACE,cAAD,CAAT;AACAtE,IAAAA,QAAQ;AACX,GAxBD;;AAyBA,WAAS0E,SAAT,CAAmBhD,OAAnB,EAA4B;AACxB,QAAI3M,QAAQ,CAAC2M,OAAD,CAAZ,EAAuB;AACnB,aAAOpK,SAAS,CAACC,OAAV,CAAkBmK,OAAlB,IACD7M,aAAa,CAACyC,SAAS,CAACC,OAAX,EAAoBD,SAAS,CAACC,OAAV,CAAkBmK,OAAlB,EAA2BpT,GAA/C,CADZ,GAEDoC,GAAG,CAAC8N,gBAAgB,CAACjH,OAAlB,EAA2BmK,OAA3B,CAFT;AAGH;;AACD,QAAM9G,WAAW,GAAG5F,eAAe,CAACsC,SAAS,CAACC,OAAX,CAAnC;AACA,QAAMoN,YAAY,GAAG3S,aAAa,CAAC4I,WAAD,CAAb,GACf4D,gBAAgB,CAACjH,OADF,GAEfqD,WAFN;AAGA,WAAO8G,OAAO,IAAIA,OAAO,CAACrM,IAAnB,GACDrF,qBAAqB,CAAC2U,YAAD,CADpB,GAEDA,YAFN;AAGH;;AACD9Y,EAAAA,SAAS,CAAC;AAAA,WAAM,YAAM;AAClB6S,MAAAA,SAAS,CAACnH,OAAV,GAAoB,IAApB;AACAD,MAAAA,SAAS,CAACC,OAAV,IACIqN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAD7B,IAEI5U,MAAM,CAACyE,MAAP,CAAc2C,SAAS,CAACC,OAAxB,EAAiClE,OAAjC,CAAyC,UAAC9E,KAAD;AAAA,eAAWqU,8BAA8B,CAACrU,KAAD,EAAQ,IAAR,CAAzC;AAAA,OAAzC,CAFJ;AAGH,KALS;AAAA,GAAD,EAKN,CAACqU,8BAAD,CALM,CAAT;;AAMA,MAAI,CAACtD,8BAAL,EAAqC;AACjCf,IAAAA,UAAU,CAAChH,OAAX,GACI+G,cAAc,CAAC/G,OAAf,CAAuByJ,IAAvB,IAA+B3C,uBAAuB,CAAC9G,OAAxB,CAAgCyJ,IAA/D,IACIhP,aAAa,CAAC+L,SAAS,CAACxG,OAAX,CAFrB;AAGH;;AACD,MAAMwN,SAAS,GAAG;AACdpF,IAAAA,KAAK,EAAEd,UAAU,CAACtH,OADJ;AAEdqI,IAAAA,WAAW,EAAExB,cAAc,CAAC7G,OAFd;AAGdmE,IAAAA,WAAW,EAAEkD,cAAc,CAACrH,OAHd;AAIdsI,IAAAA,WAAW,EAAEf,cAAc,CAACvH,OAJd;AAKduI,IAAAA,OAAO,EAAE9B,gBAAgB,CAACzG,OALZ;AAMdwI,IAAAA,YAAY,EAAEhB,eAAe,CAACxH,OANhB;AAOdxD,IAAAA,OAAO,EAAEuH,UAAU,GACbsD,cAAc,CAACrH,OAAf,IAA0BvF,aAAa,CAAC+L,SAAS,CAACxG,OAAX,CAD1B,GAEbgH,UAAU,CAAChH;AATH,GAAlB;AAWA,MAAMyN,WAAW,GAAG;AAChBpD,IAAAA,iBAAiB,EAAjBA,iBADgB;AAEhBI,IAAAA,QAAQ,EAAEpW,WAAW,CAACoW,QAAD,EAAW,CAC5BhC,QAD4B,EAE5BsB,gBAF4B,EAG5BM,iBAH4B,CAAX,CAFL;AAOhB+B,IAAAA,QAAQ,EAAE/X,WAAW,CAAC+X,QAAD,EAAW,CAC5BnF,gBAAgB,CAACjH,OADW,EAE5BkH,wBAAwB,CAAClH,OAFG,CAAX,CAPL;AAWhB6L,IAAAA,UAAU,EAAExX,WAAW,CAACwX,UAAD,EAAa,EAAb,CAXP;AAYhBsB,IAAAA,SAAS,EAAE9Y,WAAW,CAAC8Y,SAAD,EAAY,EAAZ,CAZN;AAahBK,IAAAA,SAAS,EAAEvF,cAAc,GACnB,IAAIC,KAAJ,CAAUsF,SAAV,EAAqB;AACnBrU,MAAAA,GAAG,EAAE,aAACC,GAAD,EAAMsU,IAAN,EAAe;AAChB,YAAIA,IAAI,IAAItU,GAAZ,EAAiB;AACb+O,UAAAA,gBAAgB,CAACnI,OAAjB,CAAyB0N,IAAzB,IAAiC,IAAjC;AACA,iBAAOtU,GAAG,CAACsU,IAAD,CAAV;AACH;;AACD,eAAOxU,SAAP;AACH;AAPkB,KAArB,CADmB,GAUnBsU;AAvBU,GAApB;AAyBA,MAAMG,OAAO,GAAGhV,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc;AAAEqS,IAAAA,wBAAwB,EAAxBA,wBAAF;AACtD3C,IAAAA,QAAQ,EAARA;AADsD,GAAd,EAC3BV,8BAA8B,GACzC;AAAE6F,IAAAA,qBAAqB,EAAE1C;AAAzB,GADyC,GAEzC,EAHsC,CAAd,EAGlB;AAAElF,IAAAA,IAAI,EAAE;AACZ/B,MAAAA,QAAQ,EAARA,QADY;AAEZF,MAAAA,UAAU,EAAVA,UAFY;AAGZH,MAAAA,UAAU,EAAVA;AAHY,KAAR;AAILuC,IAAAA,cAAc,EAAE;AACfjC,MAAAA,kBAAkB,EAAlBA,kBADe;AAEfF,MAAAA,oBAAoB,EAApBA;AAFe,KAJX;AAOLwC,IAAAA,SAAS,EAATA,SAPK;AAQRC,IAAAA,gBAAgB,EAAhBA,gBARQ;AASR1G,IAAAA,SAAS,EAATA,SATQ;AAURqH,IAAAA,aAAa,EAAbA,aAVQ;AAWRT,IAAAA,cAAc,EAAdA,cAXQ;AAYRe,IAAAA,0BAA0B,EAA1BA,0BAZQ;AAaRhB,IAAAA,uBAAuB,EAAvBA,uBAbQ;AAcRK,IAAAA,cAAc,EAAdA,cAdQ;AAeRF,IAAAA,cAAc,EAAdA,cAfQ;AAgBRC,IAAAA,uBAAuB,EAAvBA,uBAhBQ;AAiBRc,IAAAA,kBAAkB,EAAlBA,kBAjBQ;AAkBRN,IAAAA,UAAU,EAAVA,UAlBQ;AAmBRa,IAAAA,gBAAgB,EAAhBA,gBAnBQ;AAoBRlB,IAAAA,gBAAgB,EAAhBA;AApBQ,GAHkB,CAAd,EAuBSwG,WAvBT,CAAhB;AAwBA,SAAO9U,MAAM,CAACI,MAAP,CAAc;AAAE0S,IAAAA,KAAK,EAALA,KAAF;AACjBkC,IAAAA,OAAO,EAAPA,OADiB;AAEjBpB,IAAAA,YAAY,EAAZA,YAFiB;AAEHO,IAAAA,KAAK,EAAEzY,WAAW,CAACyY,KAAD,EAAQ,EAAR,CAFf;AAE4BxB,IAAAA,UAAU,EAAEjX,WAAW,CAACiX,UAAD,EAAa,EAAb,CAFnD;AAEqEE,IAAAA,QAAQ,EAAEnX,WAAW,CAACmX,QAAD,EAAW,EAAX,CAF1F;AAE0G9M,IAAAA,MAAM,EAAE8H,SAAS,CAACxG;AAF5H,GAAd,EAEqJyN,WAFrJ,CAAP;AAGH;AAED;;;;;;;;;;;;;;;;AAeA,SAASI,MAAT,CAAgBC,CAAhB,EAAmBrB,CAAnB,EAAsB;AAClB,MAAIsB,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAT,IAAcF,CAAd;AAAiB,QAAInV,MAAM,CAACsV,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,CAArC,EAAwCE,CAAxC,KAA8CvB,CAAC,CAACnI,OAAF,CAAU0J,CAAV,IAAe,CAAjE,EACbD,CAAC,CAACC,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAD,CAAR;AADJ;;AAEA,MAAIF,CAAC,IAAI,IAAL,IAAa,OAAOnV,MAAM,CAACyV,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIvJ,CAAC,GAAG,CAAR,EAAWmJ,CAAC,GAAGrV,MAAM,CAACyV,qBAAP,CAA6BN,CAA7B,CAApB,EAAqDjJ,CAAC,GAAGmJ,CAAC,CAAC7V,MAA3D,EAAmE0M,CAAC,EAApE,EAAwE;AACpE,QAAI4H,CAAC,CAACnI,OAAF,CAAU0J,CAAC,CAACnJ,CAAD,CAAX,IAAkB,CAAlB,IAAuBlM,MAAM,CAACsV,SAAP,CAAiBI,oBAAjB,CAAsCF,IAAtC,CAA2CL,CAA3C,EAA8CE,CAAC,CAACnJ,CAAD,CAA/C,CAA3B,EACIkJ,CAAC,CAACC,CAAC,CAACnJ,CAAD,CAAF,CAAD,GAAUiJ,CAAC,CAACE,CAAC,CAACnJ,CAAD,CAAF,CAAX;AACP;AACL,SAAOkJ,CAAP;AACH;;AAED,IAAMO,iBAAiB,GAAG/Z,aAAa,CAAC,IAAD,CAAvC;;AACA,SAASga,cAAT,GAA0B;AACtB,SAAO/Z,UAAU,CAAC8Z,iBAAD,CAAjB;AACH;;AACD,SAASE,WAAT,CAAqB1N,EAArB,EAAyB;AAAA,MACf2N,QADe,GACiB3N,EADjB,CACf2N,QADe;AAAA,MACLjB,SADK,GACiB1M,EADjB,CACL0M,SADK;AAAA,MACM9O,MADN,GACiBoC,EADjB,CACMpC,MADN;AAAA,MACqBgQ,WADrB,GACmCb,MAAM,CAAC/M,EAAD,EAAK,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CAAL,CADzC;;AAErB,SAAQrM,aAAa,CAAC6Z,iBAAiB,CAACK,QAAnB,EAA6B;AAAE9Z,IAAAA,KAAK,EAAE8D,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB2V,WAAlB,CAAd,EAA8C;AAAElB,MAAAA,SAAS,EAATA,SAAF;AAAa9O,MAAAA,MAAM,EAANA;AAAb,KAA9C;AAAT,GAA7B,EAA8G+P,QAA9G,CAArB;AACH;;AAED,IAAIG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACnB,MAAMC,CAAC,GAAG,OAAOC,WAAP,KAAuBnZ,SAAvB,GAAmC8L,IAAI,CAACsN,GAAL,EAAnC,GAAgDD,WAAW,CAACC,GAAZ,KAAoB,IAA9E;AACA,SAAO,uCAAuCtX,OAAvC,CAA+C,OAA/C,EAAwD,UAAUuX,CAAV,EAAa;AACxE,QAAMC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqBN,CAAtB,IAA2B,EAA3B,GAAgC,CAA1C;AACA,WAAO,CAACG,CAAC,IAAI,GAAL,GAAWC,CAAX,GAAgBA,CAAC,GAAG,GAAL,GAAY,GAA5B,EAAiCpN,QAAjC,CAA0C,EAA1C,CAAP;AACH,GAHM,CAAP;AAIH,CAND;;AAQA,IAAMuN,QAAQ,GAAG,SAAXA,QAAW,CAACva,KAAD,EAAQwa,OAAR;AAAA,SAAqB1W,MAAM,CAACI,MAAP,qBAAiBsW,OAAjB,EAA2BT,UAAU,EAArC,GAA4C3Z,QAAQ,CAACJ,KAAD,CAAR,GAAkBA,KAAlB,GAA0B;AAAEA,IAAAA,KAAK,EAALA;AAAF,GAAtE,CAArB;AAAA,CAAjB;;AACA,IAAMya,MAAM,GAAG,SAATA,MAAS,CAAC5W,IAAD,EAAO2W,OAAP;AAAA,SAAmB,CAACva,OAAO,CAAC4D,IAAD,CAAP,GAAgBA,IAAhB,GAAuB,EAAxB,EAA4BmE,GAA5B,CAAgC,UAAChI,KAAD;AAAA,WAAWua,QAAQ,CAACva,KAAD,EAAQwa,OAAR,CAAnB;AAAA,GAAhC,CAAnB;AAAA,CAAf;;AAEA,IAAIE,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,aAAV,EAAkF;AAAA,MAAzDC,cAAyD,uEAAxC,EAAwC;AAAA,MAApCC,KAAoC,uEAA5B,CAA4B;AAAA,MAAzBC,eAAyB,uEAAP,EAAO;;AAAA,6CAC9EH,aAD8E;AAAA;;AAAA;AACxG,wDAAyC;AAAA,UAA9BI,WAA8B;;AACrC,UAAIL,OAAO,CAAClL,OAAR,CAAgBuL,WAAhB,IAA+B,CAAnC,EAAsC;AAClCD,QAAAA,eAAe,CAAC/X,IAAhB,CAAqBgY,WAArB;AACH;AACJ;AALuG;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAMpFL,OAAO,CAACM,IAAR,EANoF;AAAA;;AAAA;AAAA;AAAA,UAM7F7X,KAN6F;;AAOpG,UAAIwX,aAAa,CAACnL,OAAd,CAAsBrM,KAAtB,IAA+B,CAAC,CAApC,EAAuC;AACnCyX,QAAAA,cAAc,CAAC7X,IAAf,CAAoB,CAAC,CAArB;AACA8X,QAAAA,KAAK;AACR,OAHD,MAIK;AACDD,QAAAA,cAAc,CAAC7X,IAAf,CAAoBI,KAAK,GACrB0X,KADgB,IAEfC,eAAe,CAACzX,MAAhB,GACKyX,eAAe,CACZ/S,GADH,CACO,UAACkT,aAAD;AAAA,iBAAmBA,aAAa,GAAG9X,KAAnC;AAAA,SADP,EAEGsB,MAFH,CAEUC,OAFV,EAEmBrB,MAHxB,GAIK,CANU,CAApB;AAOH;AAnBmG;;AAMxG,2DAAoC;AAAA;AAcnC;AApBuG;AAAA;AAAA;AAAA;AAAA;;AAqBxG,SAAOuX,cAAP;AACH,CAtBD;;AAwBA,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACtX,IAAD,EAAOT,KAAP;AAAA,sCACVS,IAAI,CAAC6C,KAAL,CAAW,CAAX,EAActD,KAAd,CADU,sBAEVS,IAAI,CAAC6C,KAAL,CAAWtD,KAAK,GAAG,CAAnB,CAFU;AAAA,CAAjB;;AAIA,SAASgY,eAAT,CAAyBvX,IAAzB,EAA+BT,KAA/B,EAAsC;AAClC,MAAIqD,CAAC,GAAG,CAAC,CAAT;;AACA,SAAO,EAAEA,CAAF,GAAM5C,IAAI,CAACP,MAAlB,EAA0B;AACtB,QAAIF,KAAK,CAACqM,OAAN,CAAchJ,CAAd,KAAoB,CAAxB,EAA2B;AACvB,aAAO5C,IAAI,CAAC4C,CAAD,CAAX;AACH;AACJ;;AACD,SAAO5C,IAAI,CAACa,MAAL,CAAYC,OAAZ,CAAP;AACH;;AACD,IAAI0W,aAAa,GAAG,SAAhBA,aAAgB,CAACxX,IAAD,EAAOT,KAAP;AAAA,SAAiBe,WAAW,CAACf,KAAD,CAAX,GAC/B,EAD+B,GAE/BnD,OAAO,CAACmD,KAAD,CAAP,GACIgY,eAAe,CAACvX,IAAD,EAAOT,KAAP,CADnB,GAEI+X,QAAQ,CAACtX,IAAD,EAAOT,KAAP,CAJE;AAAA,CAApB;;AAMA,IAAIkY,WAAW,GAAG,SAAdA,WAAc,CAACzX,IAAD,EAAO0X,IAAP,EAAaC,EAAb;AAAA,SAAoBvb,OAAO,CAAC4D,IAAD,CAAP,GAAgBA,IAAI,CAAC4X,MAAL,CAAYD,EAAZ,EAAgB,CAAhB,EAAmB3X,IAAI,CAAC4X,MAAL,CAAYF,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,CAAnB,CAAhB,GAA8D,EAAlF;AAAA,CAAlB;;AAEA,IAAIG,WAAW,GAAG,SAAdA,WAAc,CAAC7X,IAAD,EAAO8X,MAAP,EAAeC,MAAf,EAA0B;AACxC,MAAMC,IAAI,GAAG,CAAChY,IAAI,CAAC+X,MAAD,CAAL,EAAe/X,IAAI,CAAC8X,MAAD,CAAnB,CAAb;AACA9X,EAAAA,IAAI,CAAC8X,MAAD,CAAJ,GAAeE,IAAI,CAAC,CAAD,CAAnB;AACAhY,EAAAA,IAAI,CAAC+X,MAAD,CAAJ,GAAeC,IAAI,CAAC,CAAD,CAAnB;AACH,CAJD;;AAMA,SAASC,OAAT,CAAiBjY,IAAjB,EAAuB7D,KAAvB,EAA8B;AAC1B,sCAAYC,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAK,IAAI,IAAV,CAArC,sBAA0D6D,IAA1D;AACH;;AAED,SAASkY,MAAT,CAAgBlY,IAAhB,EAAsBT,KAAtB,EAA6BpD,KAA7B,EAAoC;AAChC,sCACO6D,IAAI,CAAC6C,KAAL,CAAW,CAAX,EAActD,KAAd,CADP,sBAEQnD,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAK,IAAI,IAAV,CAFjC,sBAGO6D,IAAI,CAAC6C,KAAL,CAAWtD,KAAX,CAHP;AAKH;;AAED,IAAI4Y,cAAc,GAAG,SAAjBA,cAAiB,CAAChc,KAAD;AAAA,SAAWC,OAAO,CAACD,KAAD,CAAP,GAAiBE,KAAK,CAACF,KAAK,CAACsD,MAAP,CAAL,CAAoB2Y,IAApB,CAAyB,IAAzB,CAAjB,GAAkD,IAA7D;AAAA,CAArB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,SAAwC;AAAA,MAArCpD,OAAqC,UAArCA,OAAqC;AAAA,MAA5BxR,IAA4B,UAA5BA,IAA4B;AAAA,8BAAtBkT,OAAsB;AAAA,MAAtBA,OAAsB,+BAAZ,IAAY;AAC1D,MAAM2B,OAAO,GAAGzC,cAAc,EAA9B;;AAD0D,eAEiRZ,OAAO,IAAIqD,OAAO,CAACrD,OAFpS;AAAA,MAElDvG,aAFkD,UAElDA,aAFkD;AAAA,MAEnCM,0BAFmC,UAEnCA,0BAFmC;AAAA,MAEPE,kBAFO,UAEPA,kBAFO;AAAA,MAEaa,QAFb,UAEaA,QAFb;AAAA,MAEuB1I,SAFvB,UAEuBA,SAFvB;AAAA,MAEkCoN,SAFlC,UAEkCA,SAFlC;AAAA,MAE6ClG,gBAF7C,UAE6CA,gBAF7C;AAAA,MAE+DmE,wBAF/D,UAE+DA,wBAF/D;AAAA,MAEyF5E,SAFzF,UAEyFA,SAFzF;AAAA,MAEoGK,cAFpG,UAEoGA,cAFpG;AAAA,MAEoHS,UAFpH,UAEoHA,UAFpH;AAAA,MAEgIb,gBAFhI,UAEgIA,gBAFhI;AAAA,MAEkJ0B,gBAFlJ,UAEkJA,gBAFlJ;AAAA,MAEoKxB,cAFpK,UAEoKA,cAFpK;AAAA,MAEoLI,cAFpL,UAEoLA,cAFpL;AAAA,MAEoMD,uBAFpM,UAEoMA,uBAFpM;AAAA,MAE6NJ,uBAF7N,UAE6NA,uBAF7N;AAAA,MAEsPkH,qBAFtP,UAEsPA,qBAFtP;;AAG1D,MAAMqD,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,8BAClB9X,GAAG,CAACuN,uBAAuB,CAAC1G,OAAxB,CAAgCoE,uBAAuB,CAACjI,IAAD,CAAvD,IACDuK,uBAAuB,CAAC1G,OADvB,GAEDiH,gBAAgB,CAACjH,OAFjB,EAE0B7D,IAF1B,EAEgC,EAFhC,CADe;AAAA,GAAzB;;AAKA,MAAM+U,qBAAqB,GAAG/c,MAAM,CAAC8c,gBAAgB,EAAjB,CAApC;;AAR0D,mBAS/B7c,QAAQ,CAACkb,MAAM,CAAC4B,qBAAqB,CAAClR,OAAvB,EAAgCqP,OAAhC,CAAP,CATuB;AAAA;AAAA,MASnD3V,MATmD;AAAA,MAS3CyX,QAT2C;;AAAA,mBAUxB/c,QAAQ,CAAC,KAAD,CAVgB;AAAA;AAAA,MAUnDgd,SAVmD;AAAA,MAUxCC,YAVwC;;AAW1D,MAAMC,SAAS,GAAGnd,MAAM,CAACuF,MAAD,CAAxB;AACA,MAAM6X,SAAS,GAAGna,KAAK,CAAC+E,IAAD,CAAvB;AACAmV,EAAAA,SAAS,CAACtR,OAAV,GAAoBtG,MAApB;;AACA,MAAI6X,SAAJ,EAAe;AACX7K,IAAAA,uBAAuB,CAAC1G,OAAxB,CAAgC7D,IAAhC,IAAwC+U,qBAAqB,CAAClR,OAA9D;AACH;;AACD,MAAMwR,kBAAkB,GAAG,SAArBA,kBAAqB,CAACpU,MAAD;AAAA,WAAYA,MAAM,CAACP,GAAP,CAAW,UAAChI,KAAD;AAAA,aAAWua,QAAQ,CAACva,KAAD,EAAQwa,OAAR,CAAnB;AAAA,KAAX,CAAZ;AAAA,GAA3B;;AACA,MAAMoC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,YAAD,EAAkB;AAC5CP,IAAAA,QAAQ,CAACO,YAAD,CAAR;;AACA,QAAIvJ,gBAAgB,CAACnI,OAAjB,CAAyBxD,OAAzB,IAAoCoR,qBAAxC,EAA+D;AAC3DA,MAAAA,qBAAqB,qBAChBzR,IADgB,EACTuV,YADS,EAArB;AAGH;AACJ,GAPD;;AAQA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAoE;AAAA,qFAAP,EAAO;AAAA,QAAjEhJ,YAAiE,UAAjEA,YAAiE;AAAA,QAAnDiJ,QAAmD,UAAnDA,QAAmD;AAAA,QAAzCC,SAAyC,UAAzCA,SAAyC;AAAA,QAA9B5Z,KAA8B,UAA9BA,KAA8B;AAAA,8BAAvBpD,KAAuB;AAAA,QAAvBA,KAAuB,6BAAf,EAAe;;AAC1F,QAAIgT,MAAM,GAAGc,YAAb;AACA,QAAMvL,MAAM,GAAGtI,OAAO,CAACD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAAxC;;AACA,QAAIsT,gBAAgB,CAACnI,OAAjB,CAAyBoI,KAA7B,EAAoC;AAChC,UAAM0J,0BAA0B,GAAG,EAAnC;;AACA,UAAID,SAAS,IAAID,QAAjB,EAA2B;AAAA,oDACE,mBAAI/K,cAAc,CAAC7G,OAAnB,EAA4B8P,IAA5B,EADF;AAAA;;AAAA;AACvB,iEAA6D;AAAA,gBAAlDiC,UAAkD;;AACzD,gBAAI/M,qBAAqB,CAAC+M,UAAD,EAAa5V,IAAb,CAAzB,EAA6C;AACzC,kBAAM6V,cAAc,GAAGD,UAAU,CAACra,KAAX,CAAiBb,uBAAjB,CAAvB;;AACA,kBAAImb,cAAJ,EAAoB;AAChB,oBAAMC,UAAU,GAAG,CAACD,cAAc,CAACA,cAAc,CAAC7Z,MAAf,GAAwB,CAAzB,CAAlC;;AACA,oBAAI2Z,0BAA0B,CAACG,UAAD,CAA9B,EAA4C;AACxCH,kBAAAA,0BAA0B,CAACG,UAAD,CAA1B,CAAuCpa,IAAvC,CAA4Cka,UAA5C;AACH,iBAFD,MAGK;AACDD,kBAAAA,0BAA0B,CAACG,UAAD,CAA1B,GAAyC,CAACF,UAAD,CAAzC;AACH;AACJ;;AACDlL,cAAAA,cAAc,CAAC7G,OAAf,CAAuB8I,MAAvB,CAA8BiJ,UAA9B;AACH;AACJ;AAfsB;AAAA;AAAA;AAAA;AAAA;AAgB1B;;AACD,UAAI,CAAC/Y,WAAW,CAACf,KAAD,CAAZ,IAAuB4Z,SAA3B,EAAsC;AAClC,YAAMK,wBAAwB,GAAGlZ,WAAW,CAACf,KAAD,CAAX,GAC3B,EAD2B,GAE3BsX,mBAAmB,CAAC5W,MAAM,CAAC+B,IAAP,CAAYoX,0BAAZ,EAAwCjV,GAAxC,CAA4C,UAACgI,CAAD;AAAA,iBAAO,CAACA,CAAR;AAAA,SAA5C,CAAD,EAAyD/P,OAAO,CAACmD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAAlF,CAFzB;AAGAU,QAAAA,MAAM,CAACyE,MAAP,CAAc0U,0BAAd,EAA0ChW,OAA1C,CAAkD,UAACsB,MAAD,EAASnF,KAAT,EAAmB;AACjE,cAAMka,WAAW,GAAGN,SAAS,GAAG,CAAH,GAAOK,wBAAwB,CAACja,KAAD,CAA5D;;AACA,cAAIka,WAAW,GAAG,CAAC,CAAnB,EAAsB;AAAA,wDACE/U,MADF;AAAA;;AAAA;AAClB,qEAA4B;AAAA,oBAAjBvI,MAAiB;;AACxB,oBAAMmd,eAAc,GAAGnd,MAAK,CAAC6C,KAAN,CAAYb,uBAAZ,CAAvB;;AACA,oBAAImb,eAAJ,EAAoB;AAChBnL,kBAAAA,cAAc,CAAC7G,OAAf,CAAuB0D,GAAvB,CAA2B7O,MAAK,CAAC4C,OAAN,CAAc,kBAAd,YAAqCoa,SAAS,GACnE,CAACG,eAAc,CAACA,eAAc,CAAC7Z,MAAf,GAAwB,CAAzB,CAAf,GACEiF,MAAM,CAACjF,MAF0D,GAGnEga,WAHqB,QAA3B;AAIH;AACJ;AATiB;AAAA;AAAA;AAAA;AAAA;AAUrB;AACJ,SAbD;AAcH;;AACD,UAAI,CAACP,QAAL,EAAe;AACXxU,QAAAA,MAAM,CAACtB,OAAP,CAAe,UAACE,UAAD,EAAa/D,KAAb;AAAA,iBAAuBU,MAAM,CAAC+B,IAAP,CAAYsB,UAAZ,EAAwBF,OAAxB,CAAgC,UAACzD,GAAD;AAAA,mBAASwO,cAAc,CAAC7G,OAAf,CAAuB0D,GAAvB,WAA8BvH,IAA9B,cAAsC0V,SAAS,GAAG5Z,KAAH,GAAWqZ,SAAS,CAACtR,OAAV,CAAkB7H,MAAlB,GAA2BF,KAArF,eAA+FI,GAA/F,EAAT;AAAA,WAAhC,CAAvB;AAAA,SAAf;AACAiP,QAAAA,UAAU,CAACtH,OAAX,GAAqB,IAArB;AACH;;AACD6H,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,QAAIA,MAAM,IAAI,CAACT,aAAa,CAACpH,OAA7B,EAAsC;AAClCyI,MAAAA,QAAQ;AACX;AACJ,GAlDD;;AAmDA,MAAM2J,WAAW,GAAG,SAAdA,WAAc,CAACC,YAAD,EAAkB;AAClC,QAAIlK,gBAAgB,CAACnI,OAAjB,CAAyBoI,KAA7B,EAAoC;AAChCd,MAAAA,UAAU,CAACtH,OAAX,GAAqBhH,WAAW,CAACqZ,YAAD,CAAX,GACf,IADe,GAEf5N,oBAAoB,CAAC4N,YAAD,EAAepL,gBAAgB,CAACjH,OAAjB,CAAyB7D,IAAzB,KAAkC,EAAjD,CAF1B;AAGH;;AACD,SAAK,IAAM9D,GAAX,IAAkB0H,SAAS,CAACC,OAA5B,EAAqC;AACjC,UAAIgF,qBAAqB,CAAC3M,GAAD,EAAM8D,IAAN,CAArB,IAAoC4D,SAAS,CAACC,OAAV,CAAkB3H,GAAlB,CAAxC,EAAgE;AAC5D+S,QAAAA,wBAAwB,CAACrL,SAAS,CAACC,OAAV,CAAkB3H,GAAlB,CAAD,EAAyB,IAAzB,CAAxB;AACH;AACJ;AACJ,GAXD;;AAYA,MAAMia,8BAA8B,GAAG,SAAjCA,8BAAiC,GAAM;AACzC,QAAMC,kBAAkB,GAAGpZ,GAAG,CAACgU,SAAS,CAAC;AAAErP,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAV,EAA4B3B,IAA5B,CAA9B;;AACA,QAAIrH,OAAO,CAACyd,kBAAD,CAAX,EAAiC;AAC7B,WAAK,IAAI1N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0N,kBAAkB,CAACpa,MAAvC,EAA+C0M,CAAC,EAAhD,EAAoD;AAChDyM,QAAAA,SAAS,CAACtR,OAAV,CAAkB6E,CAAlB,IAAuBlM,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBuY,SAAS,CAACtR,OAAV,CAAkB6E,CAAlB,CAAlB,CAAd,EAAuD0N,kBAAkB,CAAC1N,CAAD,CAAzE,CAAvB;AACH;AACJ;AACJ,GAPD;;AAQA,MAAM2N,MAAM,GAAG,SAATA,MAAS,CAAC3d,KAAD,EAAW;AACtB4c,IAAAA,qBAAqB,8BACdH,SAAS,CAACtR,OADI,sBAEblL,OAAO,CAACD,KAAD,CAAP,GACE2c,kBAAkB,CAAC3c,KAAD,CADpB,GAEE,CAACua,QAAQ,CAACva,KAAD,EAAQwa,OAAR,CAAT,CAJW,GAArB;AAMAsC,IAAAA,iBAAiB,CAAC;AAAE9c,MAAAA,KAAK,EAALA;AAAF,KAAD,CAAjB;AACH,GARD;;AASA,MAAM4d,SAAS,GAAG,SAAZA,SAAY,CAAC5d,KAAD,EAAW;AACzB,QAAI8T,YAAY,GAAG,KAAnB;AACAyJ,IAAAA,WAAW;AACXX,IAAAA,qBAAqB,CAACd,OAAO,CAACW,SAAS,CAACtR,OAAX,EAAoBlL,OAAO,CAACD,KAAD,CAAP,GAAiB2c,kBAAkB,CAAC3c,KAAD,CAAnC,GAA6C,CAACua,QAAQ,CAACva,KAAD,EAAQwa,OAAR,CAAT,CAAjE,CAAR,CAArB;;AACA,QAAI7I,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAJ,EAA6B;AACzBqK,MAAAA,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,IAA0BwU,OAAO,CAACnK,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAD,EAA0B0U,cAAc,CAAChc,KAAD,CAAxC,CAAjC;AACH;;AACD,QAAIsT,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IAAoC9B,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAxC,EAAwE;AACpEsK,MAAAA,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,IAAiCwU,OAAO,CAAClK,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAD,EAAiC0U,cAAc,CAAChc,KAAD,CAA/C,CAAxC;AACA8T,MAAAA,YAAY,GAAG,IAAf;AACH;;AACDgJ,IAAAA,iBAAiB,CAAC;AACdhJ,MAAAA,YAAY,EAAZA,YADc;AAEdkJ,MAAAA,SAAS,EAAE,IAFG;AAGdhd,MAAAA,KAAK,EAALA;AAHc,KAAD,CAAjB;AAKH,GAhBD;;AAiBA,MAAM6d,MAAM,GAAG,SAATA,MAAS,CAACza,KAAD,EAAW;AACtB,QAAI0Q,YAAY,GAAG,KAAnB;AACA,QAAMgK,gBAAgB,GAAG3Z,WAAW,CAACf,KAAD,CAApC;;AACA,QAAI,CAAC0a,gBAAL,EAAuB;AACnBL,MAAAA,8BAA8B;AACjC;;AACDF,IAAAA,WAAW,CAAClC,aAAa,CAAC3L,mBAAmB,CAACxE,SAAS,CAACC,OAAX,EAAoB7D,IAApB,CAApB,EAA+ClE,KAA/C,CAAd,CAAX;AACAwZ,IAAAA,qBAAqB,CAACvB,aAAa,CAACoB,SAAS,CAACtR,OAAX,EAAoB/H,KAApB,CAAd,CAArB;AACAoZ,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI7K,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAJ,EAA6B;AACzBqK,MAAAA,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,IAA0B+T,aAAa,CAAC1J,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAD,EAA0BlE,KAA1B,CAAvC;;AACA,UAAI,CAACuO,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,EAAwB5C,MAAxB,CAA+BC,OAA/B,EAAwCrB,MAA7C,EAAqD;AACjD,eAAOqO,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAP;AACH;AACJ;;AACD,QAAIgM,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IAAoC9B,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAxC,EAAwE;AACpEsK,MAAAA,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,IAAiC+T,aAAa,CAACzJ,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAD,EAAiClE,KAAjC,CAA9C;AACA0Q,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD,QAAIR,gBAAgB,CAACnI,OAAjB,CAAyBxD,OAAzB,IAAoC,CAACoR,qBAAzC,EAAgE;AAC5D,UAAIgF,UAAU,GAAG,CAAC,CAAlB;AACA,UAAIC,OAAO,GAAG,KAAd;;AACA,UAAMF,iBAAgB,GAAG3Z,WAAW,CAACf,KAAD,CAApC;;AACA,aAAO2a,UAAU,KAAKlZ,MAAM,CAACvB,MAA7B,EAAqC;AACjC,YAAM2a,MAAM,GAAGF,UAAU,KAAKlZ,MAAM,CAACvB,MAAP,GAAgB,CAA9C;AACA,YAAM4a,cAAc,GAAG,CAACje,OAAO,CAACmD,KAAD,CAAP,GAAiBA,KAAjB,GAAyB,CAACA,KAAD,CAA1B,EAAmCqM,OAAnC,CAA2CsO,UAA3C,KAA0D,CAAjF;;AACA,YAAIG,cAAc,IAAIJ,iBAAtB,EAAwC;AACpCE,UAAAA,OAAO,GAAG,IAAV;AACH;;AACD,YAAI,CAACA,OAAL,EAAc;AACV;AACH;;AACD,aAAK,IAAMxa,GAAX,IAAkBqB,MAAM,CAACkZ,UAAD,CAAxB,EAAsC;AAClC,cAAMI,gBAAgB,aAAM7W,IAAN,cAAcyW,UAAd,eAA6Bva,GAA7B,CAAtB;;AACA,cAAI0a,cAAc,IAAID,MAAlB,IAA4BH,iBAAhC,EAAkD;AAC9C5L,YAAAA,cAAc,CAAC/G,OAAf,CAAuB8I,MAAvB,CAA8BkK,gBAA9B;AACAlM,YAAAA,uBAAuB,CAAC9G,OAAxB,CAAgC8I,MAAhC,CAAuCkK,gBAAvC;AACH,WAHD,MAIK;AACD,gBAAMC,iBAAiB,aAAM9W,IAAN,cAAcyW,UAAU,GAAG,CAA3B,eAAiCva,GAAjC,CAAvB;;AACA,gBAAI0O,cAAc,CAAC/G,OAAf,CAAuBf,GAAvB,CAA2B+T,gBAA3B,CAAJ,EAAkD;AAC9CjM,cAAAA,cAAc,CAAC/G,OAAf,CAAuB0D,GAAvB,CAA2BuP,iBAA3B;AACH;;AACD,gBAAInM,uBAAuB,CAAC9G,OAAxB,CAAgCf,GAAhC,CAAoC+T,gBAApC,CAAJ,EAA2D;AACvDlM,cAAAA,uBAAuB,CAAC9G,OAAxB,CAAgC0D,GAAhC,CAAoCuP,iBAApC;AACH;AACJ;AACJ;AACJ;AACJ;;AACDtB,IAAAA,iBAAiB,CAAC;AACdhJ,MAAAA,YAAY,EAAZA,YADc;AAEdiJ,MAAAA,QAAQ,EAAE,IAFI;AAGd3Z,MAAAA,KAAK,EAALA;AAHc,KAAD,CAAjB;AAKH,GAvDD;;AAwDA,MAAMib,QAAQ,GAAG,SAAXA,QAAW,CAACjb,KAAD,EAAQpD,KAAR,EAAkB;AAC/Byd,IAAAA,8BAA8B;AAC9BF,IAAAA,WAAW,CAACxB,MAAM,CAACrM,mBAAmB,CAACxE,SAAS,CAACC,OAAX,EAAoB7D,IAApB,CAApB,EAA+ClE,KAA/C,CAAP,CAAX;AACAwZ,IAAAA,qBAAqB,CAACb,MAAM,CAACU,SAAS,CAACtR,OAAX,EAAoB/H,KAApB,EAA2BnD,OAAO,CAACD,KAAD,CAAP,GAAiB2c,kBAAkB,CAAC3c,KAAD,CAAnC,GAA6C,CAACua,QAAQ,CAACva,KAAD,EAAQwa,OAAR,CAAT,CAAxE,CAAP,CAArB;;AACA,QAAI7I,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAJ,EAA6B;AACzBqK,MAAAA,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,IAA0ByU,MAAM,CAACpK,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAD,EAA0BlE,KAA1B,EAAiC4Y,cAAc,CAAChc,KAAD,CAA/C,CAAhC;AACH;;AACD,QAAIsT,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IAAoC9B,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAxC,EAAwE;AACpEsK,MAAAA,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,IAAiCyU,MAAM,CAACnK,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAD,EAAiClE,KAAjC,EAAwC4Y,cAAc,CAAChc,KAAD,CAAtD,CAAvC;AACA4T,MAAAA,QAAQ;AACX;AACJ,GAXD;;AAYA,MAAM0K,IAAI,GAAG,SAAPA,IAAO,CAAC3C,MAAD,EAASC,MAAT,EAAoB;AAC7B6B,IAAAA,8BAA8B;AAC9B,QAAMjP,WAAW,GAAGkB,mBAAmB,CAACxE,SAAS,CAACC,OAAX,EAAoB7D,IAApB,CAAvC;AACAoU,IAAAA,WAAW,CAAClN,WAAD,EAAcmN,MAAd,EAAsBC,MAAtB,CAAX;AACA2B,IAAAA,WAAW,CAAC/O,WAAD,CAAX;AACAkN,IAAAA,WAAW,CAACe,SAAS,CAACtR,OAAX,EAAoBwQ,MAApB,EAA4BC,MAA5B,CAAX;AACAgB,IAAAA,qBAAqB,oBAAKH,SAAS,CAACtR,OAAf,EAArB;;AACA,QAAIwG,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAJ,EAA6B;AACzBoU,MAAAA,WAAW,CAAC/J,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAD,EAA0BqU,MAA1B,EAAkCC,MAAlC,CAAX;AACH;;AACD,QAAItI,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IAAoC9B,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAxC,EAAwE;AACpEoU,MAAAA,WAAW,CAAC9J,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAD,EAAiCqU,MAAjC,EAAyCC,MAAzC,CAAX;AACAhI,MAAAA,QAAQ;AACX;AACJ,GAdD;;AAeA,MAAM2K,IAAI,GAAG,SAAPA,IAAO,CAAChD,IAAD,EAAOC,EAAP,EAAc;AACvBiC,IAAAA,8BAA8B;AAC9B,QAAMjP,WAAW,GAAGkB,mBAAmB,CAACxE,SAAS,CAACC,OAAX,EAAoB7D,IAApB,CAAvC;AACAgU,IAAAA,WAAW,CAAC9M,WAAD,EAAc+M,IAAd,EAAoBC,EAApB,CAAX;AACA+B,IAAAA,WAAW,CAAC/O,WAAD,CAAX;AACA8M,IAAAA,WAAW,CAACmB,SAAS,CAACtR,OAAX,EAAoBoQ,IAApB,EAA0BC,EAA1B,CAAX;AACAoB,IAAAA,qBAAqB,oBAAKH,SAAS,CAACtR,OAAf,EAArB;;AACA,QAAIwG,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAJ,EAA6B;AACzBgU,MAAAA,WAAW,CAAC3J,SAAS,CAACxG,OAAV,CAAkB7D,IAAlB,CAAD,EAA0BiU,IAA1B,EAAgCC,EAAhC,CAAX;AACH;;AACD,QAAIlI,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IAAoC9B,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAxC,EAAwE;AACpEgU,MAAAA,WAAW,CAAC1J,gBAAgB,CAACzG,OAAjB,CAAyB7D,IAAzB,CAAD,EAAiCiU,IAAjC,EAAuCC,EAAvC,CAAX;AACA5H,MAAAA,QAAQ;AACX;AACJ,GAdD;;AAeA,MAAMqE,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChBsF,IAAAA,WAAW;AACXlB,IAAAA,qBAAqB,CAAClR,OAAtB,GAAgCiR,gBAAgB,EAAhD;AACAE,IAAAA,QAAQ,CAAC7B,MAAM,CAAC4B,qBAAqB,CAAClR,OAAvB,EAAgCqP,OAAhC,CAAP,CAAR;AACH,GAJD;;AAKA/a,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIid,SAAS,IACTH,SADA,IAEA1K,uBAAuB,CAAC1G,OAAxB,CAAgC7D,IAAhC,CAFA,IAGAzC,MAAM,CAACvB,MAAP,GAAgBuO,uBAAuB,CAAC1G,OAAxB,CAAgC7D,IAAhC,EAAsChE,MAH1D,EAGkE;AAC9DuO,MAAAA,uBAAuB,CAAC1G,OAAxB,CAAgC7D,IAAhC,EAAsCkX,GAAtC;AACH;AACJ,GAPQ,EAON,CAAC3Z,MAAD,EAASyC,IAAT,EAAeuK,uBAAf,EAAwC0K,SAAxC,EAAmDG,SAAnD,CAPM,CAAT;AAQAjd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI8S,aAAa,IAAIA,aAAa,CAACpH,OAAnC,EAA4C;AACxCyI,MAAAA,QAAQ;AACX,KAFD,MAGK,IAAI9B,cAAJ,EAAoB;AAAA,kDACIA,cAAc,CAAC3G,OADnB;AAAA;;AAAA;AACrB,+DAAiD;AAAA,cAAtCsT,UAAsC;;AAC7C,cAAIA,UAAU,CAAC1V,UAAX,CAAsBzB,IAAtB,CAAJ,EAAiC;AAC7BsM,YAAAA,QAAQ;AACR;AACH;AACJ;AANoB;AAAA;AAAA;AAAA;AAAA;AAOxB;AACJ,GAZQ,EAYN,CAAC/O,MAAD,EAASyC,IAAT,EAAesM,QAAf,EAAyB9B,cAAzB,EAAyCS,aAAzC,CAZM,CAAT;AAaA9S,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMif,cAAc,GAAG7L,0BAA0B,CAAC1H,OAAlD;AACA,QAAMwT,eAAe,GAAG5L,kBAAkB,CAAC5H,OAA3C;AACAwT,IAAAA,eAAe,CAAC9P,GAAhB,CAAoBvH,IAApB;AACAoX,IAAAA,cAAc,CAACpX,IAAD,CAAd,GAAuB2Q,KAAvB;AACA,WAAO,YAAM;AACTsF,MAAAA,WAAW;AACX,aAAOmB,cAAc,CAACpX,IAAD,CAArB;AACAqX,MAAAA,eAAe,CAAC1K,MAAhB,CAAuB3M,IAAvB;AACH,KAJD,CALY,CAUZ;AACH,GAXQ,EAWN,EAXM,CAAT;AAYA,SAAO;AACHgX,IAAAA,IAAI,EAAE9e,WAAW,CAAC8e,IAAD,EAAO,CAAChX,IAAD,CAAP,CADd;AAEHiX,IAAAA,IAAI,EAAE/e,WAAW,CAAC+e,IAAD,EAAO,CAACjX,IAAD,CAAP,CAFd;AAGHwU,IAAAA,OAAO,EAAEtc,WAAW,CAACoe,SAAD,EAAY,CAACtW,IAAD,CAAZ,CAHjB;AAIHqW,IAAAA,MAAM,EAAEne,WAAW,CAACme,MAAD,EAAS,CAACrW,IAAD,CAAT,CAJhB;AAKHuW,IAAAA,MAAM,EAAEre,WAAW,CAACqe,MAAD,EAAS,CAAChZ,MAAD,EAASyC,IAAT,CAAT,CALhB;AAMHyU,IAAAA,MAAM,EAAEvc,WAAW,CAAC6e,QAAD,EAAW,CAAC/W,IAAD,CAAX,CANhB;AAOHzC,IAAAA,MAAM,EAANA;AAPG,GAAP;AASH,CA5QD;;AA8QA,IAAI+Z,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,eAAR;AAAA,SAA4B/Q,WAAW,CAAC8Q,KAAD,CAAX,IAC5C,CAACze,QAAQ,CAACye,KAAK,CAAC5I,MAAP,CADmC,IAE3C7V,QAAQ,CAACye,KAAK,CAAC5I,MAAP,CAAR,IAA0B,CAAC4I,KAAK,CAACvZ,IAFU,GAG1CuZ,KAH0C,GAI1CC,eAAe,IAAI3a,WAAW,CAAC0a,KAAK,CAAC5I,MAAN,CAAajW,KAAd,CAA9B,GACI6e,KAAK,CAAC5I,MAAN,CAAapO,OADjB,GAEIgX,KAAK,CAAC5I,MAAN,CAAajW,KANH;AAAA,CAApB;;AAQA,IAAM+e,UAAU,GAAG,SAAbA,UAAa,CAAC9S,EAAD,EAAQ;AAAA,MACjB3E,IADiB,GAC8J2E,EAD9J,CACjB3E,IADiB;AAAA,MACX0X,KADW,GAC8J/S,EAD9J,CACX+S,KADW;AAAA,MACAC,cADA,GAC8JhT,EAD9J,CACJiT,EADI;AAAA,MACgBxe,MADhB,GAC8JuL,EAD9J,CACgBvL,MADhB;AAAA,MACwBC,QADxB,GAC8JsL,EAD9J,CACwBtL,QADxB;AAAA,wBAC8JsL,EAD9J,CACkCkT,YADlC;AAAA,MACkCA,YADlC,gCACiD1e,eAAe,CAACE,QADjE;AAAA,sBAC8JsL,EAD9J,CAC2EmT,UAD3E;AAAA,MAC2EA,UAD3E,8BACwF3e,eAAe,CAACC,MADxG;AAAA,MACgH2e,SADhH,GAC8JpT,EAD9J,CACgHoT,SADhH;AAAA,MAC2H7a,YAD3H,GAC8JyH,EAD9J,CAC2HzH,YAD3H;AAAA,MACyIsU,OADzI,GAC8J7M,EAD9J,CACyI6M,OADzI;AAAA,MACkJwG,OADlJ,GAC8JrT,EAD9J,CACkJqT,OADlJ;AAAA,MACkKC,IADlK,GACyKvG,MAAM,CAAC/M,EAAD,EAAK,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,EAAwB,QAAxB,EAAkC,UAAlC,EAA8C,cAA9C,EAA8D,YAA9D,EAA4E,WAA5E,EAAyF,cAAzF,EAAyG,SAAzG,EAAoH,SAApH,CAAL,CAD/K;;AAEvB,MAAMkQ,OAAO,GAAGzC,cAAc,EAA9B;;AAFuB,eAGkTZ,OAAO,IAAIqD,OAAO,CAACrD,OAHrU;AAAA,MAGf1G,gBAHe,UAGfA,gBAHe;AAAA,MAGGwD,QAHH,UAGGA,QAHH;AAAA,MAGa2B,QAHb,UAGaA,QAHb;AAAA,MAGuBP,UAHvB,UAGuBA,UAHvB;AAAA,MAGmCrF,SAHnC,UAGmCA,SAHnC;AAAA,MAG8C4E,wBAH9C,UAG8CA,wBAH9C;AAAA,MAGwEf,iBAHxE,UAGwEA,iBAHxE;AAAA,2BAG2FrE,IAH3F;AAAA,MAGmGjC,UAHnG,eAGmGA,UAHnG;AAAA,MAG+GE,QAH/G,eAG+GA,QAH/G;AAAA,MAGyHL,UAHzH,eAGyHA,UAHzH;AAAA,qCAGuIuC,cAHvI;AAAA,MAGyJjC,kBAHzJ,yBAGyJA,kBAHzJ;AAAA,MAG6KF,oBAH7K,yBAG6KA,oBAH7K;AAAA,MAGkNG,WAHlN,UAGqMqJ,SAHrM,CAGkNrJ,WAHlN;AAAA,MAGiOsC,gBAHjO,UAGiOA,gBAHjO;AAAA,MAGmP0B,gBAHnP,UAGmPA,gBAHnP;AAAA,MAGqQM,QAHrQ,UAGqQA,QAHrQ;AAAA,MAG+Q1I,SAH/Q,UAG+QA,SAH/Q;AAAA,MAG0R6H,kBAH1R,UAG0RA,kBAH1R;;AAAA,mBAIaxT,QAAQ,CAAC4E,WAAW,CAACK,YAAD,CAAX,GACvCF,GAAG,CAAC8N,gBAAgB,CAACjH,OAAlB,EAA2B7D,IAA3B,CADoC,GAEvC9C,YAFsC,CAJrB;AAAA;AAAA,MAIhBxE,KAJgB;AAAA,MAITwf,kBAJS;;AAOvB,MAAMC,QAAQ,GAAGngB,MAAM,CAACU,KAAD,CAAvB;AACA,MAAM8e,eAAe,GAAGlU,SAAS,CAAC5K,KAAD,CAAjC;AACA,MAAM0f,sBAAsB,GAAGtQ,QAAQ,IAAIC,kBAA3C;AACA,MAAMsQ,QAAQ,GAAGrgB,MAAM,CAAC0f,KAAD,CAAvB;AACA,MAAMY,UAAU,GAAGtgB,MAAM,CAACggB,OAAD,CAAzB;AACA,MAAMO,eAAe,GAAG,CAACxP,kBAAkB,CAAC0C,kBAAkB,CAAC5H,OAApB,EAA6B7D,IAA7B,CAA3C;AACAqY,EAAAA,QAAQ,CAACxU,OAAT,GAAmB6T,KAAnB;;AACA,MAAMlJ,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAM,CAAChH,cAAc,CAAC;AACzCE,MAAAA,QAAQ,EAAE,CAAC,CAAC1K,GAAG,CAACqN,SAAS,CAACxG,OAAX,EAAoB7D,IAApB,CAD0B;AAEzC8H,MAAAA,QAAQ,EAARA,QAFyC;AAGzCF,MAAAA,UAAU,EAAVA,UAHyC;AAIzCH,MAAAA,UAAU,EAAVA,UAJyC;AAKzCM,MAAAA,kBAAkB,EAAlBA,kBALyC;AAMzCF,MAAAA,oBAAoB,EAApBA,oBANyC;AAOzCG,MAAAA,WAAW,EAAXA;AAPyC,KAAD,CAArB;AAAA,GAAvB;;AASA,MAAMwQ,UAAU,GAAG,SAAbA,UAAa,CAACjB,KAAD,EAAW;AAC1B,QAAMhb,IAAI,GAAG+a,aAAa,CAACC,KAAD,EAAQC,eAAR,CAA1B;AACAU,IAAAA,kBAAkB,CAAC3b,IAAD,CAAlB;AACA4b,IAAAA,QAAQ,CAACtU,OAAT,GAAmBtH,IAAnB;AACA,WAAOA,IAAP;AACH,GALD;;AAMA,MAAMkc,YAAY,GAAG,SAAfA,YAAe,CAAClB,KAAD;AAAA,WAAW;AAAA,wCAAImB,GAAJ;AAAIA,QAAAA,GAAJ;AAAA;;AAAA,aAAYpK,QAAQ,CAACtO,IAAD,EAAOwY,UAAU,CAACjB,KAAK,CAACmB,GAAD,CAAN,CAAjB,EAA+BlK,cAAc,EAA7C,CAApB;AAAA,KAAX;AAAA,GAArB;;AACA,MAAM1T,YAAY,GAAG,SAAfA,YAAe,CAACyc,KAAD,EAAW;AAC5B,QAAMhb,IAAI,GAAGic,UAAU,CAACjB,KAAD,CAAvB;AACAjJ,IAAAA,QAAQ,CAACtO,IAAD,EAAOzD,IAAP,EAAaiS,cAAc,EAA3B,CAAR;AACH,GAHD;;AAIA,MAAMmK,aAAa,GAAGzgB,WAAW,CAAC,YAAM;AACpC,QAAI,CAACqgB,eAAL,EAAsB;AAClBtJ,MAAAA,wBAAwB,CAACrL,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CAAD,EAA0B,IAA1B,CAAxB;AACH;;AACDiQ,IAAAA,QAAQ,CAACzT,MAAM,CAACoc,cAAP,CAAsB;AAAE5Y,MAAAA,IAAI,EAAJA,IAAF;AAAQvC,MAAAA,KAAK,EAAE6a,UAAU,CAACzU;AAA1B,KAAtB,EAA2DtK,KAA3D,EAAkE;AACvEoC,MAAAA,GADuE,eACnEY,IADmE,EAC7D;AACN2b,QAAAA,kBAAkB,CAAC3b,IAAD,CAAlB;AACA4b,QAAAA,QAAQ,CAACtU,OAAT,GAAmBtH,IAAnB;AACH,OAJsE;AAKvES,MAAAA,GALuE,iBAKjE;AACF,eAAOmb,QAAQ,CAACtU,OAAhB;AACH;AAPsE,KAAlE,CAAD,EAQJwU,QAAQ,CAACxU,OARL,CAAR;AASH,GAbgC,EAa9B,CACC0U,eADD,EAEC3U,SAFD,EAGCyU,QAHD,EAICrY,IAJD,EAKCsY,UALD,EAMCrI,QAND,EAOChB,wBAPD,CAb8B,CAAjC;AAsBA9W,EAAAA,SAAS,CAAC;AAAA,WAAM,YAAM;AAClB,OAAC4Q,kBAAkB,CAAC0C,kBAAkB,CAAC5H,OAApB,EAA6B7D,IAA7B,CAAnB,IAAyD0P,UAAU,CAAC1P,IAAD,CAAnE;AACH,KAFS;AAAA,GAAD,EAEN,CAAC0P,UAAD,EAAa1P,IAAb,EAAmByL,kBAAnB,CAFM,CAAT;AAGAtT,EAAAA,SAAS,CAAC,YAAM;AACZwgB,IAAAA,aAAa;AAChB,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT,CA3DuB,CA8DvB;;AACAxgB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACyL,SAAS,CAACC,OAAV,CAAkB7D,IAAlB,CAAL,EAA8B;AAC1B2Y,MAAAA,aAAa;;AACb,UAAIJ,eAAJ,EAAqB;AACjBL,QAAAA,kBAAkB,CAACrb,WAAW,CAACK,YAAD,CAAX,GACbF,GAAG,CAAC8N,gBAAgB,CAACjH,OAAlB,EAA2B7D,IAA3B,CADU,GAEb9C,YAFY,CAAlB;AAGH;AACJ;AACJ,GATQ,CAAT;AAUA,MAAM2b,KAAK,GAAGrc,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc;AAAEoD,IAAAA,IAAI,EAAJA;AAAF,GAAd,EAAwBiY,IAAxB,CAAd,EAA8C5e,QAAQ,uBACvFwe,YADuF,EACxEY,YAAY,CAACpf,QAAD,CAD4D,wBAEvFwe,YAFuF,EAExE/c,YAFwE,CAAtD,CAAd,sBAEiBgd,UAFjB,EAE8B,YAAa;AAC/D,QAAI1e,MAAJ,EAAY;AAAA,yCAD0C0f,IAC1C;AAD0CA,QAAAA,IAC1C;AAAA;;AACR1f,MAAAA,MAAM,CAAC0f,IAAD,CAAN;AACH;;AACD,QAAI9M,gBAAgB,CAACnI,OAAjB,CAAyBuI,OAAzB,IACA,CAACpP,GAAG,CAACsN,gBAAgB,CAACzG,OAAlB,EAA2B7D,IAA3B,CADR,EAC0C;AACtCrE,MAAAA,GAAG,CAAC2O,gBAAgB,CAACzG,OAAlB,EAA2B7D,IAA3B,EAAiC,IAAjC,CAAH;AACAsM,MAAAA,QAAQ;AACX;;AACD,QAAI8L,sBAAJ,EAA4B;AACxBlK,MAAAA,iBAAiB,CAAClO,IAAD,CAAjB;AACH;AACJ,GAduB,EAAd,sBAcD+X,SAAS,KAAKP,eAAe,GAAG,SAAH,GAAeje,KAAnC,CAdR,EAcoDb,KAdpD,EAAd;AAeA,SAAOX,cAAc,CAAC4f,cAAD,CAAd,GACDpf,YAAY,CAACof,cAAD,EAAiBkB,KAAjB,CADX,GAEDvgB,aAAa,CAACqf,cAAD,EAAiBkB,KAAjB,CAFnB;AAGH,CA3FD;;AA6FA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACpU,EAAD,EAAQ;AAAA,MACfgT,cADe,GACqChT,EADrC,CACnBiT,EADmB;AAAA,MACCrV,MADD,GACqCoC,EADrC,CACCpC,MADD;AAAA,MACSvC,IADT,GACqC2E,EADrC,CACS3E,IADT;AAAA,MACeqC,OADf,GACqCsC,EADrC,CACetC,OADf;AAAA,MACwBiQ,QADxB,GACqC3N,EADrC,CACwB2N,QADxB;AAAA,MACyC2F,IADzC,GACgDvG,MAAM,CAAC/M,EAAD,EAAK,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,EAAyB,SAAzB,EAAoC,UAApC,CAAL,CADtD;;AAEzB,MAAMkQ,OAAO,GAAGzC,cAAc,EAA9B;AACA,MAAMjQ,KAAK,GAAGnF,GAAG,CAACuF,MAAM,IAAIsS,OAAO,CAACtS,MAAnB,EAA2BvC,IAA3B,CAAjB;;AACA,MAAI,CAACmC,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AANwB,MAOR6W,mBAPQ,GAOuB7W,KAPvB,CAOjBE,OAPiB;AAAA,MAOaD,KAPb,GAOuBD,KAPvB,CAOaC,KAPb;AAQzB,MAAMyW,KAAK,GAAGrc,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAc,EAAd,EAAmB+a,cAAc,GAAGM,IAAH,GAAU,EAA3C,CAAd,EAA+D;AAAE3F,IAAAA,QAAQ,EAAEA,QAAQ,GACvFA,QAAQ,CAAC;AAAEjQ,MAAAA,OAAO,EAAE2W,mBAAmB,IAAI3W,OAAlC;AAA2C4W,MAAAA,QAAQ,EAAE7W;AAArD,KAAD,CAD+E,GAEvF4W,mBAAmB,IAAI3W;AAF4C,GAA/D,CAAd;AAGA,SAAOsV,cAAc,GAAI5f,cAAc,CAAC4f,cAAD,CAAd,GAAkCpf,YAAY,CAACof,cAAD,EAAiBkB,KAAjB,CAA9C,GAA0EvgB,aAAa,CAACqf,cAAD,EAAiBkB,KAAjB,CAA3F,GAAwHvgB,aAAa,CAACE,QAAD,EAAWgE,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkBic,KAAlB,CAAX,CAA1J;AACH,CAZD;;AAcA,SAASpB,UAAT,EAAqBsB,YAArB,EAAmC1G,WAAnC,EAAgDuC,aAAhD,EAA+D7K,OAA/D,EAAwEqI,cAAxE","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = (value) => value == null;\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst SELECT = 'select';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    const fieldValue = fields[name];\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.filter(Boolean).forEach((option, index) => {\r\n                const { ref, mutationWatcher } = option;\r\n                if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldValue, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAKeys = Object.keys(objectA);\r\n    const objectBKeys = Object.keys(objectB);\r\n    return (objectAKeys.length === objectBKeys.length &&\r\n        objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key]));\r\n};\n\nvar isSameError = (error, { type, types, message }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (path\r\n        ? previous[path] && validateAllFieldCriteria\r\n            ? {\r\n                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n            }\r\n            : {\r\n                [path]: previous[path] || Object.assign({ message,\r\n                    type }, (validateAllFieldCriteria\r\n                    ? {\r\n                        types: { [type]: message || true },\r\n                    }\r\n                    : {})),\r\n            }\r\n        : {}))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldRenderBasedOnError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateSchemaOrResolver) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            const previousError = get(errorsRef.current, name);\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    (previousError\r\n                        ? !isSameError(previousError, error[name])\r\n                        : true);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !isNullOrUndefined(shouldRender)) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateSchemaOrResolver]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const { ref, options } = field;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isString(value)) {\r\n                ref.value = value;\r\n            }\r\n            else {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, [isWeb]);\r\n    const setDirty = useCallback((name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        let isFieldDirty = defaultValuesAtRenderRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isFieldDirty;\r\n        if (isFieldDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray\r\n            ? isFieldDirty\r\n            : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    }, []);\r\n    const setInternalValues = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            const field = fieldsRef.current[fieldName];\r\n            if (isObject(value[key])) {\r\n                setInternalValues(name, value[key], fieldName);\r\n            }\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirty(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirty]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirty(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value);\r\n        }\r\n    }, [setDirty, setFieldValue, setInternalValues]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            shouldRenderBaseOnError(name, error, skipReRender ? null : false);\r\n            return isEmptyObject(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const error = get(errors, payload);\r\n            shouldRenderBaseOnError(payload, (error ? { [payload]: error } : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateSchemaOrResolver) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaOrResolverValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isArrayValue = isArray(names);\r\n        (isArrayValue\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isArrayValue\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isArrayValue) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isArrayValue && valueOrShouldValidate)) {\r\n            triggerValidation(isArrayValue ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldRender = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldRender && reRender();\r\n            }\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldRender = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldRender) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaOrResolver = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (handleChangeRef.current && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateSchemaOrResolver) {\r\n                validateSchemaOrResolver();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        validateSchemaOrResolver,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (name) {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        else {\r\n            errorsRef.current = {};\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, shouldRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(get(errorsRef.current, name), {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (shouldRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })), { shouldRender: true }));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign({}, error)));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const watchFields = watchFieldsRef.current;\r\n        const isDefaultValueUndefined = isUndefined(defaultValue);\r\n        const combinedDefaultValues = isDefaultValueUndefined\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined\r\n                ? get(combinedDefaultValues, fieldNames)\r\n                : defaultValue, true);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(name) {\r\n        if (fieldsRef.current) {\r\n            (isArray(name) ? name : [name]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? field &&\r\n                isArray(field.options) &&\r\n                field.options.filter(Boolean).find((option) => {\r\n                    return value === option.ref.value && option.ref === ref;\r\n                })\r\n            : field && ref === field.ref) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), { mutationWatcher });\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(field, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateSchemaOrResolver &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaOrResolver();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, field).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    isEmptyObject(error)\r\n                        ? validFieldsRef.current.add(name)\r\n                        : (isValidRef.current = false);\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\r\n        }\r\n        if (type) {\r\n            attachEventListeners({\r\n                field: isRadioOrCheckbox && field.options\r\n                    ? field.options[field.options.length - 1]\r\n                    : field,\r\n                isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\r\n                handleChange: handleChangeRef.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        const fields = fieldsRef.current;\r\n        let fieldValues = getFieldsValues(fields);\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                reRender();\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                errorsRef.current = fieldErrors;\r\n                if (submitFocusError && isWeb) {\r\n                    focusOnErrorField(fields, fieldErrors);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : get(defaultValuesRef.current, payload);\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateSchemaOrResolver) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultValuesAtRenderRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateSchemaOrResolver\r\n        ? { validateSchemaIsValid: validateSchemaOrResolver }\r\n        : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, touchedFieldsRef, readFormStateRef, reRender, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const onFocusRef = useRef(onFocus);\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (!isNotFieldArray) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        isNotFieldArray,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocusRef,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => () => {\r\n        !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\r\n    }, [unregister, name, fieldArrayNamesRef]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), { [onBlurName]: (...args) => {\r\n            if (onBlur) {\r\n                onBlur(args);\r\n            }\r\n            if (readFormStateRef.current.touched &&\r\n                !get(touchedFieldsRef.current, name)) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                reRender();\r\n            }\r\n            if (shouldReValidateOnBlur) {\r\n                triggerValidation(name);\r\n            }\r\n        } }), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}