{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + 'Billion';\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + 'Million';\n  } else {\n    return Math.round(num / 100) / 10 + 'Thousand';\n  }\n};\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties; // return NAME !== '';\n\n  return true;\n}\n\nconst MapChart = ({\n  setTooltipContent,\n  mapWidth,\n  mapHeight\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    },\n    width: mapWidth,\n    height: mapHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    translateExtent: [[0, -mapHeight], [mapWidth, mapHeight]],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 6\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    stroke: \"#FFF\",\n    strokeWidth: 0.3,\n    onMouseEnter: () => {\n      const {\n        NAME\n      } = geo.properties;\n      setTooltipContent(`${NAME}`);\n    },\n    onMouseLeave: () => {\n      setTooltipContent('');\n    },\n    style: {\n      default: {\n        fill: '#D6D6DA',\n        outline: 'none'\n      },\n      hover: {\n        fill: '#F53',\n        outline: 'none'\n      },\n      pressed: {\n        fill: '#',\n        outline: 'none'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }) : null)))));\n};\n\nfunction VectorMap() {\n  const [content, setContent] = React.useState('');\n  const mapWidth = 1000;\n  const mapHeight = 600;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    mapWidth: mapWidth,\n    mapHeight: mapHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","geoCentroid","ReactTooltip","geoUrl","rounded","num","Math","round","notThisCountry","country","NAME","properties","MapChart","setTooltipContent","mapWidth","mapHeight","scale","geographies","map","geo","rsmKey","default","fill","outline","hover","pressed","VectorMap","content","setContent","useState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,EAAoDC,SAApD,QAAqE,mBAArE;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,MAAM,GAAG,wGAAf;;AAEA,MAAMC,OAAO,GAAIC,GAAD,IAAS;AACxB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AACrB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,SAA1C;AACA,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,SAAvC;AACA,GAFM,MAEA;AACN,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,UAApC;AACA;AACD,CARD;;AAUA,SAASG,cAAT,CAAwBC,OAAxB,EAAiC;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAWD,OAAO,CAACE,UAAzB,CADgC,CAEhC;;AACA,SAAO,IAAP;AACA;;AAED,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA,QAArB;AAA+BC,EAAAA;AAA/B,CAAD,KAAgD;AAChE,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7C;AAA6D,IAAA,KAAK,EAAEF,QAApE;AAA8E,IAAA,MAAM,EAAEC,SAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAE,CAAE,CAAE,CAAF,EAAK,CAACA,SAAN,CAAF,EAAqB,CAAED,QAAF,EAAYC,SAAZ,CAArB,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEZ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC;AAAEc,IAAAA;AAAF,GAAD,KACAA,WAAW,CAACC,GAAZ,CACEC,GAAD,IACCX,cAAc,CAACW,GAAD,CAAd,gBACC,oBAAC,SAAD;AACC,IAAA,GAAG,EAAEA,GAAG,CAACC,MADV;AAEC,IAAA,SAAS,EAAED,GAFZ;AAGC,IAAA,MAAM,EAAC,MAHR;AAIC,IAAA,WAAW,EAAE,GAJd;AAKC,IAAA,YAAY,EAAE,MAAM;AACnB,YAAM;AAAET,QAAAA;AAAF,UAAWS,GAAG,CAACR,UAArB;AACAE,MAAAA,iBAAiB,CAAE,GAAEH,IAAK,EAAT,CAAjB;AACA,KARF;AASC,IAAA,YAAY,EAAE,MAAM;AACnBG,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACA,KAXF;AAYC,IAAA,KAAK,EAAE;AACNQ,MAAAA,OAAO,EAAE;AACRC,QAAAA,IAAI,EAAE,SADE;AAERC,QAAAA,OAAO,EAAE;AAFD,OADH;AAKNC,MAAAA,KAAK,EAAE;AACNF,QAAAA,IAAI,EAAE,MADA;AAENC,QAAAA,OAAO,EAAE;AAFH,OALD;AASNE,MAAAA,OAAO,EAAE;AACRH,QAAAA,IAAI,EAAE,GADE;AAERC,QAAAA,OAAO,EAAE;AAFD;AATH,KAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GA4BI,IA9BN,CAFF,CADD,CADD,CADD,CADD;AA2CA,CA5CD;;AA8CA,SAASG,SAAT,GAAqB;AACpB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BjC,KAAK,CAACkC,QAAN,CAAe,EAAf,CAAhC;AACA,QAAMf,QAAQ,GAAG,IAAjB;AACA,QAAMC,SAAS,GAAG,GAAlB;AAEA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,QAAD;AAAU,IAAA,iBAAiB,EAAEa,UAA7B;AAAyC,IAAA,QAAQ,EAAEd,QAAnD;AAA6D,IAAA,SAAS,EAAEC,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAEC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeY,OAAf,CAFD,CADD;AAMA;;AAED,eAAe/B,IAAI,CAAC8B,SAAD,CAAnB","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tif (num > 1000000000) {\n\t\treturn Math.round(num / 100000000) / 10 + 'Billion';\n\t} else if (num > 1000000) {\n\t\treturn Math.round(num / 100000) / 10 + 'Million';\n\t} else {\n\t\treturn Math.round(num / 100) / 10 + 'Thousand';\n\t}\n};\n\nfunction notThisCountry(country) {\n\tconst { NAME } = country.properties;\n\t// return NAME !== '';\n\treturn true;\n}\n\nconst MapChart = ({ setTooltipContent, mapWidth, mapHeight }) => {\n\treturn (\n\t\t<div>\n\t\t\t<ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }} width={mapWidth} height={mapHeight}>\n\t\t\t\t<ZoomableGroup translateExtent={[ [ 0, -mapHeight ], [ mapWidth, mapHeight ] ]}>\n\t\t\t\t\t<Geographies geography={geoUrl}>\n\t\t\t\t\t\t{({ geographies }) =>\n\t\t\t\t\t\t\tgeographies.map(\n\t\t\t\t\t\t\t\t(geo) =>\n\t\t\t\t\t\t\t\t\tnotThisCountry(geo) ? (\n\t\t\t\t\t\t\t\t\t\t<Geography\n\t\t\t\t\t\t\t\t\t\t\tkey={geo.rsmKey}\n\t\t\t\t\t\t\t\t\t\t\tgeography={geo}\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"#FFF\"\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth={0.3}\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst { NAME } = geo.properties;\n\t\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent(`${NAME}`);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent('');\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\thover: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#F53',\n\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tpressed: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#',\n\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t</Geographies>\n\t\t\t\t</ZoomableGroup>\n\t\t\t</ComposableMap>\n\t\t</div>\n\t);\n};\n\nfunction VectorMap() {\n\tconst [ content, setContent ] = React.useState('');\n\tconst mapWidth = 1000;\n\tconst mapHeight = 600;\n\n\treturn (\n\t\t<div>\n\t\t\t<MapChart setTooltipContent={setContent} mapWidth={mapWidth} mapHeight={mapHeight} />\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n}\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}