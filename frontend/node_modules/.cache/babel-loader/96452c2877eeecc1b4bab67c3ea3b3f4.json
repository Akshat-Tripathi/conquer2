{"ast":null,"code":"import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = value => value == null;\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = value => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst SELECT = 'select';\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({\n  field: {\n    ref\n  },\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!isKey(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  let index = -1;\n  let length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  const result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const childObject = parent(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  const result = !(childObject != null) || delete childObject[key];\n  let previousObjRef = undefined;\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data)).length) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(path => {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  const {\n    ref,\n    ref: {\n      name,\n      type\n    },\n    mutationWatcher\n  } = field;\n  const fieldValue = fields[name];\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    const {\n      options\n    } = fieldValue;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach((option, index) => {\n        const {\n          ref,\n          mutationWatcher\n        } = option;\n\n        if (ref && isDetached(ref) && isSameRef(option, ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [`[${index}]`]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldValue, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, option) => option && option.ref.checked ? {\n  isValid: true,\n  value: option.ref.value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = element => element.type === 'file';\n\nvar isMultipleSelect = element => element.type === `${SELECT}-multiple`;\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.ref.checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const {\n    name,\n    value\n  } = ref;\n  const field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\n  const output = {};\n\n  for (const name in fields) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) ? search.find(data => name.startsWith(data)) : search && search.nest)) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  }\n\n  return output;\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\n  const objectAKeys = Object.keys(objectA);\n  const objectBKeys = Object.keys(objectB);\n  return objectAKeys.length === objectBKeys.length && objectAKeys.every(key => objectB[key] && objectB[key] === objectA[key]);\n};\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isValueMessage = value => isObject(value) && !isRegex(value);\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isMessage = value => isString(value) || isObject(value) && isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n        [type]: message || true\n      })\n    });\n  }\n\n  return {};\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  var _a;\n\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value: requiredValue,\n      message: requiredMessage\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const {\n      value: maxValue,\n      message: maxMessage\n    } = getValueAndMessage(max);\n    const {\n      value: minValue,\n      message: minMessage\n    } = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message: patternMessage\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), path ? previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n} : {}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n  if (validationResolver) {\n    return validationResolver(data, context);\n  }\n\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false,\n        context\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\n  let value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldArrayParentName = name => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = element => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  validationResolver,\n  validationContext,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const fieldArrayDefaultValues = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultValuesRef = useRef(defaultValues);\n  const defaultValuesAtRenderRef = useRef({});\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const validationContextRef = useRef(validationContext);\n  const fieldArrayNamesRef = useRef(new Set());\n  const [, render] = useState();\n  const {\n    isOnBlur,\n    isOnSubmit,\n    isOnChange\n  } = useRef(modeChecker(mode)).current;\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit\n  } = useRef(modeChecker(reValidateMode)).current;\n  validationContextRef.current = validationContext;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\n    let shouldReRender = shouldRender || shouldRenderBasedOnError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateSchemaOrResolver) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      const previousError = get(errorsRef.current, name);\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || (previousError ? !isSameError(previousError, error[name]) : true);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateSchemaOrResolver]);\n  const setFieldValue = useCallback((field, rawValue) => {\n    const {\n      ref,\n      options\n    } = field;\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(ref)) {\n      if (isString(value)) {\n        ref.value = value;\n      } else {\n        ref.files = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, [isWeb]);\n  const setDirty = useCallback(name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    let isFieldDirty = defaultValuesAtRenderRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n\n    if (isFieldArray) {\n      const fieldArrayName = getFieldArrayParentName(name);\n      isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isFieldDirty;\n\n    if (isFieldDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isFieldDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  }, []);\n  const setInternalValues = useCallback((name, value, parentFieldName) => {\n    const isValueArray = isArray(value);\n\n    for (const key in value) {\n      const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\n      const field = fieldsRef.current[fieldName];\n\n      if (isObject(value[key])) {\n        setInternalValues(name, value[key], fieldName);\n      }\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirty(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirty]);\n  const setInternalValue = useCallback((name, value) => {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      const output = setDirty(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value);\n    }\n  }, [setDirty, setFieldValue, setInternalValues]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n      shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n      return isEmptyObject(error);\n    }\n\n    return false;\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaOrResolverValidation = useCallback(async payload => {\n    const {\n      errors\n    } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      const error = get(errors, payload);\n      shouldRenderBaseOnError(payload, error ? {\n        [payload]: error\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (shouldValidateSchemaOrResolver) {\n      return executeSchemaOrResolverValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaOrResolverValidation, executeValidation, reRender, shouldValidateSchemaOrResolver]);\n\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    let shouldRender = false;\n    const isArrayValue = isArray(names);\n    (isArrayValue ? names : [names]).forEach(name => {\n      const isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isArrayValue ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isArrayValue) {\n      reRender();\n    }\n\n    if (shouldValidate || isArrayValue && valueOrShouldValidate) {\n      triggerValidation(isArrayValue ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isOnChange,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldRender = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldRender && reRender();\n    }\n\n    if (shouldValidateSchemaOrResolver) {\n      const {\n        errors\n      } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldRender = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n      reRender();\n    }\n  };\n  const validateSchemaOrResolver = useCallback((values = {}) => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n  const removeFieldEventListener = useCallback((field, forceDelete) => {\n    if (handleChangeRef.current && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  }, []);\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    const {\n      name\n    } = field.ref;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateSchemaOrResolver) {\n        validateSchemaOrResolver();\n      }\n    }\n  }, [reRender, shouldValidateSchemaOrResolver, validateSchemaOrResolver, removeFieldEventListener]);\n\n  function clearError(name) {\n    if (name) {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    shouldRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(get(errorsRef.current, name), {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (shouldRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }), {\n        shouldRender: true\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign({}, error)));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const watchFields = watchFieldsRef.current;\n    const isDefaultValueUndefined = isUndefined(defaultValue);\n    const combinedDefaultValues = isDefaultValueUndefined ? defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined ? get(combinedDefaultValues, fieldNames) : defaultValue, true);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {\n        [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)\n      }), {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(name) {\n    if (fieldsRef.current) {\n      (isArray(name) ? name : [name]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldRefAndValidationOptions = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? field && isArray(field.options) && field.options.filter(Boolean).find(option => {\n      return value === option.ref.value && option.ref === ref;\n    }) : field && ref === field.ref) {\n      fields[name] = Object.assign(Object.assign({}, field), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [...(field && field.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), {\n        mutationWatcher\n      });\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = get(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (shouldValidateSchemaOrResolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaOrResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(error => {\n          const previousFormIsValid = isValidRef.current;\n          isEmptyObject(error) ? validFieldsRef.current.add(name) : isValidRef.current = false;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field: isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field,\n        isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\n        handleChange: handleChangeRef.current\n      });\n    }\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors = {};\n    const fields = fieldsRef.current;\n    let fieldValues = getFieldsValues(fields);\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (shouldValidateSchemaOrResolver) {\n        const {\n          errors,\n          values\n        } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        for (const field of Object.values(fields)) {\n          if (field) {\n            const {\n              ref: {\n                name\n              }\n            } = field;\n            const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            if (fieldError[name]) {\n              set(fieldErrors, name, fieldError[name]);\n              validFieldsRef.current.delete(name);\n            } else {\n              if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        reRender();\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        errorsRef.current = fieldErrors;\n\n        if (submitFocusError && isWeb) {\n          focusOnErrorField(fields, fieldErrors);\n        }\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [isWeb, reRender, shouldValidateSchemaOrResolver, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  const resetRefs = ({\n    errors,\n    dirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields\n  }) => {\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = new Set();\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (values, omitResetState = {}) => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const {\n            ref,\n            options\n          } = field;\n          const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options) ? options[0].ref : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return fieldsRef.current[payload] ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref) : get(defaultValuesRef.current, payload);\n    }\n\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  }\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateSchemaOrResolver) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  const commonProps = {\n    triggerValidation,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    register: useCallback(register, [defaultValuesRef.current, defaultValuesAtRenderRef.current]),\n    unregister: useCallback(unregister, []),\n    getValues: useCallback(getValues, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState\n  };\n  const control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener,\n    reRender\n  }, shouldValidateSchemaOrResolver ? {\n    validateSchemaIsValid: validateSchemaOrResolver\n  } : {}), {\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  }), commonProps);\n  return Object.assign({\n    watch,\n    control,\n    handleSubmit,\n    reset: useCallback(reset, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var {\n    children,\n    formState,\n    errors\n  } = _a,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = (value, keyName) => Object.assign({\n  [keyName]: generateId()\n}, isObject(value) ? value : {\n  value\n});\n\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\n  for (const removeIndex of removeIndexes) {\n    if (indexes.indexOf(removeIndex) < 0) {\n      notFoundIndexes.push(removeIndex);\n    }\n  }\n\n  for (const index of indexes.sort()) {\n    if (removeIndexes.indexOf(index) > -1) {\n      updatedIndexes.push(-1);\n      count++;\n    } else {\n      updatedIndexes.push(index - count - (notFoundIndexes.length ? notFoundIndexes.map(notFoundIndex => notFoundIndex < index).filter(Boolean).length : 0));\n    }\n  }\n\n  return updatedIndexes;\n};\n\nconst removeAt = (data, index) => [...data.slice(0, index), ...data.slice(index + 1)];\n\nfunction removeAtIndexes(data, index) {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [...(isArray(value) ? value : [value || null]), ...data];\n}\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n}\n\nvar fillEmptyArray = value => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id'\n}) => {\n  const methods = useFormContext();\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    getValues,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid\n  } = control || methods.control;\n\n  const getDefaultValues = () => [...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, [])];\n\n  const memoizedDefaultValues = useRef(getDefaultValues());\n  const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = useState(false);\n  const allFields = useRef(fields);\n  const isNameKey = isKey(name);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = values => values.map(value => appendId(value, keyName));\n\n  const setFieldAndValidState = fieldsValues => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues\n      });\n    }\n  };\n\n  const modifyDirtyFields = ({\n    shouldRender,\n    isRemove,\n    isPrePend,\n    index,\n    value = {}\n  } = {}) => {\n    let render = shouldRender;\n    const values = isArray(value) ? value : [value];\n\n    if (readFormStateRef.current.dirty) {\n      const dirtyFieldIndexesAndValues = {};\n\n      if (isPrePend || isRemove) {\n        for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\n          if (isMatchFieldArrayName(dirtyField, name)) {\n            const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\n\n            if (matchedIndexes) {\n              const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\n\n              if (dirtyFieldIndexesAndValues[matchIndex]) {\n                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\n              } else {\n                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\n              }\n            }\n\n            dirtyFieldsRef.current.delete(dirtyField);\n          }\n        }\n      }\n\n      if (!isUndefined(index) || isPrePend) {\n        const updatedDirtyFieldIndexes = isUndefined(index) ? [] : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map(i => +i), isArray(index) ? index : [index]);\n        Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\n          const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\n\n          if (updateIndex > -1) {\n            for (const value of values) {\n              const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\n\n              if (matchedIndexes) {\n                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend ? +matchedIndexes[matchedIndexes.length - 1] + values.length : updateIndex}$1`));\n              }\n            }\n          }\n        });\n      }\n\n      if (!isRemove) {\n        values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach(key => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\n        isDirtyRef.current = true;\n      }\n\n      render = true;\n    }\n\n    if (render && !isWatchAllRef.current) {\n      reRender();\n    }\n  };\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = get(getValues({\n      nest: true\n    }), name);\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    setFieldAndValidState([...allFields.current, ...(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])]);\n    modifyDirtyFields({\n      value\n    });\n  };\n\n  const prepend$1 = value => {\n    let shouldRender = false;\n    resetFields();\n    setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\n      shouldRender = true;\n    }\n\n    modifyDirtyFields({\n      shouldRender,\n      isPrePend: true,\n      value\n    });\n  };\n\n  const remove = index => {\n    let shouldRender = false;\n    const isIndexUndefined = isUndefined(index);\n\n    if (!isIndexUndefined) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    modifyDirtyFields({\n      shouldRender,\n      isRemove: true,\n      index\n    });\n  };\n\n  const insert$1 = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\n    setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    setFieldAndValidState([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    setFieldAndValidState([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(() => {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect(() => {\n    if (isWatchAllRef && isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n  }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\n  useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields\n  };\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n\nconst Controller = _a => {\n  var {\n    name,\n    rules,\n    as: InnerComponent,\n    onBlur,\n    onChange,\n    onChangeName = VALIDATION_MODE.onChange,\n    onBlurName = VALIDATION_MODE.onBlur,\n    valueName,\n    defaultValue,\n    control,\n    onFocus\n  } = _a,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    removeFieldEventListener,\n    triggerValidation,\n    mode: {\n      isOnSubmit,\n      isOnBlur,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    formState: {\n      isSubmitted\n    },\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef\n  } = control || methods.control;\n  const [value, setInputStateValue] = useState(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  const valueRef = useRef(value);\n  const isCheckboxInput = isBoolean(value);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const rulesRef = useRef(rules);\n  const onFocusRef = useRef(onFocus);\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  rulesRef.current = rules;\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isOnChange,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = event => {\n    const data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = event => {\n    const data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = useCallback(() => {\n    if (!isNotFieldArray) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name,\n      focus: onFocusRef.current\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), rulesRef.current);\n  }, [isNotFieldArray, fieldsRef, rulesRef, name, onFocusRef, register, removeFieldEventListener]);\n  useEffect(() => () => {\n    !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n  }, [unregister, name, fieldArrayNamesRef]);\n  useEffect(() => {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n\n      if (isNotFieldArray) {\n        setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n      }\n    }\n  });\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (readFormStateRef.current.touched && !get(touchedFieldsRef.current, name)) {\n        set(touchedFieldsRef.current, name, true);\n        reRender();\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  }), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nconst ErrorMessage = _a => {\n  var {\n    as: InnerComponent,\n    errors,\n    name,\n    message,\n    children\n  } = _a,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const {\n    message: messageFromRegister,\n    types\n  } = error;\n  const props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isValidElement","useRef","useState","useCallback","useEffect","createContext","useContext","createElement","cloneElement","Fragment","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","SELECT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","REGEX_ARRAY_FIELD_INDEX","attachEventListeners","field","ref","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","isUndefined","val","undefined","get","obj","defaultValue","split","filter","Boolean","focusOnErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","unset","paths","forEach","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","option","disconnect","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","startsWith","find","nest","compareObject","objectA","objectB","objectAKeys","objectBKeys","every","isSameError","error","types","message","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","_a","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","e","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateSchemaOrResolver","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isFieldArray","previousDirtyFieldsLength","size","fieldArrayName","isDirtyChanged","setInternalValues","parentFieldName","isValueArray","setInternalValue","executeValidation","skipReRender","executeSchemaOrResolverValidation","payload","previousFormIsValid","triggerValidation","Promise","all","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isArrayValue","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","validateSchemaOrResolver","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","setError","watch","fieldNames","isDefaultValueUndefined","combinedDefaultValues","unregister","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","process","env","NODE_ENV","formState","commonProps","prop","control","validateSchemaIsValid","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","getSortRemovedItems","indexes","removeIndexes","updatedIndexes","count","notFoundIndexes","removeIndex","sort","notFoundIndex","removeAt","removeAtIndexes","removeArrayAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prepend","insert","fillEmptyArray","fill","useFieldArray","methods","getDefaultValues","memoizedDefaultValues","setField","isDeleted","setIsDeleted","allFields","isNameKey","appendValueWithKey","setFieldAndValidState","fieldsValues","modifyDirtyFields","isRemove","isPrePend","dirtyFieldIndexesAndValues","dirtyField","matchedIndexes","matchIndex","updatedDirtyFieldIndexes","updateIndex","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend$1","remove","isIndexUndefined","fieldIndex","isFound","isLast","isCurrentIndex","currentFieldName","previousFieldName","insert$1","swap","move","pop","watchField","resetFunctions","fieldArrayNames","getInputValue","event","isCheckboxInput","Controller","rules","as","InnerComponent","onChangeName","onBlurName","valueName","onFocus","rest","setInputStateValue","valueRef","shouldReValidateOnBlur","rulesRef","onFocusRef","isNotFieldArray","commonTask","eventWrapper","arg","registerField","defineProperty","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = (value) => value == null;\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst SELECT = 'select';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    const fieldValue = fields[name];\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.filter(Boolean).forEach((option, index) => {\r\n                const { ref, mutationWatcher } = option;\r\n                if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldValue, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAKeys = Object.keys(objectA);\r\n    const objectBKeys = Object.keys(objectB);\r\n    return (objectAKeys.length === objectBKeys.length &&\r\n        objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key]));\r\n};\n\nvar isSameError = (error, { type, types, message }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (path\r\n        ? previous[path] && validateAllFieldCriteria\r\n            ? {\r\n                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n            }\r\n            : {\r\n                [path]: previous[path] || Object.assign({ message,\r\n                    type }, (validateAllFieldCriteria\r\n                    ? {\r\n                        types: { [type]: message || true },\r\n                    }\r\n                    : {})),\r\n            }\r\n        : {}))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldRenderBasedOnError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateSchemaOrResolver) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            const previousError = get(errorsRef.current, name);\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    (previousError\r\n                        ? !isSameError(previousError, error[name])\r\n                        : true);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !isNullOrUndefined(shouldRender)) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateSchemaOrResolver]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const { ref, options } = field;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isString(value)) {\r\n                ref.value = value;\r\n            }\r\n            else {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, [isWeb]);\r\n    const setDirty = useCallback((name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        let isFieldDirty = defaultValuesAtRenderRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isFieldDirty;\r\n        if (isFieldDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray\r\n            ? isFieldDirty\r\n            : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    }, []);\r\n    const setInternalValues = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            const field = fieldsRef.current[fieldName];\r\n            if (isObject(value[key])) {\r\n                setInternalValues(name, value[key], fieldName);\r\n            }\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirty(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirty]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirty(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value);\r\n        }\r\n    }, [setDirty, setFieldValue, setInternalValues]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            shouldRenderBaseOnError(name, error, skipReRender ? null : false);\r\n            return isEmptyObject(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const error = get(errors, payload);\r\n            shouldRenderBaseOnError(payload, (error ? { [payload]: error } : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateSchemaOrResolver) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaOrResolverValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isArrayValue = isArray(names);\r\n        (isArrayValue\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isArrayValue\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isArrayValue) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isArrayValue && valueOrShouldValidate)) {\r\n            triggerValidation(isArrayValue ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldRender = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldRender && reRender();\r\n            }\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldRender = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldRender) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaOrResolver = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (handleChangeRef.current && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateSchemaOrResolver) {\r\n                validateSchemaOrResolver();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        validateSchemaOrResolver,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (name) {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        else {\r\n            errorsRef.current = {};\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, shouldRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(get(errorsRef.current, name), {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (shouldRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })), { shouldRender: true }));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign({}, error)));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const watchFields = watchFieldsRef.current;\r\n        const isDefaultValueUndefined = isUndefined(defaultValue);\r\n        const combinedDefaultValues = isDefaultValueUndefined\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined\r\n                ? get(combinedDefaultValues, fieldNames)\r\n                : defaultValue, true);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(name) {\r\n        if (fieldsRef.current) {\r\n            (isArray(name) ? name : [name]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? field &&\r\n                isArray(field.options) &&\r\n                field.options.filter(Boolean).find((option) => {\r\n                    return value === option.ref.value && option.ref === ref;\r\n                })\r\n            : field && ref === field.ref) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), { mutationWatcher });\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(field, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateSchemaOrResolver &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaOrResolver();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, field).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    isEmptyObject(error)\r\n                        ? validFieldsRef.current.add(name)\r\n                        : (isValidRef.current = false);\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\r\n        }\r\n        if (type) {\r\n            attachEventListeners({\r\n                field: isRadioOrCheckbox && field.options\r\n                    ? field.options[field.options.length - 1]\r\n                    : field,\r\n                isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\r\n                handleChange: handleChangeRef.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        const fields = fieldsRef.current;\r\n        let fieldValues = getFieldsValues(fields);\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                reRender();\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                errorsRef.current = fieldErrors;\r\n                if (submitFocusError && isWeb) {\r\n                    focusOnErrorField(fields, fieldErrors);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : get(defaultValuesRef.current, payload);\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateSchemaOrResolver) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultValuesAtRenderRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateSchemaOrResolver\r\n        ? { validateSchemaIsValid: validateSchemaOrResolver }\r\n        : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, touchedFieldsRef, readFormStateRef, reRender, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const onFocusRef = useRef(onFocus);\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (!isNotFieldArray) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        isNotFieldArray,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocusRef,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => () => {\r\n        !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\r\n    }, [unregister, name, fieldArrayNamesRef]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), { [onBlurName]: (...args) => {\r\n            if (onBlur) {\r\n                onBlur(args);\r\n            }\r\n            if (readFormStateRef.current.touched &&\r\n                !get(touchedFieldsRef.current, name)) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                reRender();\r\n            }\r\n            if (shouldReValidateOnBlur) {\r\n                triggerValidation(name);\r\n            }\r\n        } }), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}