{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx\";\n// import React, { Component } from \"react\";\n// //svgWorldMap\n// import svgWorldMap from \"frontend/src/pages/SVG-World-Map/src/svg-world-map.js\";\n// async function loadSVGWorldMap() {\n//   var MyWorldMap;\n//   MyWorldMap = svgWorldMap();\n//   return MyWorldMap;\n//   // Do something with the map...\n// }\n// class MapDisplay extends Component {\n//   render() {\n//     return svgWorldMap();\n//   }\n// }\n// export default MapDisplay;\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nconst cities = [{\n  name: \"Tokyo\",\n  coordinates: [139.6917, 35.6895],\n  population: 37843000\n}, {\n  name: \"Jakarta\",\n  coordinates: [106.865, -6.1751],\n  population: 30539000\n}, {\n  name: \"Delhi\",\n  coordinates: [77.1025, 28.7041],\n  population: 24998000\n}, {\n  name: \"Manila\",\n  coordinates: [120.9842, 14.5995],\n  population: 24123000\n}, {\n  name: \"Seoul\",\n  coordinates: [126.978, 37.5665],\n  population: 23480000\n}, {\n  name: \"Shanghai\",\n  coordinates: [121.4737, 31.2304],\n  population: 23416000\n}, {\n  name: \"Karachi\",\n  coordinates: [67.0099, 24.8615],\n  population: 22123000\n}, {\n  name: \"Beijing\",\n  coordinates: [116.4074, 39.9042],\n  population: 21009000\n}, {\n  name: \"New York\",\n  coordinates: [-74.0059, 40.7128],\n  population: 20630000\n}, {\n  name: \"Guangzhou\",\n  coordinates: [113.2644, 23.1291],\n  population: 20597000\n}, {\n  name: \"Sao Paulo\",\n  coordinates: [-46.6333, -23.5505],\n  population: 20365000\n}, {\n  name: \"Mexico City\",\n  coordinates: [-99.1332, 19.4326],\n  population: 20063000\n}, {\n  name: \"Mumbai\",\n  coordinates: [72.8777, 19.076],\n  population: 17712000\n}, {\n  name: \"Osaka\",\n  coordinates: [135.5022, 34.6937],\n  population: 17444000\n}, {\n  name: \"Moscow\",\n  coordinates: [37.6173, 55.7558],\n  population: 16170000\n}, {\n  name: \"Dhaka\",\n  coordinates: [90.4125, 23.8103],\n  population: 15669000\n}, {\n  name: \"Greater Cairo\",\n  coordinates: [31.2357, 30.0444],\n  population: 15600000\n}, {\n  name: \"Los Angeles\",\n  coordinates: [-118.2437, 34.0522],\n  population: 15058000\n}, {\n  name: \"Bangkok\",\n  coordinates: [100.5018, 13.7563],\n  population: 14998000\n}, {\n  name: \"Kolkata\",\n  coordinates: [88.3639, 22.5726],\n  population: 14667000\n}, {\n  name: \"Buenos Aires\",\n  coordinates: [-58.3816, -34.6037],\n  population: 14122000\n}, {\n  name: \"Tehran\",\n  coordinates: [51.389, 35.6892],\n  population: 13532000\n}, {\n  name: \"Istanbul\",\n  coordinates: [28.9784, 41.0082],\n  population: 13287000\n}, {\n  name: \"Lagos\",\n  coordinates: [3.3792, 6.5244],\n  population: 13123000\n}, {\n  name: \"Shenzhen\",\n  coordinates: [114.0579, 22.5431],\n  population: 12084000\n}, {\n  name: \"Rio de Janeiro\",\n  coordinates: [-43.1729, -22.9068],\n  population: 11727000\n}, {\n  name: \"Kinshasa\",\n  coordinates: [15.2663, -4.4419],\n  population: 11587000\n}, {\n  name: \"Tianjin\",\n  coordinates: [117.3616, 39.3434],\n  population: 10920000\n}, {\n  name: \"Paris\",\n  coordinates: [2.3522, 48.8566],\n  population: 10858000\n}, {\n  name: \"Lima\",\n  coordinates: [-77.0428, -12.0464],\n  population: 10750000\n}];\nconst projection = geoEqualEarth().scale(160).translate([800 / 2, 450 / 2]);\n\nconst WorldMap = () => {\n  const [geographies, setGeographies] = useState([]);\n  useEffect(() => {\n    fetch(\"/world-110m.json\").then(response => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n\n      response.json().then(worlddata => {\n        setGeographies(feature(worlddata, worlddata.objects.countries).features);\n      });\n    });\n  }, []);\n\n  const handleCountryClick = countryIndex => {\n    console.log(\"Clicked on country: \", geographies[countryIndex]);\n  };\n\n  const handleMarkerClick = i => {\n    console.log(\"Marker: \", cities[i]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: 800,\n    height: 450,\n    viewBox: \"0 0 800 450\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: \"countries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, geographies.map((d, i) => /*#__PURE__*/React.createElement(\"path\", {\n    key: `path-${i}`,\n    d: geoPath().projection(projection)(d),\n    className: \"country\",\n    fill: `rgba(38,50,56,${1 / geographies.length * i})`,\n    stroke: \"#FFFFFF\",\n    strokeWidth: 0.5,\n    onClick: () => handleCountryClick(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    className: \"markers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, cities.map((city, i) => /*#__PURE__*/React.createElement(\"circle\", {\n    key: `marker-${i}`,\n    cx: projection(city.coordinates)[0],\n    cy: projection(city.coordinates)[1],\n    r: city.population / 3000000,\n    fill: \"#E91E63\",\n    stroke: \"#FFFFFF\",\n    className: \"marker\",\n    onClick: () => handleMarkerClick(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","useState","useEffect","geoEqualEarth","geoPath","feature","cities","name","coordinates","population","projection","scale","translate","WorldMap","geographies","setGeographies","fetch","then","response","status","console","log","json","worlddata","objects","countries","features","handleCountryClick","countryIndex","handleMarkerClick","i","map","d","length","city"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\n// //svgWorldMap\n// import svgWorldMap from \"frontend/src/pages/SVG-World-Map/src/svg-world-map.js\";\n\n// async function loadSVGWorldMap() {\n//   var MyWorldMap;\n//   MyWorldMap = svgWorldMap();\n//   return MyWorldMap;\n//   // Do something with the map...\n// }\n\n// class MapDisplay extends Component {\n//   render() {\n//     return svgWorldMap();\n//   }\n// }\n\n// export default MapDisplay;\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoEqualEarth, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\n\nconst cities = [\n  { name: \"Tokyo\", coordinates: [139.6917, 35.6895], population: 37843000 },\n  { name: \"Jakarta\", coordinates: [106.865, -6.1751], population: 30539000 },\n  { name: \"Delhi\", coordinates: [77.1025, 28.7041], population: 24998000 },\n  { name: \"Manila\", coordinates: [120.9842, 14.5995], population: 24123000 },\n  { name: \"Seoul\", coordinates: [126.978, 37.5665], population: 23480000 },\n  { name: \"Shanghai\", coordinates: [121.4737, 31.2304], population: 23416000 },\n  { name: \"Karachi\", coordinates: [67.0099, 24.8615], population: 22123000 },\n  { name: \"Beijing\", coordinates: [116.4074, 39.9042], population: 21009000 },\n  { name: \"New York\", coordinates: [-74.0059, 40.7128], population: 20630000 },\n  { name: \"Guangzhou\", coordinates: [113.2644, 23.1291], population: 20597000 },\n  {\n    name: \"Sao Paulo\",\n    coordinates: [-46.6333, -23.5505],\n    population: 20365000,\n  },\n  {\n    name: \"Mexico City\",\n    coordinates: [-99.1332, 19.4326],\n    population: 20063000,\n  },\n  { name: \"Mumbai\", coordinates: [72.8777, 19.076], population: 17712000 },\n  { name: \"Osaka\", coordinates: [135.5022, 34.6937], population: 17444000 },\n  { name: \"Moscow\", coordinates: [37.6173, 55.7558], population: 16170000 },\n  { name: \"Dhaka\", coordinates: [90.4125, 23.8103], population: 15669000 },\n  {\n    name: \"Greater Cairo\",\n    coordinates: [31.2357, 30.0444],\n    population: 15600000,\n  },\n  {\n    name: \"Los Angeles\",\n    coordinates: [-118.2437, 34.0522],\n    population: 15058000,\n  },\n  { name: \"Bangkok\", coordinates: [100.5018, 13.7563], population: 14998000 },\n  { name: \"Kolkata\", coordinates: [88.3639, 22.5726], population: 14667000 },\n  {\n    name: \"Buenos Aires\",\n    coordinates: [-58.3816, -34.6037],\n    population: 14122000,\n  },\n  { name: \"Tehran\", coordinates: [51.389, 35.6892], population: 13532000 },\n  { name: \"Istanbul\", coordinates: [28.9784, 41.0082], population: 13287000 },\n  { name: \"Lagos\", coordinates: [3.3792, 6.5244], population: 13123000 },\n  { name: \"Shenzhen\", coordinates: [114.0579, 22.5431], population: 12084000 },\n  {\n    name: \"Rio de Janeiro\",\n    coordinates: [-43.1729, -22.9068],\n    population: 11727000,\n  },\n  { name: \"Kinshasa\", coordinates: [15.2663, -4.4419], population: 11587000 },\n  { name: \"Tianjin\", coordinates: [117.3616, 39.3434], population: 10920000 },\n  { name: \"Paris\", coordinates: [2.3522, 48.8566], population: 10858000 },\n  { name: \"Lima\", coordinates: [-77.0428, -12.0464], population: 10750000 },\n];\n\nconst projection = geoEqualEarth()\n  .scale(160)\n  .translate([800 / 2, 450 / 2]);\n\nconst WorldMap = () => {\n  const [geographies, setGeographies] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/world-110m.json\").then((response) => {\n      if (response.status !== 200) {\n        console.log(`There was a problem: ${response.status}`);\n        return;\n      }\n      response.json().then((worlddata) => {\n        setGeographies(\n          feature(worlddata, worlddata.objects.countries).features\n        );\n      });\n    });\n  }, []);\n\n  const handleCountryClick = (countryIndex) => {\n    console.log(\"Clicked on country: \", geographies[countryIndex]);\n  };\n\n  const handleMarkerClick = (i) => {\n    console.log(\"Marker: \", cities[i]);\n  };\n\n  return (\n    <svg width={800} height={450} viewBox=\"0 0 800 450\">\n      <g className=\"countries\">\n        {geographies.map((d, i) => (\n          <path\n            key={`path-${i}`}\n            d={geoPath().projection(projection)(d)}\n            className=\"country\"\n            fill={`rgba(38,50,56,${(1 / geographies.length) * i})`}\n            stroke=\"#FFFFFF\"\n            strokeWidth={0.5}\n            onClick={() => handleCountryClick(i)}\n          />\n        ))}\n      </g>\n      <g className=\"markers\">\n        {cities.map((city, i) => (\n          <circle\n            key={`marker-${i}`}\n            cx={projection(city.coordinates)[0]}\n            cy={projection(city.coordinates)[1]}\n            r={city.population / 3000000}\n            fill=\"#E91E63\"\n            stroke=\"#FFFFFF\"\n            className=\"marker\"\n            onClick={() => handleMarkerClick(i)}\n          />\n        ))}\n      </g>\n    </svg>\n  );\n};\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}