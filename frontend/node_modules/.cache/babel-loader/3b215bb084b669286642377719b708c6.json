{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx\";\nimport React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, useZoomPan } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + 'Bcn';\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + 'M';\n  } else {\n    return Math.round(num / 100) / 10 + 'K';\n  }\n};\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(CustomZoomableGroup, {\n    center: [0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, position => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 8\n    }\n  }, ({\n    geographies\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }, geographies.map(geo => {\n    const fillcolour = handleColourFill(geo);\n    const strokecolour = handleColourStroke(geo);\n    return notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: fillcolour,\n      stroke: strokecolour,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST,\n          GDP_MD_EST,\n          SUBREGION,\n          CONTINENT\n        } = geo.properties; // setTooltipContent(\n        //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n        // );\n\n        setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n        setname(NAME);\n        setpop_est(getnum(POP_EST));\n        setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n        setsubrg(SUBREGION);\n        setcontinent(CONTINENT);\n        setdisplay(true);\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n        setdisplay(false);\n      },\n      style: {\n        default: {\n          fill: '#D6D6DA',\n          outline: 'none'\n        },\n        hover: {\n          fill: '#F53',\n          outline: 'none'\n        },\n        pressed: {\n          fill: '#D6D6DA',\n          outline: 'none'\n        }\n      },\n      onClick: () => {\n        const {\n          ISO_A2\n        } = geo.properties;\n        setclickedCountry(ISO_A2);\n      },\n      onDoubleClick: () => {\n        setdoubleClicked();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }) : null;\n  }), geographies.map(geo => {\n    const centroid = geoCentroid(geo);\n    const {\n      ISO_A2\n    } = geo.properties;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      key: geo.rsmKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      coordinates: centroid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      fontSize: 7 / position.k,\n      alignmentBaseline: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }\n    }, countries[ISO_A2])));\n  })))))));\n};\n\nconst CustomZoomableGroup = ({\n  children,\n  ...restProps\n}) => {\n  const {\n    mapRef,\n    transformString,\n    position\n  } = useZoomPan(restProps);\n  return (\n    /*#__PURE__*/\n    // <div className=\"zoomable-group\">\n    React.createElement(\"g\", {\n      ref: mapRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: \"transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: transformString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 4\n      }\n    }, children(position))) // </div>\n\n  );\n};\n\nfunction VectorMap() {\n  const [content, setContent] = React.useState('');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MapChart, {\n    setTooltipContent: setContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default memo(VectorMap);","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/VectorMap.jsx"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","useZoomPan","ReactTooltip","geoUrl","rounded","num","Math","round","MapSettings","setTooltipContent","setname","setpop_est","setsubrg","setcontinent","setgdp","setdisplay","setclickedCountry","handleColourFill","handleColourStroke","setdoubleClicked","position","geographies","map","geo","fillcolour","strokecolour","notThisCountry","rsmKey","NAME","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","properties","getnum","pow","default","fill","outline","hover","pressed","ISO_A2","centroid","geoCentroid","k","countries","CustomZoomableGroup","children","restProps","mapRef","transformString","VectorMap","content","setContent","useState"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, useZoomPan } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\n\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst rounded = (num) => {\n\tif (num > 1000000000) {\n\t\treturn Math.round(num / 100000000) / 10 + 'Bcn';\n\t} else if (num > 1000000) {\n\t\treturn Math.round(num / 100000) / 10 + 'M';\n\t} else {\n\t\treturn Math.round(num / 100) / 10 + 'K';\n\t}\n};\n\nconst MapSettings = ({\n\tsetTooltipContent,\n\tsetname,\n\tsetpop_est,\n\tsetsubrg,\n\tsetcontinent,\n\tsetgdp,\n\tsetdisplay,\n\tsetclickedCountry,\n\thandleColourFill,\n\thandleColourStroke,\n\tsetdoubleClicked\n}) => {\n\treturn (\n\t\t<div className=\"map-wrapper\">\n\t\t\t<ComposableMap>\n\t\t\t\t<CustomZoomableGroup center={[ 0, 0 ]}>\n\t\t\t\t\t{(position) => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Geographies geography={geoUrl}>\n\t\t\t\t\t\t\t\t{({ geographies }) => (\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{geographies.map((geo) => {\n\t\t\t\t\t\t\t\t\t\t\tconst fillcolour = handleColourFill(geo);\n\t\t\t\t\t\t\t\t\t\t\tconst strokecolour = handleColourStroke(geo);\n\t\t\t\t\t\t\t\t\t\t\treturn notThisCountry(geo) ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<Geography\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={geo.rsmKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\tgeography={geo}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill={fillcolour}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstroke={strokecolour}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNAME,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPOP_EST,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGDP_MD_EST,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSUBREGION,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCONTINENT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} = geo.properties;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// setTooltipContent(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent(`${NAME} - ENEMY TERRITORY`);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetname(NAME);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetpop_est(getnum(POP_EST));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetsubrg(SUBREGION);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetcontinent(CONTINENT);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetdisplay(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetTooltipContent('');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetdisplay(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thover: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#F53',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpressed: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfill: '#D6D6DA',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutline: 'none'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { ISO_A2 } = geo.properties;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetclickedCountry(ISO_A2);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonDoubleClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetdoubleClicked();\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : null;\n\t\t\t\t\t\t\t\t\t\t})}\n\n\t\t\t\t\t\t\t\t\t\t{geographies.map((geo) => {\n\t\t\t\t\t\t\t\t\t\t\tconst centroid = geoCentroid(geo);\n\t\t\t\t\t\t\t\t\t\t\tconst { ISO_A2 } = geo.properties;\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<g key={geo.rsmKey}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Marker coordinates={centroid}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<text fontSize={7 / position.k} alignmentBaseline=\"middle\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{countries[ISO_A2]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Marker>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Geographies>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</CustomZoomableGroup>\n\t\t\t</ComposableMap>\n\t\t</div>\n\t);\n};\n\nconst CustomZoomableGroup = ({ children, ...restProps }) => {\n\tconst { mapRef, transformString, position } = useZoomPan(restProps);\n\treturn (\n\t\t// <div className=\"zoomable-group\">\n\t\t<g ref={mapRef}>\n\t\t\t<rect fill=\"transparent\" />\n\t\t\t<g transform={transformString}>{children(position)}</g>\n\t\t</g>\n\t\t// </div>\n\t);\n};\n\nfunction VectorMap() {\n\tconst [ content, setContent ] = React.useState('');\n\treturn (\n\t\t<div>\n\t\t\t<MapChart setTooltipContent={setContent} />\n\t\t\t<ReactTooltip>{content}</ReactTooltip>\n\t\t</div>\n\t);\n}\n\nexport default memo(VectorMap);\n"]},"metadata":{},"sourceType":"module"}