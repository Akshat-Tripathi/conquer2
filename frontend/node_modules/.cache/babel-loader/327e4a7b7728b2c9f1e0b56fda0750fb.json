{"ast":null,"code":"import _objectWithoutProperties from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _slicedToArray from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createClass from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _classCallCheck from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import React,{Component,useState}from\"react\";import{ComposableMap,Geographies,Geography,ZoomableGroup,Annotation,Marker,useZoomPan}from\"react-simple-maps\";import ReactTooltip from\"react-tooltip\";// import { useSpring, animated } from \"react-spring\";\nimport\"./Map.css\";import{connect,loaddetails}from\"../../api/index.js\";import{username}from\"../Home/StartGameBox.jsx\";import{geoCentroid}from\"d3-geo\";var geoUrl=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";var countriesLoaded=false;var countries={};var socket=null;var troops=0;var countryStates={};var playerColours={};var players=[];var countryState=function countryState(Troops,Player){_classCallCheck(this,countryState);this.Troops=Troops;this.Player=Player;};var GameMap=/*#__PURE__*/function(_Component){_inherits(GameMap,_Component);var _super=_createSuper(GameMap);function GameMap(){var _this;_classCallCheck(this,GameMap);_this=_super.call(this);socket=connect();socket.onmessage=function(msg){var action=JSON.parse(msg.data);switch(action.Type){case\"updateTroops\":troops=action.Troops;break;case\"updateCountry\":if(typeof countryStates[action.Country]==\"undefined\"||countryStates[action.Country].Player!=action.Player){countryStates[action.Country]=new countryState(action.Troops,action.Player);}else{countryStates[action.Country].Troops+=action.Troops;}break;case\"newPlayer\":console.log(action.Player+\" has entered the chat bois as: \"+action.Country);playerColours[action.Player]=action.Country;players.push(action.Player);}};return _this;}_createClass(GameMap,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(SideBar,null);}}]);return GameMap;}(Component);function SideBar(){//Fetch #troops, attack, move options, fix data vals\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setname=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),pop_est=_useState6[0],setpop_est=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),gdp=_useState8[0],setgdp=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),subrg=_useState10[0],setsubrg=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),continent=_useState12[0],setcontinent=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),display=_useState14[0],setdisplay=_useState14[1];var _useState15=useState(\"\"),_useState16=_slicedToArray(_useState15,2),clickedCountry=_useState16[0],setclickedCountry=_useState16[1];var handleclickedCountry=function handleclickedCountry(ISO_A2){setclickedCountry(ISO_A2);};var handledoubleClicked=function handledoubleClicked(){setclickedCountry(\"\");};var CountryDetails=function CountryDetails(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Spy Report On \",name,\":\"),/*#__PURE__*/React.createElement(\"h3\",null,countryStates[clickedCountry].Troops!==undefined&&countryStates[clickedCountry].Troops),/*#__PURE__*/React.createElement(\"h3\",null,\"Population: \",pop_est),/*#__PURE__*/React.createElement(\"h3\",null,\"GDP (PPP): \",gdp),continent!==\"South America\"&&/*#__PURE__*/React.createElement(\"h3\",null,\"Subregion: \",subrg),/*#__PURE__*/React.createElement(\"h3\",null,\"Continent: \",continent),/*#__PURE__*/React.createElement(\"h3\",null,\"Allegiance: Ohio\"));};var handleColourFill=function handleColourFill(country){if(!countriesLoaded){loadMap();countriesLoaded=true;}var ISO_A2=country.properties.ISO_A2;if(clickedCountry!==\"\"&&countries[clickedCountry]!==undefined&&countries[clickedCountry].some(function(iso){return iso===ISO_A2;})){return\"#be90d4\";}try{var col=playerColours[countryStates[ISO_A2].Player];if(typeof col==\"undefined\"){col=\"#B9A37E\";}return col;}catch(TypeError){return\"#B9A37E\";}};var options=function options(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",null,\"ATTACK\"),/*#__PURE__*/React.createElement(\"button\",null,\"MOVE\"),/*#__PURE__*/React.createElement(\"button\",null,\"DONATE\"),/*#__PURE__*/React.createElement(\"button\",null,\"OPTION 4\"));};var playerBox=function playerBox(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"PLAYERS:\"),/*#__PURE__*/React.createElement(\"ul\",null,players.map(function(p){return/*#__PURE__*/React.createElement(\"li\",{key:p},\"p\");})));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"playerBox\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"map-sidebar-wrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"map-sidebar-info-wrapper\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"START THE CONQUEST!\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Welcome Commander \",username,\"!\"),/*#__PURE__*/React.createElement(\"h3\",null,\"BASE TROOPS: \",troops)),/*#__PURE__*/React.createElement(\"p\",null,\"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"),clickedCountry!==\"\"&&/*#__PURE__*/React.createElement(\"selectedCountryOptions\",null),display&&/*#__PURE__*/React.createElement(CountryDetails,null))),/*#__PURE__*/React.createElement(MapSettings,{setTooltipContent:setState,setname:setname,setgdp:setgdp,setpop_est:setpop_est,setdisplay:setdisplay,setcontinent:setcontinent,setsubrg:setsubrg,setclickedCountry:handleclickedCountry,setdoubleClicked:handledoubleClicked,handleColourFill:handleColourFill,handleColourStroke:handleColourFill}),/*#__PURE__*/React.createElement(ReactTooltip,null,state));}var getnum=function getnum(num){var num=Math.round(num);if(num>Math.pow(10,12)){num=num/Math.pow(10,12)+\" Trillion\";}else if(num>Math.pow(10,9)){num=num/Math.pow(10,9)+\" Billion\";}else if(num>Math.pow(10,6)){num=num/Math.pow(10,6)+\" Million\";}return num;};//Countries to not display\nfunction notThisCountry(country){var NAME=country.properties.NAME;return NAME!==\"\";}var clickedCountry;//TODO: player team colour for country\nfunction countryColors(country){var _country$properties=country.properties,NAME=_country$properties.NAME,ISO_A2=_country$properties.ISO_A2;return\"#AAA\";}function loadMap(){//TODO: take value from the cookie\nfetch(\"/maps/world.txt\").then(function(raw){return raw.text();}).then(function(raw){return raw.split(\"\\n\");}).then(function(lines){return lines.map(function(s){return s.split(\" \");});}).then(function(lines){return lines.forEach(function(line){return countries[line[0]]=line.slice(1);});});}//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode){// var fs = require(\"fs\");\nvar fileURL=\"/maps/world.txt\";var textByLine=\"\";fetch(fileURL).then(function(raw){return raw.text();}).then(function(raw){return raw.split(\"\\n\");}).then(function(raw){return raw.map(function(x){return x.split(\" \");});}).then(function(raw){return textByLine=raw;});var countriesBordering=[];for(var j=0;j<textByLine.length;j++){var borders=textByLine[j].split(\" \");if(borders[0]==countrycode){for(var i=1;i<borders.length;i++){//Get border codes\ncountriesBordering.push(borders[i]);}}}console.log(countriesBordering);return countriesBordering;}/* GAME MAP */var MapSettings=function MapSettings(_ref){var setTooltipContent=_ref.setTooltipContent,setname=_ref.setname,setpop_est=_ref.setpop_est,setsubrg=_ref.setsubrg,setcontinent=_ref.setcontinent,setgdp=_ref.setgdp,setdisplay=_ref.setdisplay,setclickedCountry=_ref.setclickedCountry,handleColourFill=_ref.handleColourFill,handleColourStroke=_ref.handleColourStroke,setdoubleClicked=_ref.setdoubleClicked;return/*#__PURE__*/React.createElement(\"div\",{className:\"map-wrapper\"},/*#__PURE__*/React.createElement(ComposableMap,null,/*#__PURE__*/React.createElement(CustomZoomableGroup,{center:[0,0]},function(position){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Geographies,{geography:geoUrl},function(_ref2){var geographies=_ref2.geographies;return/*#__PURE__*/React.createElement(React.Fragment,null,geographies.map(function(geo){var fillcolour=handleColourFill(geo);var strokecolour=handleColourStroke(geo);return notThisCountry(geo)?/*#__PURE__*/React.createElement(Geography,{key:geo.rsmKey,geography:geo,fill:fillcolour,stroke:strokecolour,onMouseEnter:function onMouseEnter(){var _geo$properties=geo.properties,NAME=_geo$properties.NAME,POP_EST=_geo$properties.POP_EST,GDP_MD_EST=_geo$properties.GDP_MD_EST,SUBREGION=_geo$properties.SUBREGION,CONTINENT=_geo$properties.CONTINENT;// setTooltipContent(\n//   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n// );\nsetTooltipContent(\"\".concat(NAME,\" - ENEMY TERRITORY\"));setname(NAME);setpop_est(getnum(POP_EST));setgdp(getnum(GDP_MD_EST*Math.pow(10,6)));setsubrg(SUBREGION);setcontinent(CONTINENT);setdisplay(true);},onMouseLeave:function onMouseLeave(){setTooltipContent(\"\");setdisplay(false);},style:{default:{fill:\"#D6D6DA\",outline:\"none\"},hover:{fill:\"#F53\",outline:\"none\"},pressed:{fill:\"#D6D6DA\",outline:\"none\"}},onClick:function onClick(){var ISO_A2=geo.properties.ISO_A2;setclickedCountry(ISO_A2);},onDoubleClick:function onDoubleClick(){setdoubleClicked();}}):null;}),geographies.map(function(geo){var centroid=geoCentroid(geo);var ISO_A2=geo.properties.ISO_A2;return/*#__PURE__*/React.createElement(\"g\",{key:geo.rsmKey},/*#__PURE__*/React.createElement(Marker,{coordinates:centroid},/*#__PURE__*/React.createElement(\"text\",{fontSize:7/position.k,alignmentBaseline:\"middle\"},countries[ISO_A2])));}));}));})));};var CustomZoomableGroup=function CustomZoomableGroup(_ref3){var children=_ref3.children,restProps=_objectWithoutProperties(_ref3,[\"children\"]);var _useZoomPan=useZoomPan(restProps),mapRef=_useZoomPan.mapRef,transformString=_useZoomPan.transformString,position=_useZoomPan.position;return/*#__PURE__*/ // <div className=\"zoomable-group\">\nReact.createElement(\"g\",{ref:mapRef},/*#__PURE__*/React.createElement(\"rect\",{fill:\"transparent\"}),/*#__PURE__*/React.createElement(\"g\",{transform:transformString},children(position)))// </div>\n;};export default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.3/conquer2/frontend/src/pages/Map/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","Annotation","Marker","useZoomPan","ReactTooltip","connect","loaddetails","username","geoCentroid","geoUrl","countriesLoaded","countries","socket","troops","countryStates","playerColours","players","countryState","Troops","Player","GameMap","onmessage","msg","action","JSON","parse","data","Type","Country","console","log","push","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","handleclickedCountry","ISO_A2","handledoubleClicked","CountryDetails","undefined","handleColourFill","country","loadMap","properties","some","iso","col","TypeError","options","playerBox","map","p","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","fetch","then","raw","text","split","lines","s","forEach","line","slice","getCountryCodes","countrycode","fileURL","textByLine","x","countriesBordering","j","length","borders","i","MapSettings","setTooltipContent","handleColourStroke","setdoubleClicked","position","geographies","geo","fillcolour","strokecolour","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed","centroid","k","CustomZoomableGroup","children","restProps","mapRef","transformString"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Annotation,\n  Marker,\n  useZoomPan,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../../api/index.js\";\nimport { username } from \"../Home/StartGameBox.jsx\";\nimport { geoCentroid } from \"d3-geo\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nvar countriesLoaded = false;\nvar countries = {};\nvar socket = null;\nvar troops = 0;\nvar countryStates = {};\nvar playerColours = {};\nvar players = [];\n\nclass countryState {\n  constructor(Troops, Player) {\n    this.Troops = Troops;\n    this.Player = Player;\n  }\n}\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    socket = connect();\n    socket.onmessage = (msg) => {\n      var action = JSON.parse(msg.data);\n      switch (action.Type) {\n        case \"updateTroops\":\n          troops = action.Troops;\n          break;\n        case \"updateCountry\":\n          if (\n            typeof countryStates[action.Country] == \"undefined\" ||\n            countryStates[action.Country].Player != action.Player\n          ) {\n            countryStates[action.Country] = new countryState(\n              action.Troops,\n              action.Player\n            );\n          } else {\n            countryStates[action.Country].Troops += action.Troops;\n          }\n          break;\n        case \"newPlayer\":\n          console.log(\n            action.Player + \" has entered the chat bois as: \" + action.Country\n          );\n          playerColours[action.Player] = action.Country;\n          players.push(action.Player);\n      }\n    };\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const handleclickedCountry = (ISO_A2) => {\n    setclickedCountry(ISO_A2);\n  };\n\n  const handledoubleClicked = () => {\n    setclickedCountry(\"\");\n  };\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>\n          {countryStates[clickedCountry].Troops !== undefined &&\n            countryStates[clickedCountry].Troops}\n        </h3>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n        <h3>Allegiance: Ohio</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    if (!countriesLoaded) {\n      loadMap();\n      countriesLoaded = true;\n    }\n    const { ISO_A2 } = country.properties;\n\n    if (\n      clickedCountry !== \"\" &&\n      countries[clickedCountry] !== undefined &&\n      countries[clickedCountry].some((iso) => iso === ISO_A2)\n    ) {\n      return \"#be90d4\";\n    }\n    try {\n      var col = playerColours[countryStates[ISO_A2].Player];\n      if (typeof col == \"undefined\") {\n        col = \"#B9A37E\";\n      }\n      return col;\n    } catch (TypeError) {\n      return \"#B9A37E\";\n    }\n  };\n\n  const options = () => {\n    return (\n      <div>\n        <button>ATTACK</button>\n        <button>MOVE</button>\n        <button>DONATE</button>\n        <button>OPTION 4</button>\n      </div>\n    );\n  };\n\n  const playerBox = () => {\n    return (\n      <div>\n        <h2>PLAYERS:</h2>\n        <ul>\n          {players.map((p) => (\n            <li key={p}>p</li>\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <playerBox />\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n            <h3>BASE TROOPS: {troops}</h3>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          {clickedCountry !== \"\" && <selectedCountryOptions />}\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        setdoubleClicked={handledoubleClicked}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourFill}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\nfunction loadMap() {\n  //TODO: take value from the cookie\n  fetch(\"/maps/world.txt\")\n    .then((raw) => raw.text())\n    .then((raw) => raw.split(\"\\n\"))\n    .then((lines) => lines.map((s) => s.split(\" \")))\n    .then((lines) =>\n      lines.forEach((line) => (countries[line[0]] = line.slice(1)))\n    );\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"/maps/world.txt\";\n  var textByLine = \"\";\n  fetch(fileURL)\n    .then((raw) => raw.text())\n    .then((raw) => raw.split(\"\\n\"))\n    .then((raw) => raw.map((x) => x.split(\" \")))\n    .then((raw) => (textByLine = raw));\n\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n  console.log(countriesBordering);\n  return countriesBordering;\n}\n\n/* GAME MAP */\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n  setdoubleClicked,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap>\n        <CustomZoomableGroup center={[0, 0]}>\n          {(position) => (\n            <>\n              <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                  <>\n                    {geographies.map((geo) => {\n                      const fillcolour = handleColourFill(geo);\n                      const strokecolour = handleColourStroke(geo);\n                      return notThisCountry(geo) ? (\n                        <Geography\n                          key={geo.rsmKey}\n                          geography={geo}\n                          fill={fillcolour}\n                          stroke={strokecolour}\n                          onMouseEnter={() => {\n                            const {\n                              NAME,\n                              POP_EST,\n                              GDP_MD_EST,\n                              SUBREGION,\n                              CONTINENT,\n                            } = geo.properties;\n\n                            // setTooltipContent(\n                            //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                            // );\n\n                            setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                            setname(NAME);\n                            setpop_est(getnum(POP_EST));\n                            setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                            setsubrg(SUBREGION);\n                            setcontinent(CONTINENT);\n                            setdisplay(true);\n                          }}\n                          onMouseLeave={() => {\n                            setTooltipContent(\"\");\n                            setdisplay(false);\n                          }}\n                          style={{\n                            default: {\n                              fill: \"#D6D6DA\",\n                              outline: \"none\",\n                            },\n                            hover: {\n                              fill: \"#F53\",\n                              outline: \"none\",\n                            },\n                            pressed: {\n                              fill: \"#D6D6DA\",\n                              outline: \"none\",\n                            },\n                          }}\n                          onClick={() => {\n                            const { ISO_A2 } = geo.properties;\n                            setclickedCountry(ISO_A2);\n                          }}\n                          onDoubleClick={() => {\n                            setdoubleClicked();\n                          }}\n                        />\n                      ) : null;\n                    })}\n\n                    {geographies.map((geo) => {\n                      const centroid = geoCentroid(geo);\n                      const { ISO_A2 } = geo.properties;\n                      return (\n                        <g key={geo.rsmKey}>\n                          {\n                            <Marker coordinates={centroid}>\n                              <text\n                                fontSize={7 / position.k}\n                                alignmentBaseline=\"middle\"\n                              >\n                                {countries[ISO_A2]}\n                              </text>\n                            </Marker>\n                          }\n                        </g>\n                      );\n                    })}\n                  </>\n                )}\n              </Geographies>\n            </>\n          )}\n        </CustomZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nconst CustomZoomableGroup = ({ children, ...restProps }) => {\n  const { mapRef, transformString, position } = useZoomPan(restProps);\n  return (\n    // <div className=\"zoomable-group\">\n    <g ref={mapRef}>\n      <rect fill=\"transparent\" />\n      <g transform={transformString}>{children(position)}</g>\n    </g>\n    // </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}