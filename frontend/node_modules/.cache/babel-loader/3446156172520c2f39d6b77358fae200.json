{"ast":null,"code":"import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport { cos, degrees, radians, sin, sqrt } from \"../math.js\";\nimport { rotateRadians } from \"../rotation.js\";\nimport { transformer } from \"../transform.js\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit.js\";\nimport resample from \"./resample.js\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      // pre-rotate\n  alpha = 0,\n      // post-rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // pre-clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // post-clip extent\n  delta2 = 0.5,\n      // precision\n  projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/d3-geo/src/projection/index.js"],"names":["clipAntimeridian","clipCircle","clipRectangle","compose","identity","cos","degrees","radians","sin","sqrt","rotateRadians","transformer","fitExtent","fitSize","fitWidth","fitHeight","resample","transformRadians","point","x","y","stream","transformRotate","rotate","r","scaleTranslate","k","dx","dy","transform","invert","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","a","b","ai","bi","ci","fi","projection","project","projectionMutator","projectAt","lambda","phi","deltaLambda","deltaPhi","deltaGamma","theta","preclip","x0","y0","x1","y1","postclip","delta2","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","_","arguments","length","undefined","reset","clipAngle","clipExtent","scale","recenter","translate","center","angle","precision","extent","object","size","width","height","apply"],"mappings":"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","sourcesContent":["import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}