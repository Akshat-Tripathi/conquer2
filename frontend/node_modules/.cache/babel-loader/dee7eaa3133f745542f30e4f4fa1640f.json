{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx\";\nimport React, { Component, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\"; // import { useSpring, animated } from \"react-spring\";\n\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\nimport mapdata from \"../maps/world.txt\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    connect();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SideBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const CountryDetails = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"Spy Report On \", name, \":\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Population: \", pop_est), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"GDP (PPP): \", gdp), continent !== \"South America\" && /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 43\n      }\n    }, \"Subregion: \", subrg), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Continent: \", continent));\n  };\n\n  const handleColourFill = country => {\n    const {\n      ISO_A2\n    } = country.properties;\n\n    if (getCountryCodes(clickedCountry).includes(ISO_A2) && clickedCountry !== \"\") {\n      return \"#000\";\n    }\n\n    return \"#FFF\";\n  };\n\n  const handleclickedCountry = ISO_A2 => {\n    if (clickedCountry === \"\") {\n      setclickedCountry(ISO_A2);\n    } else {\n      setclickedCountry(\"\");\n    }\n  };\n\n  const handleColourStroke = country => {\n    const {\n      ISO_A2\n    } = country.properties;\n    return \"#FFF\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-sidebar-info-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"START THE CONQUEST!\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Welcome Commander \", username, \"!\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"contry data goes here (when clicked)\"), display && /*#__PURE__*/React.createElement(CountryDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(MapSettings, {\n    setTooltipContent: setState,\n    setname: setname,\n    setgdp: setgdp,\n    setpop_est: setpop_est,\n    setdisplay: setdisplay,\n    setcontinent: setcontinent,\n    setsubrg: setsubrg,\n    setclickedCountry: handleclickedCountry,\n    handleColourFill: handleColourFill,\n    handleColourStroke: handleColourStroke,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, state));\n}\n\nconst getnum = num => {\n  var num = Math.round(num);\n\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n\n  return num;\n}; //Countries to not display\n\n\nfunction notThisCountry(country) {\n  const {\n    NAME\n  } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry; //TODO: player team colour for country\n\nfunction countryColors(country) {\n  const {\n    NAME,\n    ISO_A2\n  } = country.properties;\n  return \"#AAA\";\n} //FIXME: fix read file correctly\n\n\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"../maps/world.txt\";\n  const textByLine = fetch(fileURL).then(line => console.log(line.text())).then(line => console.log(line)); // .then((line) => line.split(\"\\n\"));\n\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n\n  return countriesBordering;\n}\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ZoomableGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, ({\n    geographies\n  }) => geographies.map(geo => notThisCountry(geo) ? /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: handleColourFill(geo),\n    stroke: handleColourStroke(geo),\n    onMouseEnter: () => {\n      const {\n        NAME,\n        POP_EST,\n        GDP_MD_EST,\n        SUBREGION,\n        CONTINENT\n      } = geo.properties; // setTooltipContent(\n      //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n      // );\n\n      setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n      setname(NAME);\n      setpop_est(getnum(POP_EST));\n      setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n      setsubrg(SUBREGION);\n      setcontinent(CONTINENT);\n      setdisplay(true);\n    },\n    onMouseLeave: () => {\n      setTooltipContent(\"\");\n      setdisplay(false);\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      }\n    },\n    onClick: () => {\n      const {\n        ISO_A2\n      } = geo.properties;\n      setclickedCountry(ISO_A2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }\n  }) : null)))));\n};\n\nexport default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","ReactTooltip","connect","loaddetails","Intro2","username","mapdata","geoUrl","GameMap","constructor","render","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","CountryDetails","handleColourFill","country","ISO_A2","properties","getCountryCodes","includes","handleclickedCountry","handleColourStroke","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","countrycode","fileURL","textByLine","fetch","then","line","console","log","text","countriesBordering","j","length","borders","split","i","push","MapSettings","setTooltipContent","geographies","map","geo","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\n\nimport mapdata from \"../maps/world.txt\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    connect();\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    const { ISO_A2 } = country.properties;\n    if (\n      getCountryCodes(clickedCountry).includes(ISO_A2) &&\n      clickedCountry !== \"\"\n    ) {\n      return \"#000\";\n    }\n    return \"#FFF\";\n  };\n\n  const handleclickedCountry = (ISO_A2) => {\n    if (clickedCountry === \"\") {\n      setclickedCountry(ISO_A2);\n    } else {\n      setclickedCountry(\"\");\n    }\n  };\n\n  const handleColourStroke = (country) => {\n    const { ISO_A2 } = country.properties;\n    return \"#FFF\";\n  };\n\n  return (\n    <div>\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          <p>contry data goes here (when clicked)</p>\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourStroke}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"../maps/world.txt\";\n  const textByLine = fetch(fileURL)\n    .then((line) => console.log(line.text()))\n    .then((line) => console.log(line));\n  // .then((line) => line.split(\"\\n\"));\n\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n  return countriesBordering;\n}\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap data-tip=\"\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) =>\n                notThisCountry(geo) ? (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={handleColourFill(geo)}\n                    stroke={handleColourStroke(geo)}\n                    onMouseEnter={() => {\n                      const {\n                        NAME,\n                        POP_EST,\n                        GDP_MD_EST,\n                        SUBREGION,\n                        CONTINENT,\n                      } = geo.properties;\n\n                      // setTooltipContent(\n                      //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                      // );\n\n                      setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                      setname(NAME);\n                      setpop_est(getnum(POP_EST));\n                      setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                      setsubrg(SUBREGION);\n                      setcontinent(CONTINENT);\n                      setdisplay(true);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                      setdisplay(false);\n                    }}\n                    style={{\n                      default: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#F53\",\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                    }}\n                    onClick={() => {\n                      const { ISO_A2 } = geo.properties;\n                      setclickedCountry(ISO_A2);\n                    }}\n                  />\n                ) : null\n              )\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}