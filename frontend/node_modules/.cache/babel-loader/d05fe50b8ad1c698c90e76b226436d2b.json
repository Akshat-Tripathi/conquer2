{"ast":null,"code":"import _slicedToArray from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,useState}from\"react\";import{ComposableMap,Geographies,Geography,ZoomableGroup}from\"react-simple-maps\";import ReactTooltip from\"react-tooltip\";// import { useSpring, animated } from \"react-spring\";\nimport\"./Map.css\";import{connect,loaddetails}from\"../api/index.js\";import Intro2 from\"../shashgonenuts/intro2\";import{username}from\"./Home.jsx\";import mapdata from\"../maps/world.txt\";var geoUrl=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";var GameMap=/*#__PURE__*/function(_Component){_inherits(GameMap,_Component);var _super=_createSuper(GameMap);function GameMap(){var _this;_classCallCheck(this,GameMap);_this=_super.call(this);connect();return _this;}_createClass(GameMap,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(SideBar,null);}}]);return GameMap;}(Component);function SideBar(){//Fetch #troops, attack, move options, fix data vals\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setname=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),pop_est=_useState6[0],setpop_est=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),gdp=_useState8[0],setgdp=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),subrg=_useState10[0],setsubrg=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),continent=_useState12[0],setcontinent=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),display=_useState14[0],setdisplay=_useState14[1];var _useState15=useState(\"\"),_useState16=_slicedToArray(_useState15,2),clickedCountry=_useState16[0],setclickedCountry=_useState16[1];var CountryDetails=function CountryDetails(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Spy Report On \",name,\":\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Population: \",pop_est),/*#__PURE__*/React.createElement(\"h3\",null,\"GDP (PPP): \",gdp),continent!==\"South America\"&&/*#__PURE__*/React.createElement(\"h3\",null,\"Subregion: \",subrg),/*#__PURE__*/React.createElement(\"h3\",null,\"Continent: \",continent));};var handleColourFill=function handleColourFill(country){var ISO_A2=country.properties.ISO_A2;if(clickedCountry!==\"\"&&getCountryCodes(clickedCountry).includes(ISO_A2)){return\"#000\";}return\"#FFF\";};var handleclickedCountry=function handleclickedCountry(ISO_A2){if(clickedCountry===\"\"){setclickedCountry(ISO_A2);}else{setclickedCountry(\"\");}};var handleColourStroke=function handleColourStroke(country){var ISO_A2=country.properties.ISO_A2;return\"#FFF\";};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"map-sidebar-wrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"map-sidebar-info-wrapper\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"START THE CONQUEST!\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Welcome Commander \",username,\"!\")),/*#__PURE__*/React.createElement(\"p\",null,\"This is your war control room. Help us attain victory over our enemies. The Gods are on our side!\"),/*#__PURE__*/React.createElement(\"p\",null,\"contry data goes here (when clicked)\"),display&&/*#__PURE__*/React.createElement(CountryDetails,null))),/*#__PURE__*/React.createElement(MapSettings,{setTooltipContent:setState,setname:setname,setgdp:setgdp,setpop_est:setpop_est,setdisplay:setdisplay,setcontinent:setcontinent,setsubrg:setsubrg,setclickedCountry:handleclickedCountry,handleColourFill:handleColourFill,handleColourStroke:handleColourStroke}),/*#__PURE__*/React.createElement(ReactTooltip,null,state));}var getnum=function getnum(num){var num=Math.round(num);if(num>Math.pow(10,12)){num=num/Math.pow(10,12)+\" Trillion\";}else if(num>Math.pow(10,9)){num=num/Math.pow(10,9)+\" Billion\";}else if(num>Math.pow(10,6)){num=num/Math.pow(10,6)+\" Million\";}return num;};//Countries to not display\nfunction notThisCountry(country){var NAME=country.properties.NAME;return NAME!==\"\";}var clickedCountry;//TODO: player team colour for country\nfunction countryColors(country){var _country$properties=country.properties,NAME=_country$properties.NAME,ISO_A2=_country$properties.ISO_A2;return\"#AAA\";}//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode){// var fs = require(\"fs\");\nvar fileURL=\"/maps/world.txt\";var textByLine=fetch(fileURL).then(function(response){return response.text();}).then(function(data){console.log(data[0]);// mapdata = data[0];\n});var countriesBordering=[];for(var j=0;j<textByLine.length;j++){var borders=textByLine[j].split(\" \");if(borders[0]==countrycode){for(var i=1;i<borders.length;i++){//Get border codes\ncountriesBordering.push(borders[i]);}}}// console.log(countriesBordering);\nreturn countriesBordering;}var MapSettings=function MapSettings(_ref){var setTooltipContent=_ref.setTooltipContent,setname=_ref.setname,setpop_est=_ref.setpop_est,setsubrg=_ref.setsubrg,setcontinent=_ref.setcontinent,setgdp=_ref.setgdp,setdisplay=_ref.setdisplay,setclickedCountry=_ref.setclickedCountry,handleColourFill=_ref.handleColourFill,handleColourStroke=_ref.handleColourStroke;return/*#__PURE__*/React.createElement(\"div\",{className:\"map-wrapper\"},/*#__PURE__*/React.createElement(ComposableMap,{\"data-tip\":\"\"},/*#__PURE__*/React.createElement(ZoomableGroup,null,/*#__PURE__*/React.createElement(Geographies,{geography:geoUrl},function(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo){return notThisCountry(geo)?/*#__PURE__*/React.createElement(Geography,{key:geo.rsmKey,geography:geo,fill:handleColourFill(geo),stroke:handleColourStroke(geo),onMouseEnter:function onMouseEnter(){var _geo$properties=geo.properties,NAME=_geo$properties.NAME,POP_EST=_geo$properties.POP_EST,GDP_MD_EST=_geo$properties.GDP_MD_EST,SUBREGION=_geo$properties.SUBREGION,CONTINENT=_geo$properties.CONTINENT;// setTooltipContent(\n//   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n// );\nsetTooltipContent(\"\".concat(NAME,\" - ENEMY TERRITORY\"));setname(NAME);setpop_est(getnum(POP_EST));setgdp(getnum(GDP_MD_EST*Math.pow(10,6)));setsubrg(SUBREGION);setcontinent(CONTINENT);setdisplay(true);},onMouseLeave:function onMouseLeave(){setTooltipContent(\"\");setdisplay(false);},style:{default:{fill:\"#D6D6DA\",outline:\"none\"},hover:{fill:\"#F53\",outline:\"none\"},pressed:{fill:\"#D6D6DA\",outline:\"none\"}},onClick:function onClick(){var ISO_A2=geo.properties.ISO_A2;setclickedCountry(ISO_A2);}}):null;});}))));};export default GameMap;","map":{"version":3,"sources":["/Users/shashwatkansal/Documents/Shashwat/Projects/conquer2/V0.2/conquer2/frontend/src/pages/Map.jsx"],"names":["React","Component","useState","ComposableMap","Geographies","Geography","ZoomableGroup","ReactTooltip","connect","loaddetails","Intro2","username","mapdata","geoUrl","GameMap","SideBar","state","setState","name","setname","pop_est","setpop_est","gdp","setgdp","subrg","setsubrg","continent","setcontinent","display","setdisplay","clickedCountry","setclickedCountry","CountryDetails","handleColourFill","country","ISO_A2","properties","getCountryCodes","includes","handleclickedCountry","handleColourStroke","getnum","num","Math","round","pow","notThisCountry","NAME","countryColors","countrycode","fileURL","textByLine","fetch","then","response","text","data","console","log","countriesBordering","j","length","borders","split","i","push","MapSettings","setTooltipContent","geographies","map","geo","rsmKey","POP_EST","GDP_MD_EST","SUBREGION","CONTINENT","default","fill","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\n// import { useSpring, animated } from \"react-spring\";\nimport \"./Map.css\";\nimport { connect, loaddetails } from \"../api/index.js\";\nimport Intro2 from \"../shashgonenuts/intro2\";\nimport { username } from \"./Home.jsx\";\n\nimport mapdata from \"../maps/world.txt\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass GameMap extends Component {\n  constructor() {\n    super();\n    connect();\n  }\n\n  render() {\n    return <SideBar />;\n  }\n}\n\nfunction SideBar() {\n  //Fetch #troops, attack, move options, fix data vals\n  const [state, setState] = useState(\"\");\n\n  const [name, setname] = useState(\"\");\n  const [pop_est, setpop_est] = useState(\"\");\n  const [gdp, setgdp] = useState(\"\");\n  const [subrg, setsubrg] = useState(\"\");\n  const [continent, setcontinent] = useState(\"\");\n  const [display, setdisplay] = useState(false);\n  const [clickedCountry, setclickedCountry] = useState(\"\");\n\n  const CountryDetails = () => {\n    return (\n      <div>\n        <h2>Spy Report On {name}:</h2>\n        <h3>Population: {pop_est}</h3>\n        <h3>GDP (PPP): {gdp}</h3>\n        {continent !== \"South America\" && <h3>Subregion: {subrg}</h3>}\n        <h3>Continent: {continent}</h3>\n      </div>\n    );\n  };\n\n  const handleColourFill = (country) => {\n    const { ISO_A2 } = country.properties;\n    if (\n      clickedCountry !== \"\" &&\n      getCountryCodes(clickedCountry).includes(ISO_A2)\n    ) {\n      return \"#000\";\n    }\n    return \"#FFF\";\n  };\n\n  const handleclickedCountry = (ISO_A2) => {\n    if (clickedCountry === \"\") {\n      setclickedCountry(ISO_A2);\n    } else {\n      setclickedCountry(\"\");\n    }\n  };\n\n  const handleColourStroke = (country) => {\n    const { ISO_A2 } = country.properties;\n    return \"#FFF\";\n  };\n\n  return (\n    <div>\n      <div className=\"map-sidebar-wrapper\">\n        <div className=\"map-sidebar-info-wrapper\">\n          <div>\n            <h1>START THE CONQUEST!</h1>\n            <h2>Welcome Commander {username}!</h2>\n          </div>\n          <p>\n            This is your war control room. Help us attain victory over our\n            enemies. The Gods are on our side!\n          </p>\n          <p>contry data goes here (when clicked)</p>\n          {display && <CountryDetails />}\n        </div>\n      </div>\n      <MapSettings\n        setTooltipContent={setState}\n        setname={setname}\n        setgdp={setgdp}\n        setpop_est={setpop_est}\n        setdisplay={setdisplay}\n        setcontinent={setcontinent}\n        setsubrg={setsubrg}\n        setclickedCountry={handleclickedCountry}\n        handleColourFill={handleColourFill}\n        handleColourStroke={handleColourStroke}\n      />\n      <ReactTooltip>{state}</ReactTooltip>\n    </div>\n  );\n}\n\nconst getnum = (num) => {\n  var num = Math.round(num);\n  if (num > Math.pow(10, 12)) {\n    num = num / Math.pow(10, 12) + \" Trillion\";\n  } else if (num > Math.pow(10, 9)) {\n    num = num / Math.pow(10, 9) + \" Billion\";\n  } else if (num > Math.pow(10, 6)) {\n    num = num / Math.pow(10, 6) + \" Million\";\n  }\n  return num;\n};\n\n//Countries to not display\nfunction notThisCountry(country) {\n  const { NAME } = country.properties;\n  return NAME !== \"\";\n}\n\nvar clickedCountry;\n//TODO: player team colour for country\nfunction countryColors(country) {\n  const { NAME, ISO_A2 } = country.properties;\n  return \"#AAA\";\n}\n\n//FIXME: fix read file correctly\nfunction getCountryCodes(countrycode) {\n  // var fs = require(\"fs\");\n  const fileURL = \"/maps/world.txt\";\n  const textByLine = fetch(fileURL)\n    .then(function (response) {\n      return response.text();\n    })\n    .then(function (data) {\n      console.log(data[0]);\n      // mapdata = data[0];\n    });\n\n  var countriesBordering = [];\n\n  for (let j = 0; j < textByLine.length; j++) {\n    var borders = textByLine[j].split(\" \");\n    if (borders[0] == countrycode) {\n      for (let i = 1; i < borders.length; i++) {\n        //Get border codes\n        countriesBordering.push(borders[i]);\n      }\n    }\n  }\n  // console.log(countriesBordering);\n  return countriesBordering;\n}\n\nconst MapSettings = ({\n  setTooltipContent,\n  setname,\n  setpop_est,\n  setsubrg,\n  setcontinent,\n  setgdp,\n  setdisplay,\n  setclickedCountry,\n  handleColourFill,\n  handleColourStroke,\n}) => {\n  return (\n    <div className=\"map-wrapper\">\n      <ComposableMap data-tip=\"\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) =>\n                notThisCountry(geo) ? (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={handleColourFill(geo)}\n                    stroke={handleColourStroke(geo)}\n                    onMouseEnter={() => {\n                      const {\n                        NAME,\n                        POP_EST,\n                        GDP_MD_EST,\n                        SUBREGION,\n                        CONTINENT,\n                      } = geo.properties;\n\n                      // setTooltipContent(\n                      //   `${NAME} - $${getnum(GDP_MD_EST * Math.pow(10, 6))}`\n                      // );\n\n                      setTooltipContent(`${NAME} - ENEMY TERRITORY`);\n                      setname(NAME);\n                      setpop_est(getnum(POP_EST));\n                      setgdp(getnum(GDP_MD_EST * Math.pow(10, 6)));\n                      setsubrg(SUBREGION);\n                      setcontinent(CONTINENT);\n                      setdisplay(true);\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                      setdisplay(false);\n                    }}\n                    style={{\n                      default: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                      hover: {\n                        fill: \"#F53\",\n                        outline: \"none\",\n                      },\n                      pressed: {\n                        fill: \"#D6D6DA\",\n                        outline: \"none\",\n                      },\n                    }}\n                    onClick={() => {\n                      const { ISO_A2 } = geo.properties;\n                      setclickedCountry(ISO_A2);\n                    }}\n                  />\n                ) : null\n              )\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default GameMap;\n"]},"metadata":{},"sourceType":"module"}