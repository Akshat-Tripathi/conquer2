{"version":3,"sources":["media/HomeBackgroundVideo.mp4","pages/Home.jsx","pages/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Credits","className","Box","color","Typography","variant","align","Date","getFullYear","Title","React","Component","StartGameBox","props","useState","noValidate","placeholder","type","name","Video","useEffect","attemptPlay","videoEl","useRef","current","play","catch","error","console","loop","muted","autoPlay","id","playsInline","src","videoSource","alt","Home","InfoTab","Paper","elevation","MapDisplay","zoom","geography","geographies","map","geo","key","rsmKey","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iD,0UCe3C,SAASC,IACP,OACE,yBAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,CAAKC,MAAM,SACT,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQF,MAAM,OAAOG,MAAM,UAC5C,mBACA,IAAIC,MAAOC,cACX,OAOX,SAASC,IACP,OACE,yBAAKR,UAAU,cACb,kBAACC,EAAA,EAAD,CAAKI,MAAM,SAASH,MAAM,SACxB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBAEF,kBAACH,EAAA,EAAD,CAAKC,MAAM,QAAQG,MAAM,UACvB,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,4CAsCeI,IAAMC,UAmB7B,SAASC,EAAaC,GAEpB,IAF2B,EASLH,IAAMI,SAAS,uBATV,6BAe3B,OACE,yBAAKb,UAAU,WACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,iBAAd,kBACA,0BAAMc,YAAU,GACd,yBAAKd,UAAU,YACb,2CACA,2BACEe,YAAY,eACZC,KAAK,OACLC,KAAK,WACLH,YAAU,KAGd,yBAAKd,UAAU,YACb,4CACA,iCAEF,yBAAKA,UAAU,eACb,oDACA,iCAEF,yBAAKA,UAAU,gBACb,4BAAQgB,KAAK,UAAb,oBAQZ,SAASE,IACPC,qBAAU,WACRC,MACC,IAEH,IAAMC,EAAUC,iBAAO,MAEjBF,EAAc,WAClBC,GACEA,EAAQE,SACRF,EAAQE,QAAQC,OAAOC,OAAM,SAACC,GAC5BC,QAAQD,MAAM,2BAA4BA,OAIhD,OACE,yBAAK1B,UAAU,SACb,2BAAO4B,MAAI,EAACC,OAAK,EAACC,UAAQ,EAAC9B,UAAU,aAAa+B,GAAG,cACnD,4BACEC,aAAW,EACXC,IAAKC,IACLlB,KAAK,YACLmB,IAAI,oBALR,8G,IAceC,E,uKAEjB,OACE,yBAAKpC,UAAU,aACb,kBAACkB,EAAD,MACA,kBAACV,EAAD,MACA,kBAACG,EAAD,MACA,kBAACZ,EAAD,W,GAP0BW,a,sBC7JlC,SAAS2B,IACP,OACE,yBAAKrC,UAAU,YACb,kBAACsC,EAAA,EAAD,CAAOC,UAAW,IAChB,6BACE,4CAOH,IAAMC,EAAa,kBACxB,6BACE,kBAAC,gBAAD,KACE,kBAAC,gBAAD,CAAeC,KAAM,GACnB,kBAAC,cAAD,CAAaC,UAlBnB,2GAmBS,qBAAGC,YACUC,KAAI,SAACC,GAAD,OACd,kBAAC,YAAD,CACEC,IAAKD,EAAIE,OACTL,UAAWG,YASvB,kBAACR,EAAD,QClBWW,E,uKAfX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,OAAOC,UAAWZ,Y,GAR1B9B,aCIE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2C,c","file":"static/js/main.69297f5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HomeBackgroundVideo.ebe2f040.mp4\";","import React, { Component, useEffect, useRef } from \"react\";\nimport videoSource from \"../media/HomeBackgroundVideo.mp4\";\nimport {\n  Typography,\n  Box,\n  makeStyles,\n  Button,\n  TextField,\n  MenuItem,\n  FormControl,\n} from \"@material-ui/core\";\nimport \"./Home.css\";\n\n//TODO: ADD A FUNCTIONING FORM - FORMIK?\n\nfunction Credits() {\n  return (\n    <div className=\"credits\">\n      <Box color=\"white\">\n        <Typography variant=\"body2\" color=\"gray\" align=\"center\">\n          {\"Copyright Â© \"}\n          {new Date().getFullYear()}\n          {\".\"}\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n\nfunction Title() {\n  return (\n    <div className=\"title-head\">\n      <Box align=\"center\" color=\"white\">\n        <Typography variant=\"h2\">CONQUER V2.0</Typography>\n      </Box>\n      <Box color=\"white\" align=\"center\">\n        <Typography variant=\"subtitle1\" align=\"center\">\n          by Shashwat Kansal and Akshat Tripathi\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n\nconst gamemodes = [\n  {\n    label: \"World Conquest - 2025\",\n    value: \"WC\",\n  },\n  {\n    label: \"World War I - 1914\",\n    value: \"EW\",\n  },\n  {\n    label: \"American Independence War - 1776\",\n    value: \"ACW\",\n  },\n  {\n    label: \"Genghis Khan's Expedition - 1333\",\n    value: \"GKE\",\n  },\n  {\n    label: \"The Mahabharata - 3200BCE\",\n    value: \"MB\",\n  },\n];\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst onSubmit = async (values) => {\n  await sleep(300);\n  window.alert(JSON.stringify(values, 0, 2));\n};\n\nclass gameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: null,\n      gamemode: null,\n      noOfPlayers: null,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const ign = target.username;\n  }\n}\n\nfunction StartGameBox(props) {\n  //Collect form information\n  const state = {\n    username: \"Genghis Khan\",\n    gamemode: \"WC\",\n    noOfPlayers: 6,\n  };\n\n  //List the gamemode options\n  const [war, setWar] = React.useState(\"World Conquest 2025\");\n\n  const handleChange = (event) => {\n    setWar(event.target.value);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n        <h3 className=\"gamebox-title\">Join the game!</h3>\n        <form noValidate>\n          <div className=\"username\">\n            <label>Username</label>\n            <input\n              placeholder=\"Genghis Khan\"\n              type=\"text\"\n              name=\"username\"\n              noValidate\n            />\n          </div>\n          <div className=\"gamemode\">\n            <label>Game mode</label>\n            <input />\n          </div>\n          <div className=\"noOfPlayers\">\n            <label>Number of Players</label>\n            <input />\n          </div>\n          <div className=\"commence-war\">\n            <button type=\"submit\">COMMENCE WAR</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nfunction Video() {\n  useEffect(() => {\n    attemptPlay();\n  }, []);\n\n  const videoEl = useRef(null);\n\n  const attemptPlay = () => {\n    videoEl &&\n      videoEl.current &&\n      videoEl.current.play().catch((error) => {\n        console.error(\"Error attempting to play\", error);\n      });\n  };\n\n  return (\n    <div className=\"video\">\n      <video loop muted autoPlay className=\"home-video\" id=\"home-video\">\n        <source\n          playsInline\n          src={videoSource}\n          type=\"video/mp4\"\n          alt=\"This is Sparta!\"\n        />\n        What kind of browser version are you on... Your browser unfortunately\n        does not yet support the video tag!\n      </video>\n    </div>\n  );\n}\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"home-page\">\n        <Video />\n        <Title />\n        <StartGameBox />\n        <Credits />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n} from \"react-simple-maps\";\nimport { Paper, Typography } from \"@material-ui/core\";\nimport \"./Map.css\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nfunction InfoTab() {\n  return (\n    <div className=\"info-tab\">\n      <Paper elevation={10}>\n        <div>\n          <h3>InfoChart</h3>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n\nexport const MapDisplay = () => (\n  <div>\n    <ComposableMap>\n      <ZoomableGroup zoom={1}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                // fill=\"#DDD\"\n                // stroke=\"#DDD\"\n              />\n            ))\n          }\n        </Geographies>\n      </ZoomableGroup>\n    </ComposableMap>\n    <InfoTab />\n  </div>\n);\n\n// const MapSVG = () => (\n\n// );\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport { MapDisplay } from \"./pages/Map\";\nimport { UnderConstruction } from \"./pages/UnderConstruction\";\nimport { Box } from \"@material-ui/core\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <Switch>\n            <body>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/map\" component={MapDisplay} />\n            </body>\n          </Switch>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}